<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="_render_manager_8cpp" kind="file" language="C++">
    <compoundname>RenderManager.cpp</compoundname>
    <includes refid="_render_manager_8h" local="yes">RenderManager.h</includes>
    <includes refid="_vector3_8h" local="yes">Utils/Vector3.h</includes>
    <includes refid="_vector4_8h" local="yes">Utils/Vector4.h</includes>
    <includes local="no">OgreRoot.h</includes>
    <includes local="no">OgreSceneManager.h</includes>
    <includes local="no">OgreSceneNode.h</includes>
    <includes local="no">OgreQuaternion.h</includes>
    <includes local="no">OgreEntity.h</includes>
    <includes local="no">OgreLight.h</includes>
    <includes local="no">OgreFileSystemLayer.h</includes>
    <includes local="no">OgreConfigFile.h</includes>
    <includes local="no">OgreShaderGenerator.h</includes>
    <includes local="no">OgreRTShaderSystem.h</includes>
    <includes local="no">OgreMaterialManager.h</includes>
    <includes local="no">OgreColourValue.h</includes>
    <includes local="no">OgreVector.h</includes>
    <includes local="no">iostream</includes>
    <includes local="yes">OgreTextAreaOverlayElement.h</includes>
    <includes refid="_render_window_8h" local="yes">Render/RenderWindow.h</includes>
    <includes refid="_render_camera_8h" local="yes">Render/RenderCamera.h</includes>
    <includes refid="_render_mesh_8h" local="yes">Render/RenderMesh.h</includes>
    <includes refid="_render_particle_system_8h" local="yes">Render/RenderParticleSystem.h</includes>
    <includes refid="_s_g_technique_resolver_listener_8h" local="yes">Render/SGTechniqueResolverListener.h</includes>
    <includes local="no">OgreAnimation.h</includes>
    <includes local="no">OgreKeyFrame.h</includes>
    <incdepgraph>
      <node id="3">
        <label>MotorEngine/MotorEngineAPI.h</label>
        <link refid="_motor_engine_a_p_i_8h"/>
      </node>
      <node id="28">
        <label>Render/RenderCamera.h</label>
        <link refid="_render_camera_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>Src/Render/RenderManager.cpp</label>
        <link refid="_render_manager_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>RenderManager.h</label>
        <link refid="_render_manager_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>Render/RenderMesh.h</label>
        <link refid="_render_mesh_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>Render/RenderParticleSystem.h</label>
        <link refid="_render_particle_system_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>Render/RenderWindow.h</label>
        <link refid="_render_window_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>Render/SGTechniqueResolverListener.h</label>
        <link refid="_s_g_technique_resolver_listener_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>Utils/Singleton.h</label>
        <link refid="_singleton_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>Utils/Vector3.h</label>
        <link refid="_vector3_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>Utils/Vector4.h</label>
        <link refid="_vector4_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>OgreAnimation.h</label>
      </node>
      <node id="8">
        <label>OgreColourValue.h</label>
      </node>
      <node id="20">
        <label>OgreConfigFile.h</label>
      </node>
      <node id="17">
        <label>OgreEntity.h</label>
      </node>
      <node id="19">
        <label>OgreFileSystemLayer.h</label>
      </node>
      <node id="34">
        <label>OgreKeyFrame.h</label>
      </node>
      <node id="18">
        <label>OgreLight.h</label>
      </node>
      <node id="23">
        <label>OgreMaterialManager.h</label>
      </node>
      <node id="16">
        <label>OgreQuaternion.h</label>
      </node>
      <node id="22">
        <label>OgreRTShaderSystem.h</label>
      </node>
      <node id="13">
        <label>OgreRoot.h</label>
      </node>
      <node id="14">
        <label>OgreSceneManager.h</label>
      </node>
      <node id="15">
        <label>OgreSceneNode.h</label>
      </node>
      <node id="21">
        <label>OgreShaderGenerator.h</label>
      </node>
      <node id="26">
        <label>OgreTextAreaOverlayElement.h</label>
      </node>
      <node id="24">
        <label>OgreVector.h</label>
      </node>
      <node id="30">
        <label>OgreVector3.h</label>
      </node>
      <node id="11">
        <label>cmath</label>
      </node>
      <node id="25">
        <label>iostream</label>
      </node>
      <node id="10">
        <label>math.h</label>
      </node>
      <node id="5">
        <label>memory</label>
      </node>
      <node id="7">
        <label>string</label>
      </node>
      <node id="6">
        <label>unordered_map</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_render_manager_8h" kindref="compound">RenderManager.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_vector3_8h" kindref="compound">Utils/Vector3.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_vector4_8h" kindref="compound">Utils/Vector4.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;OgreRoot.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;OgreSceneManager.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;OgreSceneNode.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;OgreQuaternion.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;OgreEntity.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;OgreLight.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;OgreFileSystemLayer.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;OgreConfigFile.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;OgreShaderGenerator.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;OgreRTShaderSystem.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;OgreMaterialManager.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;OgreColourValue.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;OgreVector.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;OgreTextAreaOverlayElement.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_render_window_8h" kindref="compound">Render/RenderWindow.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_render_camera_8h" kindref="compound">Render/RenderCamera.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_render_mesh_8h" kindref="compound">Render/RenderMesh.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_render_particle_system_8h" kindref="compound">Render/RenderParticleSystem.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_s_g_technique_resolver_listener_8h" kindref="compound">Render/SGTechniqueResolverListener.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Animation<sp/>includes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;OgreAnimation.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;OgreKeyFrame.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceme" kindref="compound">me</ref>;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal">RenderManager::RenderManager()</highlight></codeline>
<codeline lineno="33"><highlight class="normal">{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classme_1_1_render_manager_1a327860ebd386e3e29fe0e2ab84bb1626" kindref="member">initRoot</ref>();</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classme_1_1_render_manager_1a248dfd42322988090961d41f784cfb48" kindref="member">initWindow</ref>();</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classme_1_1_render_manager_1a999b08c25f41f73e9dd0a162b63ca7e9" kindref="member">locateResources</ref>();</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classme_1_1_render_manager_1ac844509911cebc08bd84b34f61a43a2d" kindref="member">loadResources</ref>();</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classme_1_1_render_manager_1a70e7170efc33cc5a3f4ad06ac5c2486f" kindref="member">initialiseRTShaderSystem</ref>();</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classme_1_1_render_manager_1a3117d5e10383c6b0404554b3e47667d0" kindref="member">mSM</ref><sp/>=<sp/><ref refid="classme_1_1_render_manager_1a576a756c04044763622b72c4b7e6e408" kindref="member">mRoot</ref>-&gt;createSceneManager();</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classme_1_1_render_manager_1a860b0a5af9a7f30d2c38fb5e09c7011a" kindref="member">mShaderGenerator</ref>-&gt;addSceneManager(<ref refid="classme_1_1_render_manager_1a3117d5e10383c6b0404554b3e47667d0" kindref="member">mSM</ref>);</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classme_1_1_render_manager_1a327860ebd386e3e29fe0e2ab84bb1626" kindref="member">RenderManager::initRoot</ref>()</highlight></codeline>
<codeline lineno="44"><highlight class="normal">{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classme_1_1_render_manager_1ad8430f766674f86c92404dfc32fc19da" kindref="member">mFSLayer</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Ogre::FileSystemLayer(</highlight><highlight class="stringliteral">&quot;OgreFileSystem&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classme_1_1_render_manager_1a7d869efc48f5f6c524ff99abb74a460b" kindref="member">mPluginCfgPath</ref><sp/>=<sp/><ref refid="classme_1_1_render_manager_1ad8430f766674f86c92404dfc32fc19da" kindref="member">mFSLayer</ref>-&gt;getConfigFilePath(</highlight><highlight class="stringliteral">&quot;plugins.cfg&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classme_1_1_render_manager_1ada59f65deb076e29c41816b7e28a1ebb" kindref="member">mOgreCfgPath</ref><sp/>=<sp/><ref refid="classme_1_1_render_manager_1ad8430f766674f86c92404dfc32fc19da" kindref="member">mFSLayer</ref>-&gt;getConfigFilePath(</highlight><highlight class="stringliteral">&quot;ogre.cfg&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Ogre::FileSystemLayer::fileExists(<ref refid="classme_1_1_render_manager_1a7d869efc48f5f6c524ff99abb74a460b" kindref="member">mPluginCfgPath</ref>))</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OGRE_EXCEPT(Ogre::Exception::ERR_FILE_NOT_FOUND,<sp/></highlight><highlight class="stringliteral">&quot;plugins.cfg&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;OgreManager::initRoot&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Ogre::FileSystemLayer::fileExists(<ref refid="classme_1_1_render_manager_1ada59f65deb076e29c41816b7e28a1ebb" kindref="member">mOgreCfgPath</ref>))</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OGRE_EXCEPT(Ogre::Exception::ERR_FILE_NOT_FOUND,<sp/></highlight><highlight class="stringliteral">&quot;ogre.cfg&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;OgreManager::initRoot&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classme_1_1_render_manager_1aac24973efc5fb20e2a3f4b6d484dea82" kindref="member">mSolutionPath</ref><sp/>=<sp/><ref refid="classme_1_1_render_manager_1ad8430f766674f86c92404dfc32fc19da" kindref="member">mFSLayer</ref>-&gt;getConfigFilePath(</highlight><highlight class="stringliteral">&quot;plugins.cfg&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A�adido<sp/>para<sp/>definir<sp/>directorios<sp/>relativos<sp/>al<sp/>de<sp/>la<sp/>soluci�n<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classme_1_1_render_manager_1aac24973efc5fb20e2a3f4b6d484dea82" kindref="member">mSolutionPath</ref>.erase(<ref refid="classme_1_1_render_manager_1aac24973efc5fb20e2a3f4b6d484dea82" kindref="member">mSolutionPath</ref>.find_last_of(</highlight><highlight class="stringliteral">&quot;\\&quot;</highlight><highlight class="normal">)<sp/>+<sp/>1,<sp/><ref refid="classme_1_1_render_manager_1aac24973efc5fb20e2a3f4b6d484dea82" kindref="member">mSolutionPath</ref>.size()<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classme_1_1_render_manager_1ad8430f766674f86c92404dfc32fc19da" kindref="member">mFSLayer</ref>-&gt;setHomePath(<ref refid="classme_1_1_render_manager_1aac24973efc5fb20e2a3f4b6d484dea82" kindref="member">mSolutionPath</ref>);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Para<sp/>los<sp/>archivos<sp/>de<sp/>configuraci�n<sp/>ogre.<sp/>(en<sp/>el<sp/>bin<sp/>de<sp/>la<sp/>solubi�n)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//mSolutionPath.erase(mSolutionPath.find_last_of(&quot;\\&quot;)<sp/>+<sp/>1,<sp/>mSolutionPath.size()<sp/>-<sp/>1);<sp/><sp/><sp/>//<sp/>Quito<sp/>/bin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>std::<sp/>string<sp/>logPath<sp/>=<sp/><ref refid="classme_1_1_render_manager_1ad8430f766674f86c92404dfc32fc19da" kindref="member">mFSLayer</ref>-&gt;getWritablePath(</highlight><highlight class="stringliteral">&quot;ogre.log&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classme_1_1_render_manager_1a576a756c04044763622b72c4b7e6e408" kindref="member">mRoot</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Ogre::Root(<ref refid="classme_1_1_render_manager_1a7d869efc48f5f6c524ff99abb74a460b" kindref="member">mPluginCfgPath</ref>,<sp/><ref refid="classme_1_1_render_manager_1ada59f65deb076e29c41816b7e28a1ebb" kindref="member">mOgreCfgPath</ref>,<sp/><ref refid="classme_1_1_render_manager_1ad8430f766674f86c92404dfc32fc19da" kindref="member">mFSLayer</ref>-&gt;getWritablePath(</highlight><highlight class="stringliteral">&quot;ogre.log&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classme_1_1_render_manager_1a576a756c04044763622b72c4b7e6e408" kindref="member">mRoot</ref>)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OGRE_EXCEPT(Ogre::Exception::ERR_INVALID_CALL,<sp/></highlight><highlight class="stringliteral">&quot;Ogre::Root&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;OgreManager::initRoot&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classme_1_1_render_manager_1a576a756c04044763622b72c4b7e6e408" kindref="member">mRoot</ref>-&gt;restoreConfig();</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classme_1_1_render_manager_1a248dfd42322988090961d41f784cfb48" kindref="member">me::RenderManager::initWindow</ref>()</highlight></codeline>
<codeline lineno="73"><highlight class="normal">{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>mOgreWindow<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classme_1_1_render_window" kindref="compound">RenderWindow</ref>(</highlight><highlight class="stringliteral">&quot;OgreWindow&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>mOgreWindow-&gt;init(mRoot);</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classme_1_1_render_manager_1a999b08c25f41f73e9dd0a162b63ca7e9" kindref="member">RenderManager::locateResources</ref>()</highlight></codeline>
<codeline lineno="81"><highlight class="normal">{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>load<sp/>resource<sp/>paths<sp/>from<sp/>config<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>Ogre::ConfigFile<sp/>cf;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>Ogre::String<sp/>resourcesPath<sp/>=<sp/><ref refid="classme_1_1_render_manager_1ad8430f766674f86c92404dfc32fc19da" kindref="member">mFSLayer</ref>-&gt;getConfigFilePath(</highlight><highlight class="stringliteral">&quot;resources.cfg&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Ogre::FileSystemLayer::fileExists(resourcesPath))</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cf.load(resourcesPath);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ogre::ResourceGroupManager::getSingleton().addResourceLocation(</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ogre::FileSystemLayer::resolveBundlePath(<ref refid="classme_1_1_render_manager_1aac24973efc5fb20e2a3f4b6d484dea82" kindref="member">mSolutionPath</ref><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\\media&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FileSystem&quot;</highlight><highlight class="normal">,<sp/>Ogre::ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>Ogre::String<sp/>sec,<sp/>type,<sp/>arch;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>go<sp/>through<sp/>all<sp/>specified<sp/>resource<sp/>groups</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>Ogre::ConfigFile::SettingsBySection_::const_iterator<sp/>seci;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(seci<sp/>=<sp/>cf.getSettingsBySection().begin();<sp/>seci<sp/>!=<sp/>cf.getSettingsBySection().end();<sp/>++seci)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sec<sp/>=<sp/>seci-&gt;first;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Ogre::ConfigFile::SettingsMultiMap&amp;settings<sp/>=<sp/>seci-&gt;second;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ogre::ConfigFile::SettingsMultiMap::const_iterator<sp/>i;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>go<sp/>through<sp/>all<sp/>resource<sp/>paths</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>settings.begin();<sp/>i<sp/>!=<sp/>settings.end();<sp/>i++)</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>=<sp/>i-&gt;first;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arch<sp/>=<sp/>Ogre::FileSystemLayer::resolveBundlePath(i-&gt;second);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ogre::ResourceGroupManager::getSingleton().addResourceLocation(arch,<sp/>type,<sp/>sec);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classme_1_1_render_manager_1ac844509911cebc08bd84b34f61a43a2d" kindref="member">RenderManager::loadResources</ref>()<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>Ogre::ResourceGroupManager::getSingleton().initialiseAllResourceGroups();</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classme_1_1_render_manager_1a70e7170efc33cc5a3f4ad06ac5c2486f" kindref="member">RenderManager::initialiseRTShaderSystem</ref>()<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Ogre::RTShader::ShaderGenerator::initialize())</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classme_1_1_render_manager_1a860b0a5af9a7f30d2c38fb5e09c7011a" kindref="member">mShaderGenerator</ref><sp/>=<sp/>Ogre::RTShader::ShaderGenerator::getSingletonPtr();</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>and<sp/>register<sp/>the<sp/>material<sp/>manager<sp/>listener<sp/>if<sp/>it<sp/>doesn&apos;t<sp/>exist<sp/>yet.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classme_1_1_render_manager_1a23ad00e18700c36aac44b597525af289" kindref="member">mMaterialMgrListener</ref>)<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classme_1_1_render_manager_1a23ad00e18700c36aac44b597525af289" kindref="member">mMaterialMgrListener</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classme_1_1_s_g_technique_resolver_listener" kindref="compound">SGTechniqueResolverListener</ref>(<ref refid="classme_1_1_render_manager_1a860b0a5af9a7f30d2c38fb5e09c7011a" kindref="member">mShaderGenerator</ref>);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ogre::MaterialManager::getSingleton().addListener(<ref refid="classme_1_1_render_manager_1a23ad00e18700c36aac44b597525af289" kindref="member">mMaterialMgrListener</ref>);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><ref refid="classme_1_1_render_mesh" kindref="compound">RenderMesh</ref>*<sp/><ref refid="classme_1_1_render_manager_1a0ed927a29f4fc0b31e99f6a7aac8499c" kindref="member">me::RenderManager::getMesh</ref>(std::string<sp/>name)</highlight></codeline>
<codeline lineno="137"><highlight class="normal">{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mMeshes.count(name))</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mMeshes[name];</highlight></codeline>
<codeline lineno="142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><ref refid="classme_1_1_render_camera" kindref="compound">RenderCamera</ref>*<sp/><ref refid="classme_1_1_render_manager_1ae84cecebafea02a888bae13f8bfe2100" kindref="member">me::RenderManager::getCamera</ref>(std::string<sp/>name)</highlight></codeline>
<codeline lineno="144"><highlight class="normal">{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mCameras.count(name))</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mCameras[name];</highlight></codeline>
<codeline lineno="150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><ref refid="classme_1_1_render_particle_system" kindref="compound">RenderParticleSystem</ref>*<sp/><ref refid="classme_1_1_render_manager_1aaba7ea7edc8557cad2ccc15d8938136c" kindref="member">me::RenderManager::getParticle</ref>(std::string<sp/>name)</highlight></codeline>
<codeline lineno="153"><highlight class="normal">{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mParticles.count(name))</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mParticles[name];</highlight></codeline>
<codeline lineno="158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><ref refid="classme_1_1_render_manager_1a4e8f5da096fccb3eee6dc3e9e7a7b88b" kindref="member">me::RenderManager::~RenderManager</ref>()</highlight></codeline>
<codeline lineno="161"><highlight class="normal">{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>it<sp/>:<sp/>mCameras)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>it.second;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>mCameras.clear();</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>it2<sp/>:<sp/>mMeshes)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>it2.second;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>mMeshes.clear();</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>mOgreWindow;</highlight></codeline>
<codeline lineno="174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classme_1_1_render_manager_1a178464764e348339c8238b9749fa062a" kindref="member">me::RenderManager::createCamera</ref>(std::string<sp/>name,<sp/>std::string<sp/>parentName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nearDist,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>farDist,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>autoRadio,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>zOrder,<sp/>Ogre::ColourValue<sp/>color)</highlight></codeline>
<codeline lineno="177"><highlight class="normal">{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mCameras.count(name))</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classme_1_1_render_camera" kindref="compound">RenderCamera</ref>*<sp/>camera<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classme_1_1_render_camera" kindref="compound">RenderCamera</ref>();</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>Ogre::SceneNode*<sp/>cameraNode<sp/>=<sp/>createChildNode(name,<sp/>parentName);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>camera-&gt;<ref refid="classme_1_1_render_camera_1a5030de4d3ddce342e387346da3531dbb" kindref="member">init</ref>(cameraNode,<sp/>mSM,<sp/>mOgreWindow-&gt;getRenderWindow());</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>camera-&gt;<ref refid="classme_1_1_render_camera_1adbff2bc6f6ca0239143b65e34f641b31" kindref="member">createCamera</ref>(name.c_str(),<sp/>nearDist,<sp/>farDist,<sp/>autoRadio,zOrder,<sp/>color);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>mCameras[name]<sp/>=<sp/>camera;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classme_1_1_render_manager_1a178464764e348339c8238b9749fa062a" kindref="member">me::RenderManager::createCamera</ref>(std::string<sp/>name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nearDist,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>farDist,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>autoRadio,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>zOrder,<sp/>Ogre::ColourValue<sp/>color<sp/>)</highlight></codeline>
<codeline lineno="195"><highlight class="normal">{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mCameras.count(name))</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classme_1_1_render_camera" kindref="compound">RenderCamera</ref>*<sp/>camera<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classme_1_1_render_camera" kindref="compound">RenderCamera</ref>();</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>Ogre::SceneNode*<sp/>cameraNode<sp/>=<sp/>createNode(name);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>camera-&gt;<ref refid="classme_1_1_render_camera_1a5030de4d3ddce342e387346da3531dbb" kindref="member">init</ref>(cameraNode,<sp/>mSM,<sp/>mOgreWindow-&gt;getRenderWindow());</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>camera-&gt;<ref refid="classme_1_1_render_camera_1adbff2bc6f6ca0239143b65e34f641b31" kindref="member">createCamera</ref>(name.c_str(),<sp/>nearDist,<sp/>farDist,<sp/>autoRadio,zOrder,<sp/>color);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>mCameras[name]<sp/>=<sp/>camera;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="209"><highlight class="normal">}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classme_1_1_render_manager_1a6fe9e6d618c9e37586a9c3ee59ece096" kindref="member">me::RenderManager::setCameraInfo</ref>(std::string<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_ogre_1_1_vector" kindref="compound">Ogre::Vector3f</ref><sp/>&amp;pos,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_ogre_1_1_vector" kindref="compound">Ogre::Vector3f</ref><sp/>&amp;look)</highlight></codeline>
<codeline lineno="212"><highlight class="normal">{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classme_1_1_render_camera" kindref="compound">RenderCamera</ref>*<sp/>cam<sp/>=<sp/>getCamera(name);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cam<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>cam-&gt;<ref refid="classme_1_1_render_camera_1a40571944be5859eef20d23181b4fa58d" kindref="member">setPosition</ref>(pos);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>cam-&gt;<ref refid="classme_1_1_render_camera_1a32c5cbcf09efb64d1206c7430f55f807" kindref="member">lookAt</ref>(look);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal">}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classme_1_1_render_manager_1aa2e15751a8ec07e3fea41fe4c1fb1095" kindref="member">me::RenderManager::setViewportDimension</ref>(std::string<sp/>name,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>left,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>top,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>height)</highlight></codeline>
<codeline lineno="227"><highlight class="normal">{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classme_1_1_render_camera" kindref="compound">RenderCamera</ref>*<sp/>cam<sp/>=<sp/>getCamera(name);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cam<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>cam-&gt;<ref refid="classme_1_1_render_camera_1abfc0b688fba15b95adbe1f3a397c2cc8" kindref="member">setViewportDimension</ref>(left,<sp/>top,<sp/>width,<sp/>height);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="236"><highlight class="normal">}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classme_1_1_render_manager_1a4d85ad792a6f416d66d933854297877e" kindref="member">me::RenderManager::destroyCamera</ref>(std::string<sp/>name)</highlight></codeline>
<codeline lineno="240"><highlight class="normal">{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classme_1_1_render_camera" kindref="compound">RenderCamera</ref>*<sp/>cam<sp/>=<sp/>getCamera(name);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cam<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Try<sp/>to<sp/>destroy<sp/>nullptr<sp/>camera<sp/>with<sp/>this<sp/>name<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>cam;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mCameras.erase(name);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal">}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classme_1_1_render_manager_1a1d03ebb0bd03b0ab64d8313e58f6ff43" kindref="member">me::RenderManager::createNewLight</ref>(std::string<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_ogre_1_1_vector" kindref="compound">Ogre::Vector3f</ref><sp/>&amp;pos,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_ogre_1_1_vector" kindref="compound">Ogre::Vector3f</ref><sp/>&amp;dir)</highlight></codeline>
<codeline lineno="255"><highlight class="normal">{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>Ogre::Light*<sp/>light<sp/>=<sp/>mSM-&gt;createLight(name);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>light-&gt;setType(Ogre::Light::LT_DIRECTIONAL);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>light-&gt;setVisible(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>Ogre::SceneNode*<sp/>lightNode<sp/>=<sp/>createNode(name);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>lightNode-&gt;attachObject(light);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>lightNode-&gt;setDirection(dir);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>lightNode-&gt;setPosition(pos);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal">}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classme_1_1_render_manager_1aacc79cca3a6fdb50ddaa1f5db77a3279" kindref="member">me::RenderManager::createMesh</ref>(std::string<sp/>name,<sp/>std::string<sp/>nameMesh)</highlight></codeline>
<codeline lineno="269"><highlight class="normal">{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mMeshes.count(name))</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>Ogre::SceneNode*<sp/>entityNode<sp/>=<sp/>createNode(name);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classme_1_1_render_mesh" kindref="compound">RenderMesh</ref>*<sp/>mesh<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classme_1_1_render_mesh" kindref="compound">RenderMesh</ref>(entityNode,<sp/>nameMesh);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>mMeshes[name]<sp/>=<sp/>mesh;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="281"><highlight class="normal">}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classme_1_1_render_manager_1a62f200bfaa4528060e0e2bd5207e3533" kindref="member">me::RenderManager::setMeshPosition</ref>(std::string<sp/>name,<sp/><ref refid="classme_1_1_vector3" kindref="compound">Vector3</ref><sp/>pos)</highlight></codeline>
<codeline lineno="284"><highlight class="normal">{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classme_1_1_render_mesh" kindref="compound">RenderMesh</ref>*<sp/>mesh<sp/>=<sp/>getMesh(name);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mesh<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>mesh-&gt;<ref refid="classme_1_1_render_mesh_1a575c2ce1c6d49d58daf78a2dd6fec0e0" kindref="member">setPosition</ref>(pos.<ref refid="classme_1_1_vector3_1a0be34d0f041fc68996ec5cdd0bff584a" kindref="member">v3ToOgreV3</ref>());</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="292"><highlight class="normal">}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classme_1_1_render_manager_1a1840dca2798f59b099679d62063693e2" kindref="member">me::RenderManager::setMeshScale</ref>(std::string<sp/>name,<sp/><ref refid="classme_1_1_vector3" kindref="compound">Vector3</ref><sp/>scale)</highlight></codeline>
<codeline lineno="295"><highlight class="normal">{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classme_1_1_render_mesh" kindref="compound">RenderMesh</ref>*<sp/>mesh<sp/>=<sp/>getMesh(name);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mesh<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>mesh-&gt;<ref refid="classme_1_1_render_mesh_1ab94e87bc5223c4ea558dedaa8c5992f8" kindref="member">setScale</ref>(scale.<ref refid="classme_1_1_vector3_1a0be34d0f041fc68996ec5cdd0bff584a" kindref="member">v3ToOgreV3</ref>());</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classme_1_1_render_manager_1ac06471cccbe6477e420b70aecac959b3" kindref="member">me::RenderManager::setMeshRotation</ref>(std::string<sp/>name,<sp/><ref refid="classme_1_1_vector4" kindref="compound">Vector4</ref><sp/>rot)</highlight></codeline>
<codeline lineno="306"><highlight class="normal">{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classme_1_1_render_mesh" kindref="compound">RenderMesh</ref>*<sp/>mesh<sp/>=<sp/>getMesh(name);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mesh<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>mesh-&gt;<ref refid="classme_1_1_render_mesh_1a1abef28d58cd023be4c8e986d14e8740" kindref="member">setRotation</ref>(rot.<ref refid="classme_1_1_vector4_1aa244b8042c59647c594f4309e0131768" kindref="member">v4ToOgreQuaternion</ref>());</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="314"><highlight class="normal">}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classme_1_1_render_manager_1a9f4f2896ea0286162c8ea85670464166" kindref="member">me::RenderManager::setMeshMaterial</ref>(std::string<sp/>name,<sp/>std::string<sp/>nameMaterial)</highlight></codeline>
<codeline lineno="317"><highlight class="normal">{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classme_1_1_render_mesh" kindref="compound">RenderMesh</ref>*<sp/>mesh<sp/>=<sp/>getMesh(name);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mesh<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>mesh-&gt;<ref refid="classme_1_1_render_mesh_1aa3b9991173b75a29da5d71b4f7b20a79" kindref="member">setMaterial</ref>(nameMaterial);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classme_1_1_render_manager_1ae0d233f967e9433e003d80cda98b03a6" kindref="member">me::RenderManager::destroyMesh</ref>(std::string<sp/>name)</highlight></codeline>
<codeline lineno="328"><highlight class="normal">{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classme_1_1_render_mesh" kindref="compound">RenderMesh</ref>*<sp/>mesh<sp/>=<sp/>getMesh(name);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mesh<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Try<sp/>to<sp/>destroy<sp/>nullptr<sp/>mesh<sp/>with<sp/>this<sp/>name<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>mesh;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mMeshes.erase(name);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal">}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classme_1_1_render_manager_1a34ccc88afee1b20d186a0818659e1d0a" kindref="member">me::RenderManager::setMeshTransform</ref>(std::string<sp/>name,<sp/><ref refid="classme_1_1_vector3" kindref="compound">Vector3</ref><sp/>pos,<sp/><ref refid="classme_1_1_vector3" kindref="compound">Vector3</ref><sp/>scale)</highlight></codeline>
<codeline lineno="343"><highlight class="normal">{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classme_1_1_render_mesh" kindref="compound">RenderMesh</ref>*<sp/>mesh<sp/>=<sp/>getMesh(name);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mesh<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>mesh-&gt;<ref refid="classme_1_1_render_mesh_1ac51564e410f50c8a79d0e03a9ccf3796" kindref="member">setTransform</ref>(pos.<ref refid="classme_1_1_vector3_1a0be34d0f041fc68996ec5cdd0bff584a" kindref="member">v3ToOgreV3</ref>(),<sp/>scale.<ref refid="classme_1_1_vector3_1a0be34d0f041fc68996ec5cdd0bff584a" kindref="member">v3ToOgreV3</ref>(),<sp/>Ogre::Quaternion::IDENTITY);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="351"><highlight class="normal">}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classme_1_1_render_manager_1a34ccc88afee1b20d186a0818659e1d0a" kindref="member">me::RenderManager::setMeshTransform</ref>(std::string<sp/>name,<sp/><sp/><ref refid="classme_1_1_vector3" kindref="compound">Vector3</ref><sp/>pos,<sp/><ref refid="classme_1_1_vector3" kindref="compound">Vector3</ref><sp/>scale,<sp/><ref refid="classme_1_1_vector4" kindref="compound">Vector4</ref><sp/>rot)</highlight></codeline>
<codeline lineno="354"><highlight class="normal">{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classme_1_1_render_mesh" kindref="compound">RenderMesh</ref>*<sp/>mesh<sp/>=<sp/>getMesh(name);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mesh<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>mesh-&gt;<ref refid="classme_1_1_render_mesh_1ac51564e410f50c8a79d0e03a9ccf3796" kindref="member">setTransform</ref>(pos.<ref refid="classme_1_1_vector3_1a0be34d0f041fc68996ec5cdd0bff584a" kindref="member">v3ToOgreV3</ref>(),<sp/>scale.<ref refid="classme_1_1_vector3_1a0be34d0f041fc68996ec5cdd0bff584a" kindref="member">v3ToOgreV3</ref>(),<sp/>rot.<ref refid="classme_1_1_vector4_1aa244b8042c59647c594f4309e0131768" kindref="member">v4ToOgreQuaternion</ref>());</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="362"><highlight class="normal">}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classme_1_1_render_manager_1a87af12e2020d8b3f76b712248957bcfe" kindref="member">me::RenderManager::createParticle</ref>(std::string<sp/>name,<sp/>std::string<sp/>nameParticle)</highlight></codeline>
<codeline lineno="367"><highlight class="normal">{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mParticles.count(name))</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>Ogre::SceneNode*<sp/>entityNode<sp/>=<sp/>createNode(name);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classme_1_1_render_particle_system" kindref="compound">RenderParticleSystem</ref>*<sp/>particle<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classme_1_1_render_particle_system" kindref="compound">RenderParticleSystem</ref>(name,<sp/>entityNode,<sp/>nameParticle);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>mParticles[name]<sp/>=<sp/>particle;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classme_1_1_render_manager_1aa20b643ba1272a7b078f478699f06aa8" kindref="member">me::RenderManager::setParticleTransform</ref>(std::string<sp/>name,<sp/><ref refid="classme_1_1_vector3" kindref="compound">Vector3</ref><sp/>pos,<sp/><ref refid="classme_1_1_vector3" kindref="compound">Vector3</ref><sp/>scale)</highlight></codeline>
<codeline lineno="380"><highlight class="normal">{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classme_1_1_render_particle_system" kindref="compound">RenderParticleSystem</ref>*<sp/>particle<sp/>=<sp/>getParticle(name);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(particle<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>particle-&gt;<ref refid="classme_1_1_render_particle_system_1a2fd2e75217b300276d26dda3eb363055" kindref="member">setTransform</ref>(pos.<ref refid="classme_1_1_vector3_1a0be34d0f041fc68996ec5cdd0bff584a" kindref="member">v3ToOgreV3</ref>(),<sp/>scale.<ref refid="classme_1_1_vector3_1a0be34d0f041fc68996ec5cdd0bff584a" kindref="member">v3ToOgreV3</ref>(),<sp/>Ogre::Quaternion::IDENTITY);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="388"><highlight class="normal">}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classme_1_1_render_manager_1aa20b643ba1272a7b078f478699f06aa8" kindref="member">me::RenderManager::setParticleTransform</ref>(std::string<sp/>name,<sp/><ref refid="classme_1_1_vector3" kindref="compound">Vector3</ref><sp/>pos,<sp/><ref refid="classme_1_1_vector3" kindref="compound">Vector3</ref><sp/>scale,<sp/><ref refid="classme_1_1_vector4" kindref="compound">Vector4</ref><sp/>rot)</highlight></codeline>
<codeline lineno="391"><highlight class="normal">{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classme_1_1_render_particle_system" kindref="compound">RenderParticleSystem</ref>*<sp/>particle<sp/>=<sp/>getParticle(name);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(particle<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>particle-&gt;<ref refid="classme_1_1_render_particle_system_1a2fd2e75217b300276d26dda3eb363055" kindref="member">setTransform</ref>(pos.<ref refid="classme_1_1_vector3_1a0be34d0f041fc68996ec5cdd0bff584a" kindref="member">v3ToOgreV3</ref>(),<sp/>scale.<ref refid="classme_1_1_vector3_1a0be34d0f041fc68996ec5cdd0bff584a" kindref="member">v3ToOgreV3</ref>(),<sp/>rot.<ref refid="classme_1_1_vector4_1aa244b8042c59647c594f4309e0131768" kindref="member">v4ToOgreQuaternion</ref>());</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="399"><highlight class="normal">}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classme_1_1_render_manager_1aff4e5fb9981b8b9f74af4bbabace4217" kindref="member">me::RenderManager::setParticlePosition</ref>(std::string<sp/>name,<sp/><ref refid="classme_1_1_vector3" kindref="compound">Vector3</ref><sp/>pos)</highlight></codeline>
<codeline lineno="402"><highlight class="normal">{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classme_1_1_render_particle_system" kindref="compound">RenderParticleSystem</ref>*<sp/>particle<sp/>=<sp/>getParticle(name);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(particle<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>particle-&gt;<ref refid="classme_1_1_render_particle_system_1a2ed5c951a5539924b6b35af71cdf49df" kindref="member">setPosition</ref>(pos.<ref refid="classme_1_1_vector3_1a0be34d0f041fc68996ec5cdd0bff584a" kindref="member">v3ToOgreV3</ref>());</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classme_1_1_render_manager_1a1d609edefb8b1ac1196d14c01894ea3f" kindref="member">me::RenderManager::setParticleScale</ref>(std::string<sp/>name,<sp/><ref refid="classme_1_1_vector3" kindref="compound">Vector3</ref><sp/>scale)</highlight></codeline>
<codeline lineno="413"><highlight class="normal">{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classme_1_1_render_particle_system" kindref="compound">RenderParticleSystem</ref>*<sp/>particle<sp/>=<sp/>getParticle(name);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(particle<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>particle-&gt;<ref refid="classme_1_1_render_particle_system_1ad079289c01d88d9cf3dc0d33f1a16b08" kindref="member">setScale</ref>(scale.<ref refid="classme_1_1_vector3_1a0be34d0f041fc68996ec5cdd0bff584a" kindref="member">v3ToOgreV3</ref>());</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="421"><highlight class="normal">}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classme_1_1_render_manager_1a82fcf6a5a0af7b65a9e764118add1529" kindref="member">me::RenderManager::setParticleRotation</ref>(std::string<sp/>name,<sp/><ref refid="classme_1_1_vector4" kindref="compound">Vector4</ref><sp/>rot)</highlight></codeline>
<codeline lineno="424"><highlight class="normal">{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classme_1_1_render_particle_system" kindref="compound">RenderParticleSystem</ref>*<sp/>particle<sp/>=<sp/>getParticle(name);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(particle<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>particle-&gt;<ref refid="classme_1_1_render_particle_system_1aab701145965a7af4d6575dcc6ab8909f" kindref="member">setRotation</ref>(rot.<ref refid="classme_1_1_vector4_1aa244b8042c59647c594f4309e0131768" kindref="member">v4ToOgreQuaternion</ref>());</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="432"><highlight class="normal">}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classme_1_1_render_manager_1acabbd450883ec93eecb2ce704a983062" kindref="member">me::RenderManager::setParticleEmitting</ref>(std::string<sp/>name,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>emitted)</highlight></codeline>
<codeline lineno="435"><highlight class="normal">{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classme_1_1_render_particle_system" kindref="compound">RenderParticleSystem</ref>*<sp/>particle<sp/>=<sp/>getParticle(name);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(particle<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>particle-&gt;<ref refid="classme_1_1_render_particle_system_1ab7829db65bb81cb788d1c29165af6f95" kindref="member">setEmitting</ref>(emitted);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="443"><highlight class="normal">}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal">Ogre::SceneNode*<sp/><ref refid="classme_1_1_render_manager_1a805b50ba9a7d6a52de14b9ad30886e07" kindref="member">me::RenderManager::createNode</ref>(std::string<sp/>name)</highlight></codeline>
<codeline lineno="448"><highlight class="normal">{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>mSM-&gt;getRootSceneNode()-&gt;createChildSceneNode(name);</highlight></codeline>
<codeline lineno="450"><highlight class="normal">}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal">Ogre::SceneNode*<sp/><ref refid="classme_1_1_render_manager_1ae0c411b5780e0516f005f532e65e3de9" kindref="member">me::RenderManager::createChildNode</ref>(std::string<sp/>name,<sp/>std::string<sp/>parent)</highlight></codeline>
<codeline lineno="453"><highlight class="normal">{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mSM-&gt;getSceneNode(parent)-&gt;createChildSceneNode(name);</highlight></codeline>
<codeline lineno="455"><highlight class="normal">}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal">Ogre::SceneNode*<sp/><ref refid="classme_1_1_render_manager_1a79b8d85b9e2fcffbcc6bc117905dce5c" kindref="member">me::RenderManager::getRootSceneNode</ref>()</highlight></codeline>
<codeline lineno="458"><highlight class="normal">{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mSM-&gt;getRootSceneNode();</highlight></codeline>
<codeline lineno="460"><highlight class="normal">}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classme_1_1_render_manager_1a7b55b3550af4f044f269817de60bb3c6" kindref="member">me::RenderManager::render</ref>()</highlight></codeline>
<codeline lineno="463"><highlight class="normal">{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>mRoot-&gt;renderOneFrame();</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ogreAnimState-&gt;addTime(0.0166);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal">}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><ref refid="classme_1_1_render_window" kindref="compound">RenderWindow</ref>*<sp/><ref refid="classme_1_1_render_manager_1a542bc4658bce9fbfd206bbf06ac0b700" kindref="member">me::RenderManager::getOgreWindow</ref>()</highlight></codeline>
<codeline lineno="469"><highlight class="normal">{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mOgreWindow;</highlight></codeline>
<codeline lineno="471"><highlight class="normal">}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal">Ogre::Entity*<sp/><ref refid="classme_1_1_render_manager_1aca01cdecef083ab1865ad8c452edff75" kindref="member">me::RenderManager::getOgreEntity</ref>(std::string<sp/>name)</highlight></codeline>
<codeline lineno="474"><highlight class="normal">{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getMesh(name)-&gt;getOgreEntity();</highlight></codeline>
<codeline lineno="476"><highlight class="normal">}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal">Ogre::TextAreaOverlayElement*<sp/><ref refid="classme_1_1_render_manager_1a6a0af2feb18bba99c075690de30150c5" kindref="member">me::RenderManager::createOverlayElement</ref>()</highlight></codeline>
<codeline lineno="479"><highlight class="normal">{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="481"><highlight class="normal">}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal">Ogre::SceneManager*<sp/><ref refid="classme_1_1_render_manager_1a3b10d8c4a4309582272390b2ec5c368c" kindref="member">me::RenderManager::getSceneManager</ref>()</highlight></codeline>
<codeline lineno="484"><highlight class="normal">{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mSM;</highlight></codeline>
<codeline lineno="486"><highlight class="normal">}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classme_1_1_render_manager_1aebed1880a067088857492bca872c6e31" kindref="member">me::RenderManager::scene1</ref>()</highlight></codeline>
<codeline lineno="489"><highlight class="normal">{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>Ogre::SceneNode*<sp/>mSinbadNode;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>Ogre::Entity*<sp/>ent;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>ent<sp/>=<sp/>mSM-&gt;createEntity(</highlight><highlight class="stringliteral">&quot;Sinbad.mesh&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>mSinbadNode<sp/>=<sp/>mSM-&gt;getRootSceneNode()-&gt;createChildSceneNode(</highlight><highlight class="stringliteral">&quot;Sinbad&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>mSinbadNode-&gt;attachObject(ent);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>mSinbadNode-&gt;setPosition(0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>mSinbadNode-&gt;setScale(10,<sp/>10,<sp/>10);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>mSinbadNode-&gt;setVisible(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TEMPORAL<sp/>ANIMATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>Ogre::Real<sp/>duration<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>Ogre::Real<sp/>step<sp/>=<sp/>duration<sp/>/<sp/>4;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>Ogre::Animation*<sp/>anim;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>anim<sp/>=<sp/>mSM-&gt;createAnimation(</highlight><highlight class="stringliteral">&quot;sinbadAnimation&quot;</highlight><highlight class="normal">,<sp/>duration);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>Ogre::NodeAnimationTrack*<sp/>track<sp/>=<sp/>anim-&gt;createNodeTrack(0,<sp/>mSinbadNode);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>anim-&gt;setInterpolationMode(Ogre::Animation::IM_LINEAR);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>Ogre::TransformKeyFrame*<sp/>key;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>counterStep<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>key<sp/>=<sp/>track-&gt;createNodeKeyFrame(step<sp/>*<sp/>counterStep++);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>key-&gt;setRotation(Ogre::Quaternion());</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>key-&gt;setScale(Ogre::Vector3(10));</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>key<sp/>=<sp/>track-&gt;createNodeKeyFrame(step<sp/>*<sp/>counterStep++);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>key-&gt;setRotation(Ogre::Quaternion(Ogre::Degree(-90),<sp/>Ogre::Vector3::UNIT_X));</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>key-&gt;setScale(Ogre::Vector3(10));</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>key<sp/>=<sp/>track-&gt;createNodeKeyFrame(step<sp/>*<sp/>counterStep++);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>key-&gt;setRotation(Ogre::Quaternion(Ogre::Degree(-180),<sp/>Ogre::Vector3::UNIT_X));</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>key-&gt;setScale(Ogre::Vector3(10));</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>key<sp/>=<sp/>track-&gt;createNodeKeyFrame(step<sp/>*<sp/>counterStep++);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>key-&gt;setRotation(Ogre::Quaternion(Ogre::Degree(-270),<sp/>Ogre::Vector3::UNIT_X));</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>key-&gt;setScale(Ogre::Vector3(10));</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>key<sp/>=<sp/>track-&gt;createNodeKeyFrame(step<sp/>*<sp/>counterStep++);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>key-&gt;setRotation(Ogre::Quaternion(Ogre::Degree(-359),<sp/>Ogre::Vector3::UNIT_X));</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>key-&gt;setScale(Ogre::Vector3(10));</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>ogreAnimState<sp/>=<sp/>mSM-&gt;createAnimationState(</highlight><highlight class="stringliteral">&quot;sinbadAnimation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>ogreAnimState-&gt;setEnabled(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>ogreAnimState-&gt;setLoop(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="537"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="Src/Render/RenderManager.cpp"/>
  </compounddef>
</doxygen>
