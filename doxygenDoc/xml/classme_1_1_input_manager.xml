<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classme_1_1_input_manager" kind="class" language="C++" prot="public">
    <compoundname>me::InputManager</compoundname>
    <basecompoundref refid="classme_1_1_singleton" prot="public" virt="non-virtual">me::Singleton&lt; InputManager &gt;</basecompoundref>
    <includes refid="_input_manager_8h" local="no">InputManager.h</includes>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classme_1_1_input_manager_1a6e3b9ca43c4d4ad76fd08fc850553dfa" prot="private" static="no">
        <type>std::unordered_map&lt; std::string, <ref refid="structme_1_1_button" kindref="compound">Button</ref> &gt;</type>
        <definition>typedef std::unordered_map&lt;std::string, Button&gt; me::InputManager::ButtonMap</definition>
        <argsstring></argsstring>
        <name>ButtonMap</name>
        <qualifiedname>me::InputManager::ButtonMap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Input/InputManager.h" line="33" column="28" bodyfile="Src/Input/InputManager.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classme_1_1_input_manager_1ab7e1bb66a94ff6395fa5769dc17e672f" prot="private" static="no">
        <type>std::unordered_map&lt; std::string, <ref refid="structme_1_1_axis" kindref="compound">Axis</ref> &gt;</type>
        <definition>typedef std::unordered_map&lt;std::string, Axis&gt; me::InputManager::AxisMap</definition>
        <argsstring></argsstring>
        <name>AxisMap</name>
        <qualifiedname>me::InputManager::AxisMap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Input/InputManager.h" line="34" column="28" bodyfile="Src/Input/InputManager.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classme_1_1_input_manager_1a1d7caba51dc2fff4c9088e7d4a056187" prot="private" static="no">
        <type>std::unordered_multimap&lt; <ref refid="structme_1_1_input" kindref="compound">Input</ref>, std::string, <ref refid="structme_1_1_input_hasher" kindref="compound">InputHasher</ref> &gt;</type>
        <definition>typedef std::unordered_multimap&lt;Input, std::string, InputHasher&gt; me::InputManager::InputBinding</definition>
        <argsstring></argsstring>
        <name>InputBinding</name>
        <qualifiedname>me::InputManager::InputBinding</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Input/InputManager.h" line="39" column="33" bodyfile="Src/Input/InputManager.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classme_1_1_input_manager_1ab5b229ccf36535d066be98bee7aa6ef8" prot="private" static="no">
        <type>std::unordered_multimap&lt; std::string, <ref refid="structme_1_1_on_button_pressed_info" kindref="compound">OnButtonPressedInfo</ref> &gt;</type>
        <definition>typedef std::unordered_multimap&lt;std::string, OnButtonPressedInfo&gt; me::InputManager::OnButtonPressedMap</definition>
        <argsstring></argsstring>
        <name>OnButtonPressedMap</name>
        <qualifiedname>me::InputManager::OnButtonPressedMap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Input/InputManager.h" line="48" column="33" bodyfile="Src/Input/InputManager.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classme_1_1_input_manager_1a2bc8c3ba60bac779ef9ed38214cf2882" prot="private" static="no" mutable="no">
        <type>friend</type>
        <definition>friend me::InputManager::Singleton&lt; InputManager &gt;</definition>
        <argsstring></argsstring>
        <name>Singleton&lt; InputManager &gt;</name>
        <qualifiedname>me::InputManager::Singleton&lt; InputManager &gt;</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Input/InputManager.h" line="29" column="1" bodyfile="Src/Input/InputManager.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classme_1_1_input_manager_1a90476bfb9368306843a43b74285eaa4f" prot="private" static="no" mutable="no">
        <type>ButtonMap</type>
        <definition>ButtonMap me::InputManager::mButtons</definition>
        <argsstring></argsstring>
        <name>mButtons</name>
        <qualifiedname>me::InputManager::mButtons</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Input/InputManager.h" line="36" column="11" bodyfile="Src/Input/InputManager.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classme_1_1_input_manager_1a119c27604905ec9c309d78e1d0c407a1" prot="private" static="no" mutable="no">
        <type>AxisMap</type>
        <definition>AxisMap me::InputManager::mAxis</definition>
        <argsstring></argsstring>
        <name>mAxis</name>
        <qualifiedname>me::InputManager::mAxis</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Input/InputManager.h" line="37" column="9" bodyfile="Src/Input/InputManager.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classme_1_1_input_manager_1a3a5fd0052dfdffe5ae0e5ab4ff35505f" prot="private" static="no" mutable="no">
        <type>InputBinding</type>
        <definition>InputBinding me::InputManager::mButtonBindings</definition>
        <argsstring></argsstring>
        <name>mButtonBindings</name>
        <qualifiedname>me::InputManager::mButtonBindings</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Input/InputManager.h" line="42" column="14" bodyfile="Src/Input/InputManager.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classme_1_1_input_manager_1a79733b2b7ff58049e56f8ce74b2b0264" prot="private" static="no" mutable="no">
        <type>InputBinding</type>
        <definition>InputBinding me::InputManager::mPositiveAxisBindings</definition>
        <argsstring></argsstring>
        <name>mPositiveAxisBindings</name>
        <qualifiedname>me::InputManager::mPositiveAxisBindings</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Input/InputManager.h" line="44" column="14" bodyfile="Src/Input/InputManager.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classme_1_1_input_manager_1aacdd4eecbdf154e3d630b0d5b6400dca" prot="private" static="no" mutable="no">
        <type>InputBinding</type>
        <definition>InputBinding me::InputManager::mNegativeAxisBindings</definition>
        <argsstring></argsstring>
        <name>mNegativeAxisBindings</name>
        <qualifiedname>me::InputManager::mNegativeAxisBindings</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Input/InputManager.h" line="46" column="14" bodyfile="Src/Input/InputManager.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classme_1_1_input_manager_1ae4568c1f0c860843d9bade2e30489928" prot="private" static="no" mutable="no">
        <type>OnButtonPressedMap</type>
        <definition>OnButtonPressedMap me::InputManager::mOnButtonPressed</definition>
        <argsstring></argsstring>
        <name>mOnButtonPressed</name>
        <qualifiedname>me::InputManager::mOnButtonPressed</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Input/InputManager.h" line="51" column="20" bodyfile="Src/Input/InputManager.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classme_1_1_input_manager_1a9434b2ed3d6338e04f4f3b3831957e7f" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float me::InputManager::mouseX</definition>
        <argsstring></argsstring>
        <name>mouseX</name>
        <qualifiedname>me::InputManager::mouseX</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Input/InputManager.h" line="56" column="7" bodyfile="Src/Input/InputManager.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classme_1_1_input_manager_1a7f89719e5445a75efa8cc844f7850696" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float me::InputManager::mouseY</definition>
        <argsstring></argsstring>
        <name>mouseY</name>
        <qualifiedname>me::InputManager::mouseY</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Input/InputManager.h" line="56" column="14" bodyfile="Src/Input/InputManager.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classme_1_1_input_manager_1a8be46886da639b26d67181c29dab6d6c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>InputManager::InputManager</definition>
        <argsstring>()</argsstring>
        <name>InputManager</name>
        <qualifiedname>me::InputManager::InputManager</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Input/InputManager.h" line="31" column="1" bodyfile="Src/Input/InputManager.cpp" bodystart="19" bodyend="23"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classme_1_1_input_manager_1a114196ccbe49ed06b2b9b69986d0aa3b" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int InputManager::watchControllers</definition>
        <argsstring>(void *userdata, SDL_Event *event)</argsstring>
        <name>watchControllers</name>
        <qualifiedname>me::InputManager::watchControllers</qualifiedname>
        <param>
          <type>void *</type>
          <declname>userdata</declname>
        </param>
        <param>
          <type><ref refid="_button_8h_1a33fcc6aa445cb781bfca881e39e5333e" kindref="member">SDL_Event</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Input/InputManager.h" line="61" column="12" bodyfile="Src/Input/InputManager.cpp" bodystart="372" bodyend="402"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_input_manager_1a2728c074169e5b617829ace6eedfe38e" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int InputManager::updateInputData</definition>
        <argsstring>(void *userdata, SDL_Event *event)</argsstring>
        <name>updateInputData</name>
        <qualifiedname>me::InputManager::updateInputData</qualifiedname>
        <param>
          <type>void *</type>
          <declname>userdata</declname>
        </param>
        <param>
          <type><ref refid="_button_8h_1a33fcc6aa445cb781bfca881e39e5333e" kindref="member">SDL_Event</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Input/InputManager.h" line="66" column="12" bodyfile="Src/Input/InputManager.cpp" bodystart="404" bodyend="445"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_input_manager_1ae28bea4b3ea3deaca6d2e630072ca165" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structme_1_1_input" kindref="compound">Input</ref></type>
        <definition>Input me::InputManager::getInput</definition>
        <argsstring>(SDL_Event *event)</argsstring>
        <name>getInput</name>
        <qualifiedname>me::InputManager::getInput</qualifiedname>
        <param>
          <type><ref refid="_button_8h_1a33fcc6aa445cb781bfca881e39e5333e" kindref="member">SDL_Event</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Input/InputManager.h" line="71" column="14" bodyfile="Src/Input/InputManager.cpp" bodystart="447" bodyend="491"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classme_1_1_input_manager_1a097291ca4204112b88c9e011a841cd44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classme_1_1_input_manager" kindref="compound">InputManager</ref> &amp;</type>
        <definition>InputManager &amp; me::InputManager::operator=</definition>
        <argsstring>(const InputManager &amp;o)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>me::InputManager::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classme_1_1_input_manager" kindref="compound">InputManager</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Input/InputManager.h" line="74" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_input_manager_1a76af2005ae1b8b392e07c1729165e228" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>me::InputManager::InputManager</definition>
        <argsstring>(const InputManager &amp;o)=delete</argsstring>
        <name>InputManager</name>
        <qualifiedname>me::InputManager::InputManager</qualifiedname>
        <param>
          <type>const <ref refid="classme_1_1_input_manager" kindref="compound">InputManager</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Input/InputManager.h" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_input_manager_1ac07b6252aae165bce8f3608d23761ecf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>InputManager::~InputManager</definition>
        <argsstring>() override</argsstring>
        <name>~InputManager</name>
        <qualifiedname>me::InputManager::~InputManager</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Input/InputManager.h" line="76" column="1" bodyfile="Src/Input/InputManager.cpp" bodystart="25" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_input_manager_1a26f5a6fb4c432d00040156e45853cf98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void InputManager::addEvent</definition>
        <argsstring>(SDL_EventFilter filter, void *userdata=NULL)</argsstring>
        <name>addEvent</name>
        <qualifiedname>me::InputManager::addEvent</qualifiedname>
        <param>
          <type><ref refid="_button_8h_1aeb0e500783d5ab2d59cb0509da33af0c" kindref="member">SDL_EventFilter</ref></type>
          <declname>filter</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>userdata</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calls filter everytime an SDL_Event is processed. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filter</parametername>
</parameternamelist>
<parameterdescription>
<para>is a function with the format: int (<emphasis>SDL_EventFilter)(void</emphasis> userdata, SDL_Event* event). It is recommended to check the type of the event in it. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>userdata</parametername>
</parameternamelist>
<parameterdescription>
<para>is a pointer to additional information to use in the callback. It is NULL by default. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Input/InputManager.h" line="86" column="6" bodyfile="Src/Input/InputManager.cpp" bodystart="29" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_input_manager_1a12199fbdbebc969a00d5dcda3fe1b387" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void InputManager::deleteEvent</definition>
        <argsstring>(SDL_EventFilter filter, void *userdata=NULL)</argsstring>
        <name>deleteEvent</name>
        <qualifiedname>me::InputManager::deleteEvent</qualifiedname>
        <param>
          <type><ref refid="_button_8h_1aeb0e500783d5ab2d59cb0509da33af0c" kindref="member">SDL_EventFilter</ref></type>
          <declname>filter</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>userdata</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deletes filter from the SDLEventWatch. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filter</parametername>
</parameternamelist>
<parameterdescription>
<para>is the same function used to add the callback. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>userdata</parametername>
</parameternamelist>
<parameterdescription>
<para>is the same additional information used when adding the callback. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Input/InputManager.h" line="92" column="6" bodyfile="Src/Input/InputManager.cpp" bodystart="34" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_input_manager_1ab7396a5ea3288379cd876b32b6fe2c8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool InputManager::addButton</definition>
        <argsstring>(std::string name, int player=-1)</argsstring>
        <name>addButton</name>
        <qualifiedname>me::InputManager::addButton</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>player</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a button of name name. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the button. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>player</parametername>
</parameternamelist>
<parameterdescription>
<para>In case it is necessary to differenciate which player inputs a press, <ref refid="classme_1_1_input_manager" kindref="compound">InputManager</ref> will dissmiss presses from other players. First player is 0. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A boolean representing whether the button could be created. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Input/InputManager.h" line="102" column="6" bodyfile="Src/Input/InputManager.cpp" bodystart="39" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_input_manager_1a2b90a407cb61f0c568324bbe6cf746e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool InputManager::addButton</definition>
        <argsstring>(std::string name, Input input, int player=-1)</argsstring>
        <name>addButton</name>
        <qualifiedname>me::InputManager::addButton</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="structme_1_1_input" kindref="compound">Input</ref></type>
          <declname>input</declname>
        </param>
        <param>
          <type>int</type>
          <declname>player</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a button of name name and binds it with some physical input. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the button. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>Representation of the physical input. input.type can be SDL_KeyboardEvent for keyboard key presses, SDL_MouseButtonEvent for mouse clicks, or SDL_ControllerButtonEvent for controller presses; and input.which represents a value of SDL_KeyCode, SDL_BUTTON or SDL_GamepadButton depending on the type of the event </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>player</parametername>
</parameternamelist>
<parameterdescription>
<para>In case it is necessary to differenciate which player inputs a press, <ref refid="classme_1_1_input_manager" kindref="compound">InputManager</ref> will dissmiss presses from other players. First player is 0. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A boolean representing whether the button could be created. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Input/InputManager.h" line="117" column="6" bodyfile="Src/Input/InputManager.cpp" bodystart="63" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_input_manager_1a1e641f8f21ac2ba43fc022a97efea43b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool InputManager::deleteButton</definition>
        <argsstring>(std::string name)</argsstring>
        <name>deleteButton</name>
        <qualifiedname>me::InputManager::deleteButton</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deletes button name and any bindings it may have. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the button. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A boolean representing whether the button was deleted. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Input/InputManager.h" line="123" column="6" bodyfile="Src/Input/InputManager.cpp" bodystart="68" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_input_manager_1a33e300808296f6b3e61b99c491fffd12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool InputManager::addAxis</definition>
        <argsstring>(std::string name, AxisInfo info)</argsstring>
        <name>addAxis</name>
        <qualifiedname>me::InputManager::addAxis</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="structme_1_1_axis_info" kindref="compound">AxisInfo</ref></type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates an axis of name name. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the axis. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>Defines the behaviour of the axis. info.gravity is the speed in units per second that the axis falls toward neutral when no input is present and info.dead is how far the user needs to move an analog stick before your application registers the movement. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A boolean representing whether the button could be created. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Input/InputManager.h" line="135" column="6" bodyfile="Src/Input/InputManager.cpp" bodystart="93" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_input_manager_1a3384c2b1f5907fd436af6be072bca448" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool InputManager::addAxis</definition>
        <argsstring>(std::string name, AxisInfo info, AxisInput input)</argsstring>
        <name>addAxis</name>
        <qualifiedname>me::InputManager::addAxis</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="structme_1_1_axis_info" kindref="compound">AxisInfo</ref></type>
          <declname>info</declname>
        </param>
        <param>
          <type><ref refid="structme_1_1_axis_input" kindref="compound">AxisInput</ref></type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates an axis of name name and binds it with some physical input. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the axis. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>Defines the behaviour of the axis. info.gravity is the speed in units per second that the axis falls toward neutral when no input is present and info.dead is how far the user needs to move an analog stick before your application registers the movement. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>Represents two physical buttons or keys that can trigger a virtual axis. input.type can be SDL_KeyboardEvent for keyboard key presses, SDL_MouseButtonEvent for mouse clicks, or SDL_ControllerButtonEvent for controller presses; and input.positive and input.negative represents a value of SDL_KeyCode, SDL_BUTTON or SDL_GamepadButton depending on the type of the event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A boolean representing whether the button could be created. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Input/InputManager.h" line="152" column="6" bodyfile="Src/Input/InputManager.cpp" bodystart="118" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_input_manager_1a072961e5535cd290a360e3af8fb92be7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool InputManager::deleteAxis</definition>
        <argsstring>(std::string name)</argsstring>
        <name>deleteAxis</name>
        <qualifiedname>me::InputManager::deleteAxis</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deletes axis name and any bindings it may have. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the axis. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A boolean representing whether the axis was deleted. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Input/InputManager.h" line="158" column="6" bodyfile="Src/Input/InputManager.cpp" bodystart="123" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_input_manager_1a8bebb9629b541d74f418bba91b027416" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool InputManager::addBinding</definition>
        <argsstring>(std::string name, Input input)</argsstring>
        <name>addBinding</name>
        <qualifiedname>me::InputManager::addBinding</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="structme_1_1_input" kindref="compound">Input</ref></type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Binds some physical input with a virutal button, so triggering said input will trigger the virtual button. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the button. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>Representation of the physical input. input.type can be SDL_KeyboardEvent for keyboard key presses, SDL_MouseButtonEvent for mouse clicks, or SDL_ControllerButtonEvent for controller presses; and input.which represents a value of SDL_KeyCode, SDL_BUTTON or SDL_GamepadButton depending on the type of the event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A boolean representing whether the binding was successful. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Input/InputManager.h" line="172" column="6" bodyfile="Src/Input/InputManager.cpp" bodystart="178" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_input_manager_1af7d3de9619cf3d754fb8f59ec636cde3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool InputManager::addBinding</definition>
        <argsstring>(std::string name, AxisInput input)</argsstring>
        <name>addBinding</name>
        <qualifiedname>me::InputManager::addBinding</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="structme_1_1_axis_input" kindref="compound">AxisInput</ref></type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Binds some physical input with a virutal axis, so triggering said input will trigger the virtual axis. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the axis. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>Represents two physical buttons or keys that can trigger a virtual axis. input.type can be SDL_KeyboardEvent for keyboard key presses, SDL_MouseButtonEvent for mouse clicks, or SDL_ControllerButtonEvent for controller presses; and input.positive and input.negative represents a value of SDL_KeyCode, SDL_BUTTON or SDL_GamepadButton depending on the type of the event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A boolean representing whether the binding was successful. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Input/InputManager.h" line="185" column="6" bodyfile="Src/Input/InputManager.cpp" bodystart="191" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_input_manager_1ab34c3e73e7ee2caac0cc583c97e1e039" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool InputManager::deleteBinding</definition>
        <argsstring>(std::string name, Input input)</argsstring>
        <name>deleteBinding</name>
        <qualifiedname>me::InputManager::deleteBinding</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="structme_1_1_input" kindref="compound">Input</ref></type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unlinks a button with some physical input <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the button. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>Representation of the physical input. input.type can be SDL_KeyboardEvent for keyboard key presses, SDL_MouseButtonEvent for mouse clicks, or SDL_ControllerButtonEvent for controller presses; and input.which represents a value of SDL_KeyCode, SDL_BUTTON or SDL_GamepadButton depending on the type of the event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A boolean representing whether the binding was deleted. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Input/InputManager.h" line="197" column="6" bodyfile="Src/Input/InputManager.cpp" bodystart="212" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_input_manager_1aecfba078630a4503db3e27cd34318295" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool InputManager::deleteBinding</definition>
        <argsstring>(std::string name, AxisInput input)</argsstring>
        <name>deleteBinding</name>
        <qualifiedname>me::InputManager::deleteBinding</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="structme_1_1_axis_input" kindref="compound">AxisInput</ref></type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unlinks an axis with some physical input <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the axis. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>Represents two physical buttons or keys that can trigger a virtual axis. input.type can be SDL_KeyboardEvent for keyboard key presses, SDL_MouseButtonEvent for mouse clicks, or SDL_ControllerButtonEvent for controller presses; and input.positive and input.negative represents a value of SDL_KeyCode, SDL_BUTTON or SDL_GamepadButton depending on the type of the event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A boolean representing whether the binding was deleted. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Input/InputManager.h" line="209" column="6" bodyfile="Src/Input/InputManager.cpp" bodystart="231" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_input_manager_1aad30006d6511ba5c563393367851ee14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool InputManager::getButton</definition>
        <argsstring>(std::string name)</argsstring>
        <name>getButton</name>
        <qualifiedname>me::InputManager::getButton</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the button. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The state of the button. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Input/InputManager.h" line="215" column="6" bodyfile="Src/Input/InputManager.cpp" bodystart="256" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_input_manager_1ad1094f22aae49c3ff590780d8f8ecdbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float InputManager::getAxis</definition>
        <argsstring>(std::string name)</argsstring>
        <name>getAxis</name>
        <qualifiedname>me::InputManager::getAxis</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the axis. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value of the axis in range [-1, 1]. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Input/InputManager.h" line="220" column="7" bodyfile="Src/Input/InputManager.cpp" bodystart="270" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_input_manager_1aa212df8f68741f22a9b5410c6ea48f05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool InputManager::addOnButtonPressedEvent</definition>
        <argsstring>(std::string name, int(*callback)(void *), void *additionalData=NULL)</argsstring>
        <name>addOnButtonPressedEvent</name>
        <qualifiedname>me::InputManager::addOnButtonPressedEvent</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int(*)(void *)</type>
          <declname>callback</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>additionalData</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Binds a callback to a virtual button, so it&apos;s executed anytime it&apos;s triggered. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the button </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback to be binded to button name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>additionalData</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter that the callback would be called with and it may use. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Whether the callback could be binded to the button </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Input/InputManager.h" line="229" column="6" bodyfile="Src/Input/InputManager.cpp" bodystart="287" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_input_manager_1a77f961528884908c89afb2a01d6f4da9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool InputManager::deleteOnButtonPressedEvent</definition>
        <argsstring>(std::string name, int(*callback)(void *), void *additionalData=NULL)</argsstring>
        <name>deleteOnButtonPressedEvent</name>
        <qualifiedname>me::InputManager::deleteOnButtonPressedEvent</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int(*)(void *)</type>
          <declname>callback</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>additionalData</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unbinds a callback from its virtual button, so it&apos;s never executed again anytime its button is triggered. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the button </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback to be unbinded to button name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>additionalData</parametername>
</parameternamelist>
<parameterdescription>
<para>is the same additional information used when the callback was binded. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Whether the callback could be unbinded to the button </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Input/InputManager.h" line="237" column="6" bodyfile="Src/Input/InputManager.cpp" bodystart="336" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_input_manager_1a4c24100552d97f3d2a88e535e0f87ea8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_vector2" kindref="compound">Vector2</ref></type>
        <definition>Vector2 me::InputManager::getMousePositon</definition>
        <argsstring>()</argsstring>
        <name>getMousePositon</name>
        <qualifiedname>me::InputManager::getMousePositon</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Input/InputManager.h" line="242" column="9" bodyfile="Src/Input/InputManager.cpp" bodystart="365" bodyend="370"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ref refid="classme_1_1_input_manager" kindref="compound">InputManager</ref> provides information and callbacks for any user input from keyboard, mouse and game controller. Define virtual buttons to easely remap your game&apos;s controls. You can access the <ref refid="classme_1_1_input_manager" kindref="compound">InputManager</ref> just calling im(). </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>me::Singleton&lt; InputManager &gt;</label>
        <link refid="classme_1_1_singleton"/>
      </node>
      <node id="1">
        <label>me::InputManager</label>
        <link refid="classme_1_1_input_manager"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>me::Singleton&lt; InputManager &gt;</label>
        <link refid="classme_1_1_singleton"/>
      </node>
      <node id="1">
        <label>me::InputManager</label>
        <link refid="classme_1_1_input_manager"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="Src/Input/InputManager.h" line="28" column="1" bodyfile="Src/Input/InputManager.h" bodystart="28" bodyend="243"/>
    <listofallmembers>
      <member refid="classme_1_1_input_manager_1a33e300808296f6b3e61b99c491fffd12" prot="public" virt="non-virtual"><scope>me::InputManager</scope><name>addAxis</name></member>
      <member refid="classme_1_1_input_manager_1a3384c2b1f5907fd436af6be072bca448" prot="public" virt="non-virtual"><scope>me::InputManager</scope><name>addAxis</name></member>
      <member refid="classme_1_1_input_manager_1a8bebb9629b541d74f418bba91b027416" prot="public" virt="non-virtual"><scope>me::InputManager</scope><name>addBinding</name></member>
      <member refid="classme_1_1_input_manager_1af7d3de9619cf3d754fb8f59ec636cde3" prot="public" virt="non-virtual"><scope>me::InputManager</scope><name>addBinding</name></member>
      <member refid="classme_1_1_input_manager_1ab7396a5ea3288379cd876b32b6fe2c8c" prot="public" virt="non-virtual"><scope>me::InputManager</scope><name>addButton</name></member>
      <member refid="classme_1_1_input_manager_1a2b90a407cb61f0c568324bbe6cf746e5" prot="public" virt="non-virtual"><scope>me::InputManager</scope><name>addButton</name></member>
      <member refid="classme_1_1_input_manager_1a26f5a6fb4c432d00040156e45853cf98" prot="public" virt="non-virtual"><scope>me::InputManager</scope><name>addEvent</name></member>
      <member refid="classme_1_1_input_manager_1aa212df8f68741f22a9b5410c6ea48f05" prot="public" virt="non-virtual"><scope>me::InputManager</scope><name>addOnButtonPressedEvent</name></member>
      <member refid="classme_1_1_input_manager_1ab7e1bb66a94ff6395fa5769dc17e672f" prot="private" virt="non-virtual"><scope>me::InputManager</scope><name>AxisMap</name></member>
      <member refid="classme_1_1_input_manager_1a6e3b9ca43c4d4ad76fd08fc850553dfa" prot="private" virt="non-virtual"><scope>me::InputManager</scope><name>ButtonMap</name></member>
      <member refid="classme_1_1_input_manager_1a072961e5535cd290a360e3af8fb92be7" prot="public" virt="non-virtual"><scope>me::InputManager</scope><name>deleteAxis</name></member>
      <member refid="classme_1_1_input_manager_1ab34c3e73e7ee2caac0cc583c97e1e039" prot="public" virt="non-virtual"><scope>me::InputManager</scope><name>deleteBinding</name></member>
      <member refid="classme_1_1_input_manager_1aecfba078630a4503db3e27cd34318295" prot="public" virt="non-virtual"><scope>me::InputManager</scope><name>deleteBinding</name></member>
      <member refid="classme_1_1_input_manager_1a1e641f8f21ac2ba43fc022a97efea43b" prot="public" virt="non-virtual"><scope>me::InputManager</scope><name>deleteButton</name></member>
      <member refid="classme_1_1_input_manager_1a12199fbdbebc969a00d5dcda3fe1b387" prot="public" virt="non-virtual"><scope>me::InputManager</scope><name>deleteEvent</name></member>
      <member refid="classme_1_1_input_manager_1a77f961528884908c89afb2a01d6f4da9" prot="public" virt="non-virtual"><scope>me::InputManager</scope><name>deleteOnButtonPressedEvent</name></member>
      <member refid="classme_1_1_input_manager_1ad1094f22aae49c3ff590780d8f8ecdbf" prot="public" virt="non-virtual"><scope>me::InputManager</scope><name>getAxis</name></member>
      <member refid="classme_1_1_input_manager_1aad30006d6511ba5c563393367851ee14" prot="public" virt="non-virtual"><scope>me::InputManager</scope><name>getButton</name></member>
      <member refid="classme_1_1_input_manager_1ae28bea4b3ea3deaca6d2e630072ca165" prot="private" virt="non-virtual"><scope>me::InputManager</scope><name>getInput</name></member>
      <member refid="classme_1_1_input_manager_1a4c24100552d97f3d2a88e535e0f87ea8" prot="public" virt="non-virtual"><scope>me::InputManager</scope><name>getMousePositon</name></member>
      <member refid="classme_1_1_singleton_1a919633966a5db8336cffa09f28fc2623" prot="public" virt="non-virtual"><scope>me::InputManager</scope><name>init</name></member>
      <member refid="classme_1_1_input_manager_1a1d7caba51dc2fff4c9088e7d4a056187" prot="private" virt="non-virtual"><scope>me::InputManager</scope><name>InputBinding</name></member>
      <member refid="classme_1_1_input_manager_1a8be46886da639b26d67181c29dab6d6c" prot="private" virt="non-virtual"><scope>me::InputManager</scope><name>InputManager</name></member>
      <member refid="classme_1_1_input_manager_1a76af2005ae1b8b392e07c1729165e228" prot="public" virt="non-virtual"><scope>me::InputManager</scope><name>InputManager</name></member>
      <member refid="classme_1_1_singleton_1a8810aab25f6fdc043bfac52761a9a260" prot="public" virt="non-virtual"><scope>me::InputManager</scope><name>instance</name></member>
      <member refid="classme_1_1_input_manager_1a119c27604905ec9c309d78e1d0c407a1" prot="private" virt="non-virtual"><scope>me::InputManager</scope><name>mAxis</name></member>
      <member refid="classme_1_1_input_manager_1a3a5fd0052dfdffe5ae0e5ab4ff35505f" prot="private" virt="non-virtual"><scope>me::InputManager</scope><name>mButtonBindings</name></member>
      <member refid="classme_1_1_input_manager_1a90476bfb9368306843a43b74285eaa4f" prot="private" virt="non-virtual"><scope>me::InputManager</scope><name>mButtons</name></member>
      <member refid="classme_1_1_input_manager_1aacdd4eecbdf154e3d630b0d5b6400dca" prot="private" virt="non-virtual"><scope>me::InputManager</scope><name>mNegativeAxisBindings</name></member>
      <member refid="classme_1_1_input_manager_1ae4568c1f0c860843d9bade2e30489928" prot="private" virt="non-virtual"><scope>me::InputManager</scope><name>mOnButtonPressed</name></member>
      <member refid="classme_1_1_input_manager_1a9434b2ed3d6338e04f4f3b3831957e7f" prot="private" virt="non-virtual"><scope>me::InputManager</scope><name>mouseX</name></member>
      <member refid="classme_1_1_input_manager_1a7f89719e5445a75efa8cc844f7850696" prot="private" virt="non-virtual"><scope>me::InputManager</scope><name>mouseY</name></member>
      <member refid="classme_1_1_input_manager_1a79733b2b7ff58049e56f8ce74b2b0264" prot="private" virt="non-virtual"><scope>me::InputManager</scope><name>mPositiveAxisBindings</name></member>
      <member refid="classme_1_1_input_manager_1ab5b229ccf36535d066be98bee7aa6ef8" prot="private" virt="non-virtual"><scope>me::InputManager</scope><name>OnButtonPressedMap</name></member>
      <member refid="classme_1_1_input_manager_1a097291ca4204112b88c9e011a841cd44" prot="public" virt="non-virtual"><scope>me::InputManager</scope><name>operator=</name></member>
      <member refid="classme_1_1_singleton_1a6745ba60837f9347a75c0cfc27fadfb0" prot="public" virt="non-virtual" ambiguityscope="Singleton&lt; InputManager &gt;::"><scope>me::InputManager</scope><name>operator=</name></member>
      <member refid="classme_1_1_singleton_1af5127d54d6c6904173541b404903b599" prot="protected" virt="non-virtual"><scope>me::InputManager</scope><name>Singleton</name></member>
      <member refid="classme_1_1_singleton_1a70f85c079fd020a8655eed54e7189845" prot="public" virt="non-virtual"><scope>me::InputManager</scope><name>Singleton</name></member>
      <member refid="classme_1_1_input_manager_1a2bc8c3ba60bac779ef9ed38214cf2882" prot="private" virt="non-virtual"><scope>me::InputManager</scope><name>Singleton&lt; InputManager &gt;</name></member>
      <member refid="classme_1_1_input_manager_1a2728c074169e5b617829ace6eedfe38e" prot="private" virt="non-virtual"><scope>me::InputManager</scope><name>updateInputData</name></member>
      <member refid="classme_1_1_input_manager_1a114196ccbe49ed06b2b9b69986d0aa3b" prot="private" virt="non-virtual"><scope>me::InputManager</scope><name>watchControllers</name></member>
      <member refid="classme_1_1_input_manager_1ac07b6252aae165bce8f3608d23761ecf" prot="public" virt="non-virtual"><scope>me::InputManager</scope><name>~InputManager</name></member>
      <member refid="classme_1_1_singleton_1a576834dfbf95c3b929511d2a588866d1" prot="public" virt="virtual"><scope>me::InputManager</scope><name>~Singleton</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
