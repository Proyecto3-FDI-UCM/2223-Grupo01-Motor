<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classme_1_1_render_manager" kind="class" language="C++" prot="public">
    <compoundname>me::RenderManager</compoundname>
    <basecompoundref refid="classme_1_1_singleton" prot="public" virt="non-virtual">me::Singleton&lt; RenderManager &gt;</basecompoundref>
    <includes refid="_render_manager_8h" local="no">RenderManager.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classme_1_1_render_manager_1ad7b24cf0838becb47db4c183372d4d99" prot="private" static="no" mutable="no">
        <type>friend</type>
        <definition>friend me::RenderManager::Singleton&lt; RenderManager &gt;</definition>
        <argsstring></argsstring>
        <name>Singleton&lt; RenderManager &gt;</name>
        <qualifiedname>me::RenderManager::Singleton&lt; RenderManager &gt;</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/RenderManager.h" line="48" column="1" bodyfile="Src/Render/RenderManager.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classme_1_1_render_manager_1a576a756c04044763622b72c4b7e6e408" prot="protected" static="no" mutable="no">
        <type>Ogre::Root *</type>
        <definition>Ogre::Root* me::RenderManager::mRoot</definition>
        <argsstring></argsstring>
        <name>mRoot</name>
        <qualifiedname>me::RenderManager::mRoot</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/RenderManager.h" line="57" column="12" bodyfile="Src/Render/RenderManager.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classme_1_1_render_manager_1a3117d5e10383c6b0404554b3e47667d0" prot="protected" static="no" mutable="no">
        <type>Ogre::SceneManager *</type>
        <definition>Ogre::SceneManager* me::RenderManager::mSM</definition>
        <argsstring></argsstring>
        <name>mSM</name>
        <qualifiedname>me::RenderManager::mSM</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/RenderManager.h" line="59" column="20" bodyfile="Src/Render/RenderManager.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classme_1_1_render_manager_1a29da0fdf6dcdbb47720d300688a43ecf" prot="protected" static="no" mutable="no">
        <type>Ogre::AnimationState *</type>
        <definition>Ogre::AnimationState* me::RenderManager::ogreAnimState</definition>
        <argsstring></argsstring>
        <name>ogreAnimState</name>
        <qualifiedname>me::RenderManager::ogreAnimState</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/RenderManager.h" line="62" column="22" bodyfile="Src/Render/RenderManager.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classme_1_1_render_manager_1a317bc83673486fbea07f73c5c1204ddc" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string me::RenderManager::mResourceCfgPath</definition>
        <argsstring></argsstring>
        <name>mResourceCfgPath</name>
        <qualifiedname>me::RenderManager::mResourceCfgPath</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Path of the &quot;resource.cfg&quot; Add all resources (mesh, zip, particles, material, animation) to the subfolder of Asset And they are accessed by putting paths in &quot;resource.cfg&quot; like this: Zip= ../../Assets/packs/Sinbad.zip FileSystem=../../Assets/Main Be careful, our working directory is &quot;Exe/Main/&quot;, so we have to go to the above directory 2 times to access the &quot;Assets&quot; directory. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/RenderManager.h" line="73" column="13" bodyfile="Src/Render/RenderManager.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classme_1_1_render_manager_1a7d869efc48f5f6c524ff99abb74a460b" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string me::RenderManager::mPluginCfgPath</definition>
        <argsstring></argsstring>
        <name>mPluginCfgPath</name>
        <qualifiedname>me::RenderManager::mPluginCfgPath</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Path of the &quot;plugins.cfg&quot; Add all necessary <ref refid="namespace_ogre" kindref="compound">Ogre</ref> plugins in &quot;plugins.cfg&quot; like this: Plugin=Codec_STBI Remember to add all the .dll of the written plugins </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/RenderManager.h" line="81" column="13" bodyfile="Src/Render/RenderManager.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classme_1_1_render_manager_1ab2a905f7d6c2aad56c8069f983df346c" prot="protected" static="no" mutable="no">
        <type>OverlayManager *</type>
        <definition>OverlayManager* me::RenderManager::mOverlayManager</definition>
        <argsstring></argsstring>
        <name>mOverlayManager</name>
        <qualifiedname>me::RenderManager::mOverlayManager</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/RenderManager.h" line="84" column="16" bodyfile="Src/Render/RenderManager.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classme_1_1_render_manager_1ada59f65deb076e29c41816b7e28a1ebb" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string me::RenderManager::mOgreCfgPath</definition>
        <argsstring></argsstring>
        <name>mOgreCfgPath</name>
        <qualifiedname>me::RenderManager::mOgreCfgPath</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Path of the &quot;Ogre.cfg&quot; configuration file where it indicates all the configurations proposed for &quot;Renderer DirectX11&quot; </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/RenderManager.h" line="92" column="13" bodyfile="Src/Render/RenderManager.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classme_1_1_render_manager_1ad8430f766674f86c92404dfc32fc19da" prot="protected" static="no" mutable="no">
        <type>Ogre::FileSystemLayer *</type>
        <definition>Ogre::FileSystemLayer* me::RenderManager::mFSLayer</definition>
        <argsstring></argsstring>
        <name>mFSLayer</name>
        <qualifiedname>me::RenderManager::mFSLayer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/RenderManager.h" line="95" column="23" bodyfile="Src/Render/RenderManager.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classme_1_1_render_manager_1a860b0a5af9a7f30d2c38fb5e09c7011a" prot="protected" static="no" mutable="no">
        <type>Ogre::RTShader::ShaderGenerator *</type>
        <definition>Ogre::RTShader::ShaderGenerator* me::RenderManager::mShaderGenerator</definition>
        <argsstring></argsstring>
        <name>mShaderGenerator</name>
        <qualifiedname>me::RenderManager::mShaderGenerator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/RenderManager.h" line="98" column="33" bodyfile="Src/Render/RenderManager.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classme_1_1_render_manager_1a23ad00e18700c36aac44b597525af289" prot="protected" static="no" mutable="no">
        <type><ref refid="classme_1_1_s_g_technique_resolver_listener" kindref="compound">SGTechniqueResolverListener</ref> *</type>
        <definition>SGTechniqueResolverListener* me::RenderManager::mMaterialMgrListener</definition>
        <argsstring></argsstring>
        <name>mMaterialMgrListener</name>
        <qualifiedname>me::RenderManager::mMaterialMgrListener</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/RenderManager.h" line="101" column="29" bodyfile="Src/Render/RenderManager.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classme_1_1_render_manager_1aac24973efc5fb20e2a3f4b6d484dea82" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string me::RenderManager::mSolutionPath</definition>
        <argsstring></argsstring>
        <name>mSolutionPath</name>
        <qualifiedname>me::RenderManager::mSolutionPath</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/RenderManager.h" line="104" column="13" bodyfile="Src/Render/RenderManager.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classme_1_1_render_manager_1a87ae76e5b7a96184679e7973bba7ef75" prot="protected" static="no" mutable="no">
        <type><ref refid="classme_1_1_render_window" kindref="compound">RenderWindow</ref> *</type>
        <definition>RenderWindow* me::RenderManager::mOgreWindow</definition>
        <argsstring></argsstring>
        <name>mOgreWindow</name>
        <qualifiedname>me::RenderManager::mOgreWindow</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/RenderManager.h" line="107" column="14" bodyfile="Src/Render/RenderManager.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classme_1_1_render_manager_1ab9321ec98f6b4b3d3e8bff1c0a44e6e3" prot="protected" static="no" mutable="no">
        <type>std::unordered_map&lt; std::string, <ref refid="classme_1_1_render_camera" kindref="compound">RenderCamera</ref> * &gt;</type>
        <definition>std::unordered_map&lt;std::string, RenderCamera*&gt; me::RenderManager::mCameras</definition>
        <argsstring></argsstring>
        <name>mCameras</name>
        <qualifiedname>me::RenderManager::mCameras</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/RenderManager.h" line="110" column="20" bodyfile="Src/Render/RenderManager.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classme_1_1_render_manager_1a67cc796cabfa82831eb2e85fd92a1f94" prot="protected" static="no" mutable="no">
        <type>std::unordered_map&lt; std::string, <ref refid="classme_1_1_render_mesh" kindref="compound">RenderMesh</ref> * &gt;</type>
        <definition>std::unordered_map&lt;std::string, RenderMesh*&gt; me::RenderManager::mMeshes</definition>
        <argsstring></argsstring>
        <name>mMeshes</name>
        <qualifiedname>me::RenderManager::mMeshes</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/RenderManager.h" line="112" column="20" bodyfile="Src/Render/RenderManager.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classme_1_1_render_manager_1a6dbe72bad91d0c42c98c3ad3e0098369" prot="protected" static="no" mutable="no">
        <type>std::unordered_map&lt; std::string, <ref refid="classme_1_1_render_particle_system" kindref="compound">RenderParticleSystem</ref> * &gt;</type>
        <definition>std::unordered_map&lt;std::string, RenderParticleSystem*&gt; me::RenderManager::mParticles</definition>
        <argsstring></argsstring>
        <name>mParticles</name>
        <qualifiedname>me::RenderManager::mParticles</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/RenderManager.h" line="114" column="20" bodyfile="Src/Render/RenderManager.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classme_1_1_render_manager_1aa52d38e61976b5b9438a9eabd2031cfa" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>RenderManager::RenderManager</definition>
        <argsstring>()</argsstring>
        <name>RenderManager</name>
        <qualifiedname>me::RenderManager::RenderManager</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize <ref refid="namespace_ogre" kindref="compound">Ogre</ref> (Root, RTShaderSystem, <ref refid="classme_1_1_scene_manager" kindref="compound">SceneManager</ref>, <ref refid="classme_1_1_render_window" kindref="compound">RenderWindow</ref>),locate and load Resource </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/RenderManager.h" line="52" column="1" bodyfile="Src/Render/RenderManager.cpp" bodystart="32" bodyend="41"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classme_1_1_render_manager_1a327860ebd386e3e29fe0e2ab84bb1626" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RenderManager::initRoot</definition>
        <argsstring>()</argsstring>
        <name>initRoot</name>
        <qualifiedname>me::RenderManager::initRoot</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>initializes FileSystem, find m_Paths and initialize Ogre::Root </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/RenderManager.h" line="118" column="6" bodyfile="Src/Render/RenderManager.cpp" bodystart="43" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_render_manager_1a248dfd42322988090961d41f784cfb48" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void me::RenderManager::initWindow</definition>
        <argsstring>()</argsstring>
        <name>initWindow</name>
        <qualifiedname>me::RenderManager::initWindow</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates OgreWindow (<ref refid="classme_1_1_render_window" kindref="compound">RenderWindow</ref>) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/RenderManager.h" line="122" column="6" bodyfile="Src/Render/RenderManager.cpp" bodystart="72" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_render_manager_1a999b08c25f41f73e9dd0a162b63ca7e9" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RenderManager::locateResources</definition>
        <argsstring>()</argsstring>
        <name>locateResources</name>
        <qualifiedname>me::RenderManager::locateResources</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/RenderManager.h" line="127" column="6" bodyfile="Src/Render/RenderManager.cpp" bodystart="80" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_render_manager_1ac844509911cebc08bd84b34f61a43a2d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RenderManager::loadResources</definition>
        <argsstring>()</argsstring>
        <name>loadResources</name>
        <qualifiedname>me::RenderManager::loadResources</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Call Ogre::ResourceGroupManager to load added resources </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/RenderManager.h" line="131" column="6" bodyfile="Src/Render/RenderManager.cpp" bodystart="117" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_render_manager_1a70e7170efc33cc5a3f4ad06ac5c2486f" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool RenderManager::initialiseRTShaderSystem</definition>
        <argsstring>()</argsstring>
        <name>initialiseRTShaderSystem</name>
        <qualifiedname>me::RenderManager::initialiseRTShaderSystem</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>initialize RTShaderSystem (Shader Generator) and add <ref refid="namespace_ogre" kindref="compound">Ogre</ref>:: Material Manager Listener </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/RenderManager.h" line="135" column="6" bodyfile="Src/Render/RenderManager.cpp" bodystart="121" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_render_manager_1ae84cecebafea02a888bae13f8bfe2100" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classme_1_1_render_camera" kindref="compound">RenderCamera</ref> *</type>
        <definition>RenderCamera * me::RenderManager::getCamera</definition>
        <argsstring>(std::string name)</argsstring>
        <name>getCamera</name>
        <qualifiedname>me::RenderManager::getCamera</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the camera </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>OgreCamera: that was created with this name </para>
</simplesect>
<simplesect kind="return"><para>nullptr: if it doesn&apos;t exist </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/RenderManager.h" line="142" column="14" bodyfile="Src/Render/RenderManager.cpp" bodystart="143" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_render_manager_1a0ed927a29f4fc0b31e99f6a7aac8499c" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classme_1_1_render_mesh" kindref="compound">RenderMesh</ref> *</type>
        <definition>RenderMesh * me::RenderManager::getMesh</definition>
        <argsstring>(std::string name)</argsstring>
        <name>getMesh</name>
        <qualifiedname>me::RenderManager::getMesh</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the mesh </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>OgreMesh: that was created with this name </para>
</simplesect>
<simplesect kind="return"><para>nullptr: if it doesn&apos;t exist </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/RenderManager.h" line="149" column="12" bodyfile="Src/Render/RenderManager.cpp" bodystart="136" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_render_manager_1aaba7ea7edc8557cad2ccc15d8938136c" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classme_1_1_render_particle_system" kindref="compound">RenderParticleSystem</ref> *</type>
        <definition>RenderParticleSystem * me::RenderManager::getParticle</definition>
        <argsstring>(std::string name)</argsstring>
        <name>getParticle</name>
        <qualifiedname>me::RenderManager::getParticle</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the particle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>OgreParticleSystem: that was created with this name </para>
</simplesect>
<simplesect kind="return"><para>nullptr: if it doesn&apos;t exist </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/RenderManager.h" line="156" column="22" bodyfile="Src/Render/RenderManager.cpp" bodystart="152" bodyend="158"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classme_1_1_render_manager_1a9d9d473840134f9d316ed90af0b503d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classme_1_1_render_manager" kindref="compound">RenderManager</ref> &amp;</type>
        <definition>RenderManager &amp; me::RenderManager::operator=</definition>
        <argsstring>(const RenderManager &amp;o)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>me::RenderManager::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classme_1_1_render_manager" kindref="compound">RenderManager</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/RenderManager.h" line="159" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_render_manager_1a7fc7bb82c0ea308eaf15bac7420abf1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>me::RenderManager::RenderManager</definition>
        <argsstring>(const RenderManager &amp;o)=delete</argsstring>
        <name>RenderManager</name>
        <qualifiedname>me::RenderManager::RenderManager</qualifiedname>
        <param>
          <type>const <ref refid="classme_1_1_render_manager" kindref="compound">RenderManager</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/RenderManager.h" line="160" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_render_manager_1a4e8f5da096fccb3eee6dc3e9e7a7b88b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>me::RenderManager::~RenderManager</definition>
        <argsstring>() override</argsstring>
        <name>~RenderManager</name>
        <qualifiedname>me::RenderManager::~RenderManager</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/RenderManager.h" line="161" column="1" bodyfile="Src/Render/RenderManager.cpp" bodystart="160" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_render_manager_1a178464764e348339c8238b9749fa062a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool me::RenderManager::createCamera</definition>
        <argsstring>(std::string name, std::string parentName, int nearDist, int farDist, bool autoRadio, int zOrder, Ogre::ColourValue color=Ogre::ColourValue(0, 0, 0, 1))</argsstring>
        <name>createCamera</name>
        <qualifiedname>me::RenderManager::createCamera</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>parentName</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nearDist</declname>
        </param>
        <param>
          <type>int</type>
          <declname>farDist</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>autoRadio</declname>
        </param>
        <param>
          <type>int</type>
          <declname>zOrder</declname>
        </param>
        <param>
          <type>Ogre::ColourValue</type>
          <declname>color</declname>
          <defval>Ogre::ColourValue(0, 0, 0, 1)</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create the camera that is a child of another Ogre::SceneNode with this name and store it <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of camera </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parentName</parametername>
</parameternamelist>
<parameterdescription>
<para>name of parent Ogre::SceneNode </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nearDist</parametername>
</parameternamelist>
<parameterdescription>
<para>near clipping plane distancia </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>farDist</parametername>
</parameternamelist>
<parameterdescription>
<para>far clipping plane distancia </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>autoRadio</parametername>
</parameternamelist>
<parameterdescription>
<para>if viewport calculate aspect radio automatically </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>zOrder</parametername>
</parameternamelist>
<parameterdescription>
<para>relative order of viewport </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>false: if renamed </para>
</simplesect>
<simplesect kind="return"><para>true: if succeed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/RenderManager.h" line="174" column="6" bodyfile="Src/Render/RenderManager.cpp" bodystart="176" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_render_manager_1a188eed7bd77088c42aa6d0217a880b9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool me::RenderManager::createCamera</definition>
        <argsstring>(std::string name, int nearDist, int farDist, bool autoRadio, int zOrder, Ogre::ColourValue color=Ogre::ColourValue(0, 0, 0, 1))</argsstring>
        <name>createCamera</name>
        <qualifiedname>me::RenderManager::createCamera</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nearDist</declname>
        </param>
        <param>
          <type>int</type>
          <declname>farDist</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>autoRadio</declname>
        </param>
        <param>
          <type>int</type>
          <declname>zOrder</declname>
        </param>
        <param>
          <type>Ogre::ColourValue</type>
          <declname>color</declname>
          <defval>Ogre::ColourValue(0, 0, 0, 1)</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create the camera with this name and store it <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of camera </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nearDist</parametername>
</parameternamelist>
<parameterdescription>
<para>near clipping plane distancia </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>farDist</parametername>
</parameternamelist>
<parameterdescription>
<para>far clipping plane distancia </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>autoRadio</parametername>
</parameternamelist>
<parameterdescription>
<para>if viewport calculate aspect radio automatically </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>zOrder</parametername>
</parameternamelist>
<parameterdescription>
<para>relative order of viewport </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>false: if renamed </para>
</simplesect>
<simplesect kind="return"><para>true: if succeed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/RenderManager.h" line="188" column="6" bodyfile="Src/Render/RenderManager.cpp" bodystart="194" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_render_manager_1a6fe9e6d618c9e37586a9c3ee59ece096" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool me::RenderManager::setCameraInfo</definition>
        <argsstring>(std::string name, const Ogre::Vector3f &amp;pos, const Ogre::Vector3f &amp;look)</argsstring>
        <name>setCameraInfo</name>
        <qualifiedname>me::RenderManager::setCameraInfo</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="namespace_ogre_1a8b4adeb18d1b0fcedea1b58bcbc67879" kindref="member">Ogre::Vector3f</ref> &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const <ref refid="namespace_ogre_1a8b4adeb18d1b0fcedea1b58bcbc67879" kindref="member">Ogre::Vector3f</ref> &amp;</type>
          <declname>look</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set location and direction to the camera with this name <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of camera </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>position of camera </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>look</parametername>
</parameternamelist>
<parameterdescription>
<para>camera look at </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>false: if it doesn&apos;t exist </para>
</simplesect>
<simplesect kind="return"><para>true: if succeed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/RenderManager.h" line="198" column="6" bodyfile="Src/Render/RenderManager.cpp" bodystart="211" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_render_manager_1aa2e15751a8ec07e3fea41fe4c1fb1095" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool me::RenderManager::setViewportDimension</definition>
        <argsstring>(std::string name, float left, float top, float width, float height)</argsstring>
        <name>setViewportDimension</name>
        <qualifiedname>me::RenderManager::setViewportDimension</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>float</type>
          <declname>left</declname>
        </param>
        <param>
          <type>float</type>
          <declname>top</declname>
        </param>
        <param>
          <type>float</type>
          <declname>width</declname>
        </param>
        <param>
          <type>float</type>
          <declname>height</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set dimension to the viewport of the camera with this name <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of camera </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>left</parametername>
</parameternamelist>
<parameterdescription>
<para>left point of viewport in range 0.0 to 1.0 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>top</parametername>
</parameternamelist>
<parameterdescription>
<para>top point of viewport in range 0.0 to 1.0 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>width of viewport in range 0.0 to 1.0 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>height of viewport in range 0.0 to 1.0 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>false: if it doesn&apos;t exist </para>
</simplesect>
<simplesect kind="return"><para>true: if succeed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/RenderManager.h" line="210" column="6" bodyfile="Src/Render/RenderManager.cpp" bodystart="226" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_render_manager_1a4d85ad792a6f416d66d933854297877e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void me::RenderManager::destroyCamera</definition>
        <argsstring>(std::string name)</argsstring>
        <name>destroyCamera</name>
        <qualifiedname>me::RenderManager::destroyCamera</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/RenderManager.h" line="213" column="6" bodyfile="Src/Render/RenderManager.cpp" bodystart="239" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_render_manager_1a1d03ebb0bd03b0ab64d8313e58f6ff43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void me::RenderManager::createNewLight</definition>
        <argsstring>(std::string name, const Ogre::Vector3f &amp;pos, const Ogre::Vector3f &amp;dir)</argsstring>
        <name>createNewLight</name>
        <qualifiedname>me::RenderManager::createNewLight</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="namespace_ogre_1a8b4adeb18d1b0fcedea1b58bcbc67879" kindref="member">Ogre::Vector3f</ref> &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const <ref refid="namespace_ogre_1a8b4adeb18d1b0fcedea1b58bcbc67879" kindref="member">Ogre::Vector3f</ref> &amp;</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create the light with this name <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of light </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>position of light </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>direction of light </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/RenderManager.h" line="221" column="6" bodyfile="Src/Render/RenderManager.cpp" bodystart="254" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_render_manager_1aacc79cca3a6fdb50ddaa1f5db77a3279" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool me::RenderManager::createMesh</definition>
        <argsstring>(std::string name, std::string nameMesh)</argsstring>
        <name>createMesh</name>
        <qualifiedname>me::RenderManager::createMesh</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>nameMesh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create the ogreMesh with this name <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of Ogre::SceneNode &amp;&amp;unordered_map </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameMesh</parametername>
</parameternamelist>
<parameterdescription>
<para>name of file (xxx.mesh) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>false: if renamed </para>
</simplesect>
<simplesect kind="return"><para>true: if succeed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/RenderManager.h" line="230" column="6" bodyfile="Src/Render/RenderManager.cpp" bodystart="268" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_render_manager_1a34ccc88afee1b20d186a0818659e1d0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool me::RenderManager::setMeshTransform</definition>
        <argsstring>(std::string name, Vector3 pos, Vector3 scale)</argsstring>
        <name>setMeshTransform</name>
        <qualifiedname>me::RenderManager::setMeshTransform</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classme_1_1_vector3" kindref="compound">Vector3</ref></type>
          <declname>pos</declname>
        </param>
        <param>
          <type><ref refid="classme_1_1_vector3" kindref="compound">Vector3</ref></type>
          <declname>scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set <ref refid="classme_1_1_transform" kindref="compound">Transform</ref> info to the mesh with this name (for static object) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of ogreMesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>position of ogreMesh </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scale</parametername>
</parameternamelist>
<parameterdescription>
<para>scale of ogreMesh </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>false: if it doesn&apos;t exist </para>
</simplesect>
<simplesect kind="return"><para>true: if succeed <linebreak/>
 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/RenderManager.h" line="240" column="6" bodyfile="Src/Render/RenderManager.cpp" bodystart="342" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_render_manager_1a6cf65413fcbfb7054864830e3f9b1046" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool me::RenderManager::setMeshTransform</definition>
        <argsstring>(std::string name, Vector3 pos, Vector3 scale, Vector4 rot)</argsstring>
        <name>setMeshTransform</name>
        <qualifiedname>me::RenderManager::setMeshTransform</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classme_1_1_vector3" kindref="compound">Vector3</ref></type>
          <declname>pos</declname>
        </param>
        <param>
          <type><ref refid="classme_1_1_vector3" kindref="compound">Vector3</ref></type>
          <declname>scale</declname>
        </param>
        <param>
          <type><ref refid="classme_1_1_vector4" kindref="compound">Vector4</ref></type>
          <declname>rot</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/RenderManager.h" line="241" column="6" bodyfile="Src/Render/RenderManager.cpp" bodystart="353" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_render_manager_1a62f200bfaa4528060e0e2bd5207e3533" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool me::RenderManager::setMeshPosition</definition>
        <argsstring>(std::string name, Vector3 pos)</argsstring>
        <name>setMeshPosition</name>
        <qualifiedname>me::RenderManager::setMeshPosition</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classme_1_1_vector3" kindref="compound">Vector3</ref></type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/RenderManager.h" line="243" column="6" bodyfile="Src/Render/RenderManager.cpp" bodystart="283" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_render_manager_1a1840dca2798f59b099679d62063693e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool me::RenderManager::setMeshScale</definition>
        <argsstring>(std::string name, Vector3 scale)</argsstring>
        <name>setMeshScale</name>
        <qualifiedname>me::RenderManager::setMeshScale</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classme_1_1_vector3" kindref="compound">Vector3</ref></type>
          <declname>scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/RenderManager.h" line="245" column="6" bodyfile="Src/Render/RenderManager.cpp" bodystart="294" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_render_manager_1ac06471cccbe6477e420b70aecac959b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool me::RenderManager::setMeshRotation</definition>
        <argsstring>(std::string name, Vector4 rot)</argsstring>
        <name>setMeshRotation</name>
        <qualifiedname>me::RenderManager::setMeshRotation</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classme_1_1_vector4" kindref="compound">Vector4</ref></type>
          <declname>rot</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/RenderManager.h" line="247" column="6" bodyfile="Src/Render/RenderManager.cpp" bodystart="305" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_render_manager_1a9f4f2896ea0286162c8ea85670464166" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool me::RenderManager::setMeshMaterial</definition>
        <argsstring>(std::string name, std::string nameMaterial)</argsstring>
        <name>setMeshMaterial</name>
        <qualifiedname>me::RenderManager::setMeshMaterial</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>nameMaterial</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/RenderManager.h" line="250" column="6" bodyfile="Src/Render/RenderManager.cpp" bodystart="316" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_render_manager_1ae0d233f967e9433e003d80cda98b03a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void me::RenderManager::destroyMesh</definition>
        <argsstring>(std::string name)</argsstring>
        <name>destroyMesh</name>
        <qualifiedname>me::RenderManager::destroyMesh</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/RenderManager.h" line="253" column="6" bodyfile="Src/Render/RenderManager.cpp" bodystart="327" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_render_manager_1a87af12e2020d8b3f76b712248957bcfe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool me::RenderManager::createParticle</definition>
        <argsstring>(std::string name, std::string nameMesh)</argsstring>
        <name>createParticle</name>
        <qualifiedname>me::RenderManager::createParticle</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>nameMesh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create the ogreParticleSystem with this name <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of Ogre::SceneNode &amp;&amp;unordered_map </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nameParticle</parametername>
</parameternamelist>
<parameterdescription>
<para>name of partcile system that is written int ParticleResource.particle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>false: if renamed </para>
</simplesect>
<simplesect kind="return"><para>true: if succeed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/RenderManager.h" line="262" column="6" bodyfile="Src/Render/RenderManager.cpp" bodystart="366" bodyend="377"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_render_manager_1aa20b643ba1272a7b078f478699f06aa8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool me::RenderManager::setParticleTransform</definition>
        <argsstring>(std::string name, Vector3 pos, Vector3 scale)</argsstring>
        <name>setParticleTransform</name>
        <qualifiedname>me::RenderManager::setParticleTransform</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classme_1_1_vector3" kindref="compound">Vector3</ref></type>
          <declname>pos</declname>
        </param>
        <param>
          <type><ref refid="classme_1_1_vector3" kindref="compound">Vector3</ref></type>
          <declname>scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set <ref refid="classme_1_1_transform" kindref="compound">Transform</ref> info to the particle with this name (for static object) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of ogreParticleSystem </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>position of ogreParticleSystem </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scale</parametername>
</parameternamelist>
<parameterdescription>
<para>scale of ogreParticleSystem </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>false: if it doesn&apos;t exist </para>
</simplesect>
<simplesect kind="return"><para>true: if succeed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/RenderManager.h" line="271" column="6" bodyfile="Src/Render/RenderManager.cpp" bodystart="379" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_render_manager_1ab003f01906a74adc7a893450dfd34087" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool me::RenderManager::setParticleTransform</definition>
        <argsstring>(std::string name, Vector3 pos, Vector3 scale, Vector4 rot)</argsstring>
        <name>setParticleTransform</name>
        <qualifiedname>me::RenderManager::setParticleTransform</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classme_1_1_vector3" kindref="compound">Vector3</ref></type>
          <declname>pos</declname>
        </param>
        <param>
          <type><ref refid="classme_1_1_vector3" kindref="compound">Vector3</ref></type>
          <declname>scale</declname>
        </param>
        <param>
          <type><ref refid="classme_1_1_vector4" kindref="compound">Vector4</ref></type>
          <declname>rot</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/RenderManager.h" line="272" column="6" bodyfile="Src/Render/RenderManager.cpp" bodystart="390" bodyend="399"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_render_manager_1aff4e5fb9981b8b9f74af4bbabace4217" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool me::RenderManager::setParticlePosition</definition>
        <argsstring>(std::string name, Vector3 pos)</argsstring>
        <name>setParticlePosition</name>
        <qualifiedname>me::RenderManager::setParticlePosition</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classme_1_1_vector3" kindref="compound">Vector3</ref></type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/RenderManager.h" line="274" column="6" bodyfile="Src/Render/RenderManager.cpp" bodystart="401" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_render_manager_1a1d609edefb8b1ac1196d14c01894ea3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool me::RenderManager::setParticleScale</definition>
        <argsstring>(std::string name, Vector3 scale)</argsstring>
        <name>setParticleScale</name>
        <qualifiedname>me::RenderManager::setParticleScale</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classme_1_1_vector3" kindref="compound">Vector3</ref></type>
          <declname>scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/RenderManager.h" line="276" column="6" bodyfile="Src/Render/RenderManager.cpp" bodystart="412" bodyend="421"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_render_manager_1a82fcf6a5a0af7b65a9e764118add1529" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool me::RenderManager::setParticleRotation</definition>
        <argsstring>(std::string name, Vector4 rot)</argsstring>
        <name>setParticleRotation</name>
        <qualifiedname>me::RenderManager::setParticleRotation</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classme_1_1_vector4" kindref="compound">Vector4</ref></type>
          <declname>rot</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/RenderManager.h" line="278" column="6" bodyfile="Src/Render/RenderManager.cpp" bodystart="423" bodyend="432"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_render_manager_1acabbd450883ec93eecb2ce704a983062" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool me::RenderManager::setParticleEmitting</definition>
        <argsstring>(std::string name, bool emitted)</argsstring>
        <name>setParticleEmitting</name>
        <qualifiedname>me::RenderManager::setParticleEmitting</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>emitted</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/RenderManager.h" line="281" column="6" bodyfile="Src/Render/RenderManager.cpp" bodystart="434" bodyend="443"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_render_manager_1a805b50ba9a7d6a52de14b9ad30886e07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Ogre::SceneNode *</type>
        <definition>Ogre::SceneNode * me::RenderManager::createNode</definition>
        <argsstring>(std::string name)</argsstring>
        <name>createNode</name>
        <qualifiedname>me::RenderManager::createNode</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of node </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Ogre::SceneNodo created with this name and it is in root node </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/RenderManager.h" line="288" column="17" bodyfile="Src/Render/RenderManager.cpp" bodystart="447" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_render_manager_1ae0c411b5780e0516f005f532e65e3de9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Ogre::SceneNode *</type>
        <definition>Ogre::SceneNode * me::RenderManager::createChildNode</definition>
        <argsstring>(std::string name, std::string parent)</argsstring>
        <name>createChildNode</name>
        <qualifiedname>me::RenderManager::createChildNode</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of node </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parent</parametername>
</parameternamelist>
<parameterdescription>
<para>name of parent node </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Ogre::SceneNodo created with this name and it is child node of another node </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/RenderManager.h" line="294" column="17" bodyfile="Src/Render/RenderManager.cpp" bodystart="452" bodyend="455"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_render_manager_1a542bc4658bce9fbfd206bbf06ac0b700" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classme_1_1_render_window" kindref="compound">RenderWindow</ref> *</type>
        <definition>RenderWindow * me::RenderManager::getOgreWindow</definition>
        <argsstring>()</argsstring>
        <name>getOgreWindow</name>
        <qualifiedname>me::RenderManager::getOgreWindow</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a pointer to the OgreWindow used for rendering. <simplesect kind="return"><para>The Render <ref refid="classme_1_1_window" kindref="compound">Window</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/RenderManager.h" line="300" column="14" bodyfile="Src/Render/RenderManager.cpp" bodystart="468" bodyend="471"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_render_manager_1a79b8d85b9e2fcffbcc6bc117905dce5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Ogre::SceneNode *</type>
        <definition>Ogre::SceneNode * me::RenderManager::getRootSceneNode</definition>
        <argsstring>()</argsstring>
        <name>getRootSceneNode</name>
        <qualifiedname>me::RenderManager::getRootSceneNode</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a pointer to the Root SceneNode. <simplesect kind="return"><para>returns the root scene node </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/RenderManager.h" line="306" column="17" bodyfile="Src/Render/RenderManager.cpp" bodystart="457" bodyend="460"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_render_manager_1aebed1880a067088857492bca872c6e31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void me::RenderManager::scene1</definition>
        <argsstring>()</argsstring>
        <name>scene1</name>
        <qualifiedname>me::RenderManager::scene1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Example scene where rendering a sinbad with 2 camera,viewport </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/RenderManager.h" line="311" column="6" bodyfile="Src/Render/RenderManager.cpp" bodystart="488" bodyend="537"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_render_manager_1a7b55b3550af4f044f269817de60bb3c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void me::RenderManager::render</definition>
        <argsstring>()</argsstring>
        <name>render</name>
        <qualifiedname>me::RenderManager::render</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Render one frame of Ogre::Root -&gt; current scene manager </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/RenderManager.h" line="316" column="6" bodyfile="Src/Render/RenderManager.cpp" bodystart="462" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_render_manager_1aca01cdecef083ab1865ad8c452edff75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Ogre::Entity *</type>
        <definition>Ogre::Entity * me::RenderManager::getOgreEntity</definition>
        <argsstring>(std::string name)</argsstring>
        <name>getOgreEntity</name>
        <qualifiedname>me::RenderManager::getOgreEntity</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the Ogre::Entity asociated </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/RenderManager.h" line="321" column="14" bodyfile="Src/Render/RenderManager.cpp" bodystart="473" bodyend="476"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_render_manager_1a6a0af2feb18bba99c075690de30150c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Ogre::TextAreaOverlayElement *</type>
        <definition>Ogre::TextAreaOverlayElement * me::RenderManager::createOverlayElement</definition>
        <argsstring>()</argsstring>
        <name>createOverlayElement</name>
        <qualifiedname>me::RenderManager::createOverlayElement</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/RenderManager.h" line="325" column="30" bodyfile="Src/Render/RenderManager.cpp" bodystart="478" bodyend="481"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_render_manager_1a3b10d8c4a4309582272390b2ec5c368c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Ogre::SceneManager *</type>
        <definition>Ogre::SceneManager * me::RenderManager::getSceneManager</definition>
        <argsstring>()</argsstring>
        <name>getSceneManager</name>
        <qualifiedname>me::RenderManager::getSceneManager</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/RenderManager.h" line="328" column="20" bodyfile="Src/Render/RenderManager.cpp" bodystart="483" bodyend="486"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>OgreManager initialize <ref refid="namespace_ogre" kindref="compound">Ogre</ref> (Root, RTShaderSystem, <ref refid="classme_1_1_scene_manager" kindref="compound">SceneManager</ref>, <ref refid="classme_1_1_render_window" kindref="compound">RenderWindow</ref>), locate and load resources (from resource.cfg) and handle the creation of camera, light, mesh You can access the OgreManager just calling om(). </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>me::Singleton&lt; RenderManager &gt;</label>
        <link refid="classme_1_1_singleton"/>
      </node>
      <node id="1">
        <label>me::RenderManager</label>
        <link refid="classme_1_1_render_manager"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4">
        <label>Ogre::MaterialManager::Listener</label>
      </node>
      <node id="2">
        <label>me::Singleton&lt; RenderManager &gt;</label>
        <link refid="classme_1_1_singleton"/>
      </node>
      <node id="1">
        <label>me::RenderManager</label>
        <link refid="classme_1_1_render_manager"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>mMaterialMgrListener</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>mOgreWindow</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>me::RenderWindow</label>
        <link refid="classme_1_1_render_window"/>
      </node>
      <node id="3">
        <label>me::SGTechniqueResolverListener</label>
        <link refid="classme_1_1_s_g_technique_resolver_listener"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="Src/Render/RenderManager.h" line="47" column="1" bodyfile="Src/Render/RenderManager.h" bodystart="47" bodyend="331"/>
    <listofallmembers>
      <member refid="classme_1_1_render_manager_1a178464764e348339c8238b9749fa062a" prot="public" virt="non-virtual"><scope>me::RenderManager</scope><name>createCamera</name></member>
      <member refid="classme_1_1_render_manager_1a188eed7bd77088c42aa6d0217a880b9a" prot="public" virt="non-virtual"><scope>me::RenderManager</scope><name>createCamera</name></member>
      <member refid="classme_1_1_render_manager_1ae0c411b5780e0516f005f532e65e3de9" prot="public" virt="non-virtual"><scope>me::RenderManager</scope><name>createChildNode</name></member>
      <member refid="classme_1_1_render_manager_1aacc79cca3a6fdb50ddaa1f5db77a3279" prot="public" virt="non-virtual"><scope>me::RenderManager</scope><name>createMesh</name></member>
      <member refid="classme_1_1_render_manager_1a1d03ebb0bd03b0ab64d8313e58f6ff43" prot="public" virt="non-virtual"><scope>me::RenderManager</scope><name>createNewLight</name></member>
      <member refid="classme_1_1_render_manager_1a805b50ba9a7d6a52de14b9ad30886e07" prot="public" virt="non-virtual"><scope>me::RenderManager</scope><name>createNode</name></member>
      <member refid="classme_1_1_render_manager_1a6a0af2feb18bba99c075690de30150c5" prot="public" virt="non-virtual"><scope>me::RenderManager</scope><name>createOverlayElement</name></member>
      <member refid="classme_1_1_render_manager_1a87af12e2020d8b3f76b712248957bcfe" prot="public" virt="non-virtual"><scope>me::RenderManager</scope><name>createParticle</name></member>
      <member refid="classme_1_1_render_manager_1a4d85ad792a6f416d66d933854297877e" prot="public" virt="non-virtual"><scope>me::RenderManager</scope><name>destroyCamera</name></member>
      <member refid="classme_1_1_render_manager_1ae0d233f967e9433e003d80cda98b03a6" prot="public" virt="non-virtual"><scope>me::RenderManager</scope><name>destroyMesh</name></member>
      <member refid="classme_1_1_render_manager_1ae84cecebafea02a888bae13f8bfe2100" prot="protected" virt="non-virtual"><scope>me::RenderManager</scope><name>getCamera</name></member>
      <member refid="classme_1_1_render_manager_1a0ed927a29f4fc0b31e99f6a7aac8499c" prot="protected" virt="non-virtual"><scope>me::RenderManager</scope><name>getMesh</name></member>
      <member refid="classme_1_1_render_manager_1aca01cdecef083ab1865ad8c452edff75" prot="public" virt="non-virtual"><scope>me::RenderManager</scope><name>getOgreEntity</name></member>
      <member refid="classme_1_1_render_manager_1a542bc4658bce9fbfd206bbf06ac0b700" prot="public" virt="non-virtual"><scope>me::RenderManager</scope><name>getOgreWindow</name></member>
      <member refid="classme_1_1_render_manager_1aaba7ea7edc8557cad2ccc15d8938136c" prot="protected" virt="non-virtual"><scope>me::RenderManager</scope><name>getParticle</name></member>
      <member refid="classme_1_1_render_manager_1a79b8d85b9e2fcffbcc6bc117905dce5c" prot="public" virt="non-virtual"><scope>me::RenderManager</scope><name>getRootSceneNode</name></member>
      <member refid="classme_1_1_render_manager_1a3b10d8c4a4309582272390b2ec5c368c" prot="public" virt="non-virtual"><scope>me::RenderManager</scope><name>getSceneManager</name></member>
      <member refid="classme_1_1_singleton_1a919633966a5db8336cffa09f28fc2623" prot="public" virt="non-virtual"><scope>me::RenderManager</scope><name>init</name></member>
      <member refid="classme_1_1_render_manager_1a70e7170efc33cc5a3f4ad06ac5c2486f" prot="protected" virt="non-virtual"><scope>me::RenderManager</scope><name>initialiseRTShaderSystem</name></member>
      <member refid="classme_1_1_render_manager_1a327860ebd386e3e29fe0e2ab84bb1626" prot="protected" virt="non-virtual"><scope>me::RenderManager</scope><name>initRoot</name></member>
      <member refid="classme_1_1_render_manager_1a248dfd42322988090961d41f784cfb48" prot="protected" virt="non-virtual"><scope>me::RenderManager</scope><name>initWindow</name></member>
      <member refid="classme_1_1_singleton_1a8810aab25f6fdc043bfac52761a9a260" prot="public" virt="non-virtual"><scope>me::RenderManager</scope><name>instance</name></member>
      <member refid="classme_1_1_render_manager_1ac844509911cebc08bd84b34f61a43a2d" prot="protected" virt="non-virtual"><scope>me::RenderManager</scope><name>loadResources</name></member>
      <member refid="classme_1_1_render_manager_1a999b08c25f41f73e9dd0a162b63ca7e9" prot="protected" virt="non-virtual"><scope>me::RenderManager</scope><name>locateResources</name></member>
      <member refid="classme_1_1_render_manager_1ab9321ec98f6b4b3d3e8bff1c0a44e6e3" prot="protected" virt="non-virtual"><scope>me::RenderManager</scope><name>mCameras</name></member>
      <member refid="classme_1_1_render_manager_1ad8430f766674f86c92404dfc32fc19da" prot="protected" virt="non-virtual"><scope>me::RenderManager</scope><name>mFSLayer</name></member>
      <member refid="classme_1_1_render_manager_1a23ad00e18700c36aac44b597525af289" prot="protected" virt="non-virtual"><scope>me::RenderManager</scope><name>mMaterialMgrListener</name></member>
      <member refid="classme_1_1_render_manager_1a67cc796cabfa82831eb2e85fd92a1f94" prot="protected" virt="non-virtual"><scope>me::RenderManager</scope><name>mMeshes</name></member>
      <member refid="classme_1_1_render_manager_1ada59f65deb076e29c41816b7e28a1ebb" prot="protected" virt="non-virtual"><scope>me::RenderManager</scope><name>mOgreCfgPath</name></member>
      <member refid="classme_1_1_render_manager_1a87ae76e5b7a96184679e7973bba7ef75" prot="protected" virt="non-virtual"><scope>me::RenderManager</scope><name>mOgreWindow</name></member>
      <member refid="classme_1_1_render_manager_1ab2a905f7d6c2aad56c8069f983df346c" prot="protected" virt="non-virtual"><scope>me::RenderManager</scope><name>mOverlayManager</name></member>
      <member refid="classme_1_1_render_manager_1a6dbe72bad91d0c42c98c3ad3e0098369" prot="protected" virt="non-virtual"><scope>me::RenderManager</scope><name>mParticles</name></member>
      <member refid="classme_1_1_render_manager_1a7d869efc48f5f6c524ff99abb74a460b" prot="protected" virt="non-virtual"><scope>me::RenderManager</scope><name>mPluginCfgPath</name></member>
      <member refid="classme_1_1_render_manager_1a317bc83673486fbea07f73c5c1204ddc" prot="protected" virt="non-virtual"><scope>me::RenderManager</scope><name>mResourceCfgPath</name></member>
      <member refid="classme_1_1_render_manager_1a576a756c04044763622b72c4b7e6e408" prot="protected" virt="non-virtual"><scope>me::RenderManager</scope><name>mRoot</name></member>
      <member refid="classme_1_1_render_manager_1a860b0a5af9a7f30d2c38fb5e09c7011a" prot="protected" virt="non-virtual"><scope>me::RenderManager</scope><name>mShaderGenerator</name></member>
      <member refid="classme_1_1_render_manager_1a3117d5e10383c6b0404554b3e47667d0" prot="protected" virt="non-virtual"><scope>me::RenderManager</scope><name>mSM</name></member>
      <member refid="classme_1_1_render_manager_1aac24973efc5fb20e2a3f4b6d484dea82" prot="protected" virt="non-virtual"><scope>me::RenderManager</scope><name>mSolutionPath</name></member>
      <member refid="classme_1_1_render_manager_1a29da0fdf6dcdbb47720d300688a43ecf" prot="protected" virt="non-virtual"><scope>me::RenderManager</scope><name>ogreAnimState</name></member>
      <member refid="classme_1_1_render_manager_1a9d9d473840134f9d316ed90af0b503d9" prot="public" virt="non-virtual"><scope>me::RenderManager</scope><name>operator=</name></member>
      <member refid="classme_1_1_singleton_1a6745ba60837f9347a75c0cfc27fadfb0" prot="public" virt="non-virtual" ambiguityscope="Singleton&lt; RenderManager &gt;::"><scope>me::RenderManager</scope><name>operator=</name></member>
      <member refid="classme_1_1_render_manager_1a7b55b3550af4f044f269817de60bb3c6" prot="public" virt="non-virtual"><scope>me::RenderManager</scope><name>render</name></member>
      <member refid="classme_1_1_render_manager_1aa52d38e61976b5b9438a9eabd2031cfa" prot="private" virt="non-virtual"><scope>me::RenderManager</scope><name>RenderManager</name></member>
      <member refid="classme_1_1_render_manager_1a7fc7bb82c0ea308eaf15bac7420abf1d" prot="public" virt="non-virtual"><scope>me::RenderManager</scope><name>RenderManager</name></member>
      <member refid="classme_1_1_render_manager_1aebed1880a067088857492bca872c6e31" prot="public" virt="non-virtual"><scope>me::RenderManager</scope><name>scene1</name></member>
      <member refid="classme_1_1_render_manager_1a6fe9e6d618c9e37586a9c3ee59ece096" prot="public" virt="non-virtual"><scope>me::RenderManager</scope><name>setCameraInfo</name></member>
      <member refid="classme_1_1_render_manager_1a9f4f2896ea0286162c8ea85670464166" prot="public" virt="non-virtual"><scope>me::RenderManager</scope><name>setMeshMaterial</name></member>
      <member refid="classme_1_1_render_manager_1a62f200bfaa4528060e0e2bd5207e3533" prot="public" virt="non-virtual"><scope>me::RenderManager</scope><name>setMeshPosition</name></member>
      <member refid="classme_1_1_render_manager_1ac06471cccbe6477e420b70aecac959b3" prot="public" virt="non-virtual"><scope>me::RenderManager</scope><name>setMeshRotation</name></member>
      <member refid="classme_1_1_render_manager_1a1840dca2798f59b099679d62063693e2" prot="public" virt="non-virtual"><scope>me::RenderManager</scope><name>setMeshScale</name></member>
      <member refid="classme_1_1_render_manager_1a34ccc88afee1b20d186a0818659e1d0a" prot="public" virt="non-virtual"><scope>me::RenderManager</scope><name>setMeshTransform</name></member>
      <member refid="classme_1_1_render_manager_1a6cf65413fcbfb7054864830e3f9b1046" prot="public" virt="non-virtual"><scope>me::RenderManager</scope><name>setMeshTransform</name></member>
      <member refid="classme_1_1_render_manager_1acabbd450883ec93eecb2ce704a983062" prot="public" virt="non-virtual"><scope>me::RenderManager</scope><name>setParticleEmitting</name></member>
      <member refid="classme_1_1_render_manager_1aff4e5fb9981b8b9f74af4bbabace4217" prot="public" virt="non-virtual"><scope>me::RenderManager</scope><name>setParticlePosition</name></member>
      <member refid="classme_1_1_render_manager_1a82fcf6a5a0af7b65a9e764118add1529" prot="public" virt="non-virtual"><scope>me::RenderManager</scope><name>setParticleRotation</name></member>
      <member refid="classme_1_1_render_manager_1a1d609edefb8b1ac1196d14c01894ea3f" prot="public" virt="non-virtual"><scope>me::RenderManager</scope><name>setParticleScale</name></member>
      <member refid="classme_1_1_render_manager_1aa20b643ba1272a7b078f478699f06aa8" prot="public" virt="non-virtual"><scope>me::RenderManager</scope><name>setParticleTransform</name></member>
      <member refid="classme_1_1_render_manager_1ab003f01906a74adc7a893450dfd34087" prot="public" virt="non-virtual"><scope>me::RenderManager</scope><name>setParticleTransform</name></member>
      <member refid="classme_1_1_render_manager_1aa2e15751a8ec07e3fea41fe4c1fb1095" prot="public" virt="non-virtual"><scope>me::RenderManager</scope><name>setViewportDimension</name></member>
      <member refid="classme_1_1_singleton_1af5127d54d6c6904173541b404903b599" prot="protected" virt="non-virtual"><scope>me::RenderManager</scope><name>Singleton</name></member>
      <member refid="classme_1_1_singleton_1a70f85c079fd020a8655eed54e7189845" prot="public" virt="non-virtual"><scope>me::RenderManager</scope><name>Singleton</name></member>
      <member refid="classme_1_1_render_manager_1ad7b24cf0838becb47db4c183372d4d99" prot="private" virt="non-virtual"><scope>me::RenderManager</scope><name>Singleton&lt; RenderManager &gt;</name></member>
      <member refid="classme_1_1_render_manager_1a4e8f5da096fccb3eee6dc3e9e7a7b88b" prot="public" virt="non-virtual"><scope>me::RenderManager</scope><name>~RenderManager</name></member>
      <member refid="classme_1_1_singleton_1a576834dfbf95c3b929511d2a588866d1" prot="public" virt="virtual"><scope>me::RenderManager</scope><name>~Singleton</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
