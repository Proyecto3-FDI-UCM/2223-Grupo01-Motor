<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classme_1_1_scene" kind="class" language="C++" prot="public">
    <compoundname>me::Scene</compoundname>
    <includes refid="_scene_8h" local="no">Scene.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classme_1_1_scene_1aeb63ee8ae73ceeead581c3cde895291e" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceme_1a7af63ced847cd4a7e0ca4ba5a1688da3" kindref="member">SceneName</ref></type>
        <definition>SceneName me::Scene::mName</definition>
        <argsstring></argsstring>
        <name>mName</name>
        <qualifiedname>me::Scene::mName</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/EntityComponent/Scene.h" line="135" column="11" bodyfile="Src/EntityComponent/Scene.h" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classme_1_1_scene_1ade7e79aada5fbdbf408f05f19da86226" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classme_1_1_entity" kindref="compound">Entity</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::shared_ptr&lt;Entity&gt; &gt; me::Scene::mNewEntities</definition>
        <argsstring></argsstring>
        <name>mNewEntities</name>
        <qualifiedname>me::Scene::mNewEntities</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/EntityComponent/Scene.h" line="136" column="13" bodyfile="Src/EntityComponent/Scene.h" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classme_1_1_scene_1ab142ec1bded6510e2cc2d8df88eab0b2" prot="protected" static="no" mutable="no">
        <type>std::unordered_map&lt; <ref refid="namespaceme_1a4549e57e933271d021f2d5b4cd46c84e" kindref="member">EntityName</ref>, std::shared_ptr&lt; <ref refid="classme_1_1_entity" kindref="compound">Entity</ref> &gt; &gt;</type>
        <definition>std::unordered_map&lt;EntityName, std::shared_ptr&lt;Entity&gt; &gt; me::Scene::mEntities</definition>
        <argsstring></argsstring>
        <name>mEntities</name>
        <qualifiedname>me::Scene::mEntities</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/EntityComponent/Scene.h" line="137" column="20" bodyfile="Src/EntityComponent/Scene.h" bodystart="137" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classme_1_1_scene_1a9610d79b8a2dd2d092603e17e3eca80f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>me::Scene::Scene</definition>
        <argsstring>(const SceneName name)</argsstring>
        <name>Scene</name>
        <qualifiedname>me::Scene::Scene</qualifiedname>
        <param>
          <type>const <ref refid="namespaceme_1a7af63ced847cd4a7e0ca4ba5a1688da3" kindref="member">SceneName</ref></type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Build the foundation of the <ref refid="classme_1_1_scene" kindref="compound">Scene</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>String</parametername>
</parameternamelist>
<parameterdescription>
<para>name to identify it. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/EntityComponent/Scene.h" line="26" column="1" bodyfile="Src/EntityComponent/Scene.cpp" bodystart="12" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_scene_1a298e8e0b2716f284e047874be0ae18aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>me::Scene::~Scene</definition>
        <argsstring>()</argsstring>
        <name>~Scene</name>
        <qualifiedname>me::Scene::~Scene</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method is meant to be the definition of the dynamic memory that has to be safely delete. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/EntityComponent/Scene.h" line="32" column="9" bodyfile="Src/EntityComponent/Scene.cpp" bodystart="20" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_scene_1a240675d5e2ab7d3cc93a38296c362039" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classme_1_1_entity" kindref="compound">Entity</ref> &gt;</type>
        <definition>std::shared_ptr&lt; Entity &gt; me::Scene::addEntity</definition>
        <argsstring>(const EntityName name)</argsstring>
        <name>addEntity</name>
        <qualifiedname>me::Scene::addEntity</qualifiedname>
        <param>
          <type>const <ref refid="namespaceme_1a4549e57e933271d021f2d5b4cd46c84e" kindref="member">EntityName</ref></type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prepares a new entity to be safely add to the scene. This assumes that the name is a unique identifier. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>String</parametername>
</parameternamelist>
<parameterdescription>
<para>name to identify the new entity. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Created new entity. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/EntityComponent/Scene.h" line="40" column="17" bodyfile="Src/EntityComponent/Scene.cpp" bodystart="29" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_scene_1a47b4d3fd7351e759695c091be1f16cce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void me::Scene::removeEntity</definition>
        <argsstring>(const EntityName &amp;name)</argsstring>
        <name>removeEntity</name>
        <qualifiedname>me::Scene::removeEntity</qualifiedname>
        <param>
          <type>const <ref refid="namespaceme_1a4549e57e933271d021f2d5b4cd46c84e" kindref="member">EntityName</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prepares an entity to be safely remove from the scene. This assumes that the name is a unique identifier. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>String</parametername>
</parameternamelist>
<parameterdescription>
<para>name to identify the entity to be remove. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/EntityComponent/Scene.h" line="47" column="6" bodyfile="Src/EntityComponent/Scene.cpp" bodystart="37" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_scene_1a2e082d7c60c03a74ef7ab375a5b9187f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classme_1_1_entity" kindref="compound">Entity</ref> &gt; &gt;</type>
        <definition>std::vector&lt; std::shared_ptr&lt; Entity &gt; &gt; me::Scene::getEntities</definition>
        <argsstring>() const</argsstring>
        <name>getEntities</name>
        <qualifiedname>me::Scene::getEntities</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a vector of all entities in the scene. <simplesect kind="return"><para>Vector of <ref refid="classme_1_1_entity" kindref="compound">Entity</ref> pointers. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/EntityComponent/Scene.h" line="53" column="13" bodyfile="Src/EntityComponent/Scene.cpp" bodystart="44" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_scene_1a3cead7c855db457ec65520aa84936cc5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classme_1_1_entity" kindref="compound">Entity</ref> &gt;</type>
        <definition>std::shared_ptr&lt; Entity &gt; me::Scene::findEntity</definition>
        <argsstring>(const EntityName &amp;name) const</argsstring>
        <name>findEntity</name>
        <qualifiedname>me::Scene::findEntity</qualifiedname>
        <param>
          <type>const <ref refid="namespaceme_1a4549e57e933271d021f2d5b4cd46c84e" kindref="member">EntityName</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Finds and returns an entity in the scene with the given name. If no entity with the given name is found or if it&apos;s deactivated, returns nullptr. This assumes that the name is a unique identifier, it there is more than one entity with that name then the first found entity will be return. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>String</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the entity to be found. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classme_1_1_entity" kindref="compound">Entity</ref> with the given name, or nullptr if not found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/EntityComponent/Scene.h" line="65" column="17" bodyfile="Src/EntityComponent/Scene.cpp" bodystart="53" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_scene_1ad3a4b63860b58bd6099c642edfcd0b37" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="namespaceme_1a4549e57e933271d021f2d5b4cd46c84e" kindref="member">EntityName</ref></type>
        <definition>const EntityName me::Scene::getName</definition>
        <argsstring>() const</argsstring>
        <name>getName</name>
        <qualifiedname>me::Scene::getName</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the scene name. <simplesect kind="return"><para>String name. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/EntityComponent/Scene.h" line="71" column="25" bodyfile="Src/EntityComponent/Scene.h" bodystart="71" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_scene_1aab34b49d48da59f38b1353a11f638109" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void me::Scene::setName</definition>
        <argsstring>(const SceneName name)</argsstring>
        <name>setName</name>
        <qualifiedname>me::Scene::setName</qualifiedname>
        <param>
          <type>const <ref refid="namespaceme_1a7af63ced847cd4a7e0ca4ba5a1688da3" kindref="member">SceneName</ref></type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the scene name to the new one. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>String</parametername>
</parameternamelist>
<parameterdescription>
<para>name. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/EntityComponent/Scene.h" line="79" column="13" bodyfile="Src/EntityComponent/Scene.h" bodystart="79" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_scene_1aba1cafa3873b414d6d1373e4b310cecc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void me::Scene::renameEntity</definition>
        <argsstring>(const EntityName &amp;oldName, const EntityName &amp;newName)</argsstring>
        <name>renameEntity</name>
        <qualifiedname>me::Scene::renameEntity</qualifiedname>
        <param>
          <type>const <ref refid="namespaceme_1a4549e57e933271d021f2d5b4cd46c84e" kindref="member">EntityName</ref> &amp;</type>
          <declname>oldName</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceme_1a4549e57e933271d021f2d5b4cd46c84e" kindref="member">EntityName</ref> &amp;</type>
          <declname>newName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Rename an entity name to the new one. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>String</parametername>
</parameternamelist>
<parameterdescription>
<para>oldName to be change. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>String</parametername>
</parameternamelist>
<parameterdescription>
<para>newName to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/EntityComponent/Scene.h" line="88" column="6" bodyfile="Src/EntityComponent/Scene.cpp" bodystart="61" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_scene_1a6c567df3aa3cc13c9fc10d2e76ead630" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void me::Scene::start</definition>
        <argsstring>()</argsstring>
        <name>start</name>
        <qualifiedname>me::Scene::start</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method is only ever called once. This must be called at the instantiation of the script. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/EntityComponent/Scene.h" line="94" column="14" bodyfile="Src/EntityComponent/Scene.cpp" bodystart="71" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_scene_1a7b38b1bb2ad9c0d58c9d6b7a24dbdc49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void me::Scene::update</definition>
        <argsstring>()</argsstring>
        <name>update</name>
        <qualifiedname>me::Scene::update</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method is meant to be the definition of those updates that has to be processed at the begining of the game cycle.</para>
<para>Almost all the logic updates. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/EntityComponent/Scene.h" line="103" column="6" bodyfile="Src/EntityComponent/Scene.cpp" bodystart="79" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_scene_1a926bb98a1a2701370385d908317ef96a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void me::Scene::lateUpdate</definition>
        <argsstring>()</argsstring>
        <name>lateUpdate</name>
        <qualifiedname>me::Scene::lateUpdate</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method is meant to be the definition of those updates that has to be processed at the end of the game cycle.</para>
<para>For example: render and collisions. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/EntityComponent/Scene.h" line="112" column="6" bodyfile="Src/EntityComponent/Scene.cpp" bodystart="84" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_scene_1a696834492d284fa97327eaebe047dc23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void me::Scene::refresh</definition>
        <argsstring>()</argsstring>
        <name>refresh</name>
        <qualifiedname>me::Scene::refresh</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Safely deletes dead entities from map, this means the ones who are deactivate. Fact: std::erase_if() was added to the C++ Standard Library in C++20. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/EntityComponent/Scene.h" line="119" column="6" bodyfile="Src/EntityComponent/Scene.cpp" bodystart="89" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_scene_1ac7a79c583363e7b96ec2a1e69c2ad98e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void me::Scene::processNewEntities</definition>
        <argsstring>()</argsstring>
        <name>processNewEntities</name>
        <qualifiedname>me::Scene::processNewEntities</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Safely adds the new entities from map, by deferring the addition of the new entity to the mEntities map until after the loop has completed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/EntityComponent/Scene.h" line="126" column="6" bodyfile="Src/EntityComponent/Scene.cpp" bodystart="95" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_scene_1a12b45b5136b252eefdc3ef45afc8497e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void me::Scene::pushEntities</definition>
        <argsstring>(InfoScene &amp;entitiesMap)</argsstring>
        <name>pushEntities</name>
        <qualifiedname>me::Scene::pushEntities</qualifiedname>
        <param>
          <type><ref refid="namespaceme_1a37719813e3fb0545c6e4b9165b9215c1" kindref="member">InfoScene</ref> &amp;</type>
          <declname>entitiesMap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Safely adds the new entities from unordered_map passed by the sceneManager <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>entitiesMap</parametername>
</parameternamelist>
<parameterdescription>
<para>is the unordered_map that contains all the information about the entity and its components. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/EntityComponent/Scene.h" line="132" column="6" bodyfile="Src/EntityComponent/Scene.cpp" bodystart="103" bodyend="120"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="Src/EntityComponent/Scene.h" line="19" column="1" bodyfile="Src/EntityComponent/Scene.h" bodystart="19" bodyend="138"/>
    <listofallmembers>
      <member refid="classme_1_1_scene_1a240675d5e2ab7d3cc93a38296c362039" prot="public" virt="non-virtual"><scope>me::Scene</scope><name>addEntity</name></member>
      <member refid="classme_1_1_scene_1a3cead7c855db457ec65520aa84936cc5" prot="public" virt="non-virtual"><scope>me::Scene</scope><name>findEntity</name></member>
      <member refid="classme_1_1_scene_1a2e082d7c60c03a74ef7ab375a5b9187f" prot="public" virt="non-virtual"><scope>me::Scene</scope><name>getEntities</name></member>
      <member refid="classme_1_1_scene_1ad3a4b63860b58bd6099c642edfcd0b37" prot="public" virt="non-virtual"><scope>me::Scene</scope><name>getName</name></member>
      <member refid="classme_1_1_scene_1a926bb98a1a2701370385d908317ef96a" prot="public" virt="non-virtual"><scope>me::Scene</scope><name>lateUpdate</name></member>
      <member refid="classme_1_1_scene_1ab142ec1bded6510e2cc2d8df88eab0b2" prot="protected" virt="non-virtual"><scope>me::Scene</scope><name>mEntities</name></member>
      <member refid="classme_1_1_scene_1aeb63ee8ae73ceeead581c3cde895291e" prot="protected" virt="non-virtual"><scope>me::Scene</scope><name>mName</name></member>
      <member refid="classme_1_1_scene_1ade7e79aada5fbdbf408f05f19da86226" prot="protected" virt="non-virtual"><scope>me::Scene</scope><name>mNewEntities</name></member>
      <member refid="classme_1_1_scene_1ac7a79c583363e7b96ec2a1e69c2ad98e" prot="public" virt="non-virtual"><scope>me::Scene</scope><name>processNewEntities</name></member>
      <member refid="classme_1_1_scene_1a12b45b5136b252eefdc3ef45afc8497e" prot="public" virt="non-virtual"><scope>me::Scene</scope><name>pushEntities</name></member>
      <member refid="classme_1_1_scene_1a696834492d284fa97327eaebe047dc23" prot="public" virt="non-virtual"><scope>me::Scene</scope><name>refresh</name></member>
      <member refid="classme_1_1_scene_1a47b4d3fd7351e759695c091be1f16cce" prot="public" virt="non-virtual"><scope>me::Scene</scope><name>removeEntity</name></member>
      <member refid="classme_1_1_scene_1aba1cafa3873b414d6d1373e4b310cecc" prot="public" virt="non-virtual"><scope>me::Scene</scope><name>renameEntity</name></member>
      <member refid="classme_1_1_scene_1a9610d79b8a2dd2d092603e17e3eca80f" prot="public" virt="non-virtual"><scope>me::Scene</scope><name>Scene</name></member>
      <member refid="classme_1_1_scene_1aab34b49d48da59f38b1353a11f638109" prot="public" virt="non-virtual"><scope>me::Scene</scope><name>setName</name></member>
      <member refid="classme_1_1_scene_1a6c567df3aa3cc13c9fc10d2e76ead630" prot="public" virt="virtual"><scope>me::Scene</scope><name>start</name></member>
      <member refid="classme_1_1_scene_1a7b38b1bb2ad9c0d58c9d6b7a24dbdc49" prot="public" virt="non-virtual"><scope>me::Scene</scope><name>update</name></member>
      <member refid="classme_1_1_scene_1a298e8e0b2716f284e047874be0ae18aa" prot="public" virt="virtual"><scope>me::Scene</scope><name>~Scene</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
