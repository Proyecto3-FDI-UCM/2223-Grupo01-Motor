<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="_physics_manager_8cpp" kind="file" language="C++">
    <compoundname>PhysicsManager.cpp</compoundname>
    <includes refid="_physics_manager_8h" local="yes">PhysicsManager.h</includes>
    <includes local="no">BulletCollision/CollisionShapes/btBoxShape.h</includes>
    <includes local="no">BulletCollision/CollisionShapes/btSphereShape.h</includes>
    <includes local="no">BulletCollision/CollisionShapes/btCylinderShape.h</includes>
    <includes local="no">BulletCollision/CollisionShapes/btCapsuleShape.h</includes>
    <includes local="no">BulletCollision/NarrowPhaseCollision/btPersistentManifold.h</includes>
    <includes local="no">BulletDynamics/Dynamics/btDiscreteDynamicsWorld.h</includes>
    <includes local="no">BulletDynamics/Dynamics/btRigidBody.h</includes>
    <includes local="no">BulletCollision/CollisionDispatch/btDefaultCollisionConfiguration.h</includes>
    <includes local="no">BulletCollision/BroadphaseCollision/btDbvtBroadphase.h</includes>
    <includes local="no">BulletDynamics/Dynamics/btActionInterface.h</includes>
    <includes local="no">BulletCollision/CollisionShapes/btCollisionShape.h</includes>
    <includes local="no">BulletDynamics/ConstraintSolver/btConstraintSolver.h</includes>
    <includes local="no">BulletDynamics/ConstraintSolver/btSequentialImpulseConstraintSolver.h</includes>
    <includes local="no">LinearMath/btDefaultMotionState.h</includes>
    <includes refid="_debug_drawer_8h" local="yes">DebugDrawer.h</includes>
    <includes refid="_collider_8h" local="yes">EntityComponent/Components/Collider.h</includes>
    <includes refid="_render_manager_8h" local="yes">Render/RenderManager.h</includes>
    <incdepgraph>
      <node id="17">
        <label>BulletCollision/BroadphaseCollision/btDbvtBroadphase.h</label>
      </node>
      <node id="16">
        <label>BulletCollision/CollisionDispatch/btDefaultCollisionConfiguration.h</label>
      </node>
      <node id="9">
        <label>BulletCollision/CollisionShapes/btBoxShape.h</label>
      </node>
      <node id="12">
        <label>BulletCollision/CollisionShapes/btCapsuleShape.h</label>
      </node>
      <node id="19">
        <label>BulletCollision/CollisionShapes/btCollisionShape.h</label>
      </node>
      <node id="11">
        <label>BulletCollision/CollisionShapes/btCylinderShape.h</label>
      </node>
      <node id="10">
        <label>BulletCollision/CollisionShapes/btSphereShape.h</label>
      </node>
      <node id="13">
        <label>BulletCollision/NarrowPhaseCollision/btPersistentManifold.h</label>
      </node>
      <node id="20">
        <label>BulletDynamics/ConstraintSolver/btConstraintSolver.h</label>
      </node>
      <node id="21">
        <label>BulletDynamics/ConstraintSolver/btSequentialImpulseConstraintSolver.h</label>
      </node>
      <node id="18">
        <label>BulletDynamics/Dynamics/btActionInterface.h</label>
      </node>
      <node id="14">
        <label>BulletDynamics/Dynamics/btDiscreteDynamicsWorld.h</label>
      </node>
      <node id="15">
        <label>BulletDynamics/Dynamics/btRigidBody.h</label>
      </node>
      <node id="23">
        <label>EntityComponent/Components/Collider.h</label>
        <link refid="_collider_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>Component.h</label>
        <link refid="_component_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>MotorEngine/MotorEngineAPI.h</label>
        <link refid="_motor_engine_a_p_i_8h"/>
      </node>
      <node id="6">
        <label>DebugDrawer.h</label>
        <link refid="_debug_drawer_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>Src/Physics/PhysicsManager.cpp</label>
        <link refid="_physics_manager_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>PhysicsManager.h</label>
        <link refid="_physics_manager_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>Render/RenderManager.h</label>
        <link refid="_render_manager_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>Utils/Singleton.h</label>
        <link refid="_singleton_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>LinearMath/btDefaultMotionState.h</label>
      </node>
      <node id="7">
        <label>LinearMath/btIDebugDraw.h</label>
      </node>
      <node id="8">
        <label>Ogre.h</label>
      </node>
      <node id="28">
        <label>OgreColourValue.h</label>
      </node>
      <node id="5">
        <label>memory</label>
      </node>
      <node id="27">
        <label>string</label>
      </node>
      <node id="26">
        <label>unordered_map</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="_physics_manager_8cpp_1a0a570ed0920c72c3458c7280486dbe1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void callBackEnter</definition>
        <argsstring>(btPersistentManifold *const &amp;manifold)</argsstring>
        <name>callBackEnter</name>
        <param>
          <type>btPersistentManifold *const &amp;</type>
          <declname>manifold</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Physics/PhysicsManager.cpp" line="34" column="6" bodyfile="Src/Physics/PhysicsManager.cpp" bodystart="34" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="_physics_manager_8cpp_1a15084152b34235233873fcb88f4f22f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool callBackStay</definition>
        <argsstring>(btManifoldPoint &amp;manifold, void *obj1, void *obj2)</argsstring>
        <name>callBackStay</name>
        <param>
          <type>btManifoldPoint &amp;</type>
          <declname>manifold</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>obj1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>obj2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Physics/PhysicsManager.cpp" line="55" column="6" bodyfile="Src/Physics/PhysicsManager.cpp" bodystart="55" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="_physics_manager_8cpp_1aa586de551661c3e5b7bdc3f6bc173cbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void callBackExit</definition>
        <argsstring>(btPersistentManifold *const &amp;manifold)</argsstring>
        <name>callBackExit</name>
        <param>
          <type>btPersistentManifold *const &amp;</type>
          <declname>manifold</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Physics/PhysicsManager.cpp" line="80" column="6" bodyfile="Src/Physics/PhysicsManager.cpp" bodystart="80" bodyend="96"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_physics_manager_8h" kindref="compound">PhysicsManager.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;BulletCollision/CollisionShapes/btBoxShape.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;BulletCollision/CollisionShapes/btSphereShape.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;BulletCollision/CollisionShapes/btCylinderShape.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;BulletCollision/CollisionShapes/btCapsuleShape.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;BulletCollision/NarrowPhaseCollision/btPersistentManifold.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;BulletDynamics/Dynamics/btDiscreteDynamicsWorld.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;BulletDynamics/Dynamics/btRigidBody.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;BulletCollision/CollisionDispatch/btDefaultCollisionConfiguration.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;BulletCollision/BroadphaseCollision/btDbvtBroadphase.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;BulletDynamics/Dynamics/btActionInterface.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;BulletCollision/CollisionShapes/btCollisionShape.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;BulletDynamics/ConstraintSolver/btConstraintSolver.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;BulletDynamics/ConstraintSolver/btSequentialImpulseConstraintSolver.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;LinearMath/btDefaultMotionState.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_debug_drawer_8h" kindref="compound">DebugDrawer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_collider_8h" kindref="compound">EntityComponent/Components/Collider.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_render_manager_8h" kindref="compound">Render/RenderManager.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal">me::PhysicsManager::PhysicsManager()</highlight></codeline>
<codeline lineno="23"><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><ref refid="classme_1_1_physics_manager_1ae258342ca61ad01676c12af162fa5de4" kindref="member">me::PhysicsManager::~PhysicsManager</ref>()</highlight></codeline>
<codeline lineno="27"><highlight class="normal">{</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="31"><highlight class="comment">Collision<sp/>Enter<sp/>Callback,<sp/>mainfold<sp/>can<sp/>get<sp/>the<sp/></highlight></codeline>
<codeline lineno="32"><highlight class="comment">pointers<sp/>of<sp/>the<sp/>rigid<sp/>bodies<sp/>that<sp/>have<sp/>collided</highlight></codeline>
<codeline lineno="33"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_physics_manager_8cpp_1a0a570ed0920c72c3458c7280486dbe1b" kindref="member">callBackEnter</ref>(btPersistentManifold*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>manifold)<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btCollisionObject*<sp/>body1<sp/>=<sp/>manifold-&gt;getBody0();</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btCollisionObject*<sp/>body2<sp/>=<sp/>manifold-&gt;getBody1();</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(body1<sp/>&amp;&amp;<sp/>body2)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classme_1_1_collider" kindref="compound">me::Collider</ref>*<sp/>colliderBody1<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classme_1_1_collider" kindref="compound">me::Collider</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(body1-&gt;getUserPointer());</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classme_1_1_collider" kindref="compound">me::Collider</ref>*<sp/>colliderBody2<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classme_1_1_collider" kindref="compound">me::Collider</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(body2-&gt;getUserPointer());</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colliderBody1<sp/>&amp;&amp;<sp/>colliderBody2)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colliderBody1-&gt;<ref refid="classme_1_1_collider_1a06b45c7173e37f43710d6507380f4b9d" kindref="member">onCollisionEnter</ref>(colliderBody2-&gt;<ref refid="classme_1_1_component_1a1c8917fcfda2d8ad66ab487ab726a0cd" kindref="member">getEntity</ref>());</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colliderBody2-&gt;<ref refid="classme_1_1_collider_1a06b45c7173e37f43710d6507380f4b9d" kindref="member">onCollisionEnter</ref>(colliderBody1-&gt;<ref refid="classme_1_1_component_1a1c8917fcfda2d8ad66ab487ab726a0cd" kindref="member">getEntity</ref>());</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="53"><highlight class="comment">Collision<sp/>Stay<sp/>Callback</highlight></codeline>
<codeline lineno="54"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_physics_manager_8cpp_1a15084152b34235233873fcb88f4f22f9" kindref="member">callBackStay</ref>(btManifoldPoint&amp;<sp/>manifold,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>obj1,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>obj2)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btCollisionObject*<sp/>body1<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">btCollisionObject*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(obj1);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btCollisionObject*<sp/>body2<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">btCollisionObject*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(obj2);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(body1<sp/>&amp;&amp;<sp/>body2)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classme_1_1_collider" kindref="compound">me::Collider</ref>*<sp/>colliderBody1<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classme_1_1_collider" kindref="compound">me::Collider</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(body1-&gt;getUserPointer());</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classme_1_1_collider" kindref="compound">me::Collider</ref>*<sp/>colliderBody2<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classme_1_1_collider" kindref="compound">me::Collider</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(body2-&gt;getUserPointer());</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colliderBody1<sp/>&amp;&amp;<sp/>colliderBody2)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colliderBody1-&gt;<ref refid="classme_1_1_collider_1a3f5fa8755c5361d1b1444ead18d90d60" kindref="member">onCollisionStay</ref>(colliderBody2-&gt;<ref refid="classme_1_1_component_1a1c8917fcfda2d8ad66ab487ab726a0cd" kindref="member">getEntity</ref>());</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colliderBody2-&gt;<ref refid="classme_1_1_collider_1a3f5fa8755c5361d1b1444ead18d90d60" kindref="member">onCollisionStay</ref>(colliderBody1-&gt;<ref refid="classme_1_1_component_1a1c8917fcfda2d8ad66ab487ab726a0cd" kindref="member">getEntity</ref>());</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="77"><highlight class="comment">Collision<sp/>Exit<sp/>Callback,<sp/>mainfold<sp/>can<sp/>get<sp/>the</highlight></codeline>
<codeline lineno="78"><highlight class="comment">pointers<sp/>of<sp/>the<sp/>rigid<sp/>bodies<sp/>that<sp/>have<sp/>collided</highlight></codeline>
<codeline lineno="79"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_physics_manager_8cpp_1aa586de551661c3e5b7bdc3f6bc173cbb" kindref="member">callBackExit</ref>(btPersistentManifold*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>manifold)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btCollisionObject*<sp/>body1<sp/>=<sp/>manifold-&gt;getBody0();</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btCollisionObject*<sp/>body2<sp/>=<sp/>manifold-&gt;getBody1();</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(body1<sp/>&amp;&amp;<sp/>body2)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classme_1_1_collider" kindref="compound">me::Collider</ref>*<sp/>colliderBody1<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classme_1_1_collider" kindref="compound">me::Collider</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(body1-&gt;getUserPointer());</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classme_1_1_collider" kindref="compound">me::Collider</ref>*<sp/>colliderBody2<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classme_1_1_collider" kindref="compound">me::Collider</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(body2-&gt;getUserPointer());</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colliderBody1<sp/>&amp;&amp;<sp/>colliderBody2)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colliderBody1-&gt;<ref refid="classme_1_1_collider_1a713a91741f2fd59de09c758f542e4b8b" kindref="member">onCollisionExit</ref>(colliderBody2-&gt;<ref refid="classme_1_1_component_1a1c8917fcfda2d8ad66ab487ab726a0cd" kindref="member">getEntity</ref>());</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colliderBody2-&gt;<ref refid="classme_1_1_collider_1a713a91741f2fd59de09c758f542e4b8b" kindref="member">onCollisionExit</ref>(colliderBody1-&gt;<ref refid="classme_1_1_component_1a1c8917fcfda2d8ad66ab487ab726a0cd" kindref="member">getEntity</ref>());</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classme_1_1_physics_manager_1a5193cc56360379350eecb952d607805d" kindref="member">me::PhysicsManager::start</ref>()</highlight></codeline>
<codeline lineno="99"><highlight class="normal">{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>mCollisionConfiguration<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>btDefaultCollisionConfiguration();</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>mDispatcher<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>btCollisionDispatcher(mCollisionConfiguration);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>mBroadphaseInterface<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>btDbvtBroadphase();</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>mConstraintSolver<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>btSequentialImpulseConstraintSolver;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>mDynamicsWorld<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>btDiscreteDynamicsWorld(mDispatcher,<sp/>mBroadphaseInterface,<sp/>mConstraintSolver,<sp/>mCollisionConfiguration);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>gContactStartedCallback<sp/>=<sp/><ref refid="_physics_manager_8cpp_1a0a570ed0920c72c3458c7280486dbe1b" kindref="member">callBackEnter</ref>;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>gContactProcessedCallback<sp/>=<sp/><ref refid="_physics_manager_8cpp_1a15084152b34235233873fcb88f4f22f9" kindref="member">callBackStay</ref>;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>gContactEndedCallback<sp/>=<sp/><ref refid="_physics_manager_8cpp_1aa586de551661c3e5b7bdc3f6bc173cbb" kindref="member">callBackExit</ref>;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="comment">//#ifdef<sp/>_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>mDebug<sp/>=<sp/>new<sp/>DebugDrawer();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>mDynamicsWorld-&gt;setDebugDrawer(mDebug);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">//#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//mDynamicsWorld-&gt;setGravity(btVector3(0,<sp/>-9.8,<sp/>0));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classme_1_1_physics_manager_1aeb52685f076c27dd71a6812d20eb8f8e" kindref="member">me::PhysicsManager::addRigidBody</ref>(btRigidBody*<sp/>rigidBody)</highlight></codeline>
<codeline lineno="121"><highlight class="normal">{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>mDynamicsWorld-&gt;addRigidBody(rigidBody);</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classme_1_1_physics_manager_1a2c0533df797d3a73ef701771efa01a94" kindref="member">me::PhysicsManager::addVehicle</ref>(btActionInterface*<sp/>vehicle)</highlight></codeline>
<codeline lineno="126"><highlight class="normal">{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>mDynamicsWorld-&gt;addVehicle(vehicle);</highlight></codeline>
<codeline lineno="128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal">btCollisionShape*<sp/><ref refid="classme_1_1_physics_manager_1a75737121808c5c7711729d9d8cd4f05e" kindref="member">me::PhysicsManager::createShape</ref>(<ref refid="_physics_manager_8h_1a3c6c49dd4d974c67346f991bc443b14b" kindref="member">Shapes</ref><sp/>shape,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btVector3<sp/>&amp;scale)</highlight></codeline>
<codeline lineno="131"><highlight class="normal">{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>btCollisionShape*<sp/>shape_;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(shape)</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_physics_manager_8h_1a3c6c49dd4d974c67346f991bc443b14bad234e1337b65f7d48adcec10b0a5233e" kindref="member">SHAPES_SPHERE</ref>:</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>btSphereShape(scale.length());</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_physics_manager_8h_1a3c6c49dd4d974c67346f991bc443b14baf52143b9efb76308441d30efa1013e8f" kindref="member">SHAPES_BOX</ref>:</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>btBoxShape(btVector3(scale.x(),<sp/>scale.y(),<sp/>scale.z())*50);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_physics_manager_8h_1a3c6c49dd4d974c67346f991bc443b14ba9d9edaa5743e042d75e3a3cedcf17e5b" kindref="member">SHAPES_CYLINDER</ref>:</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>btCylinderShape(scale);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_physics_manager_8h_1a3c6c49dd4d974c67346f991bc443b14ba6e7c12404e97120c0a157da639dae55a" kindref="member">SHAPES_CAPSULE</ref>:</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>btCapsuleShape(scale.x(),<sp/>scale.y());</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>btSphereShape(scale.length());</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shape_;</highlight></codeline>
<codeline lineno="156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal">btRigidBody*<ref refid="classme_1_1_physics_manager_1ad020f481e47299f0758d1953c9974d2b" kindref="member">me::PhysicsManager::createRigidBody</ref>(btTransform*<sp/>transform,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btVector3<sp/>&amp;scale,<sp/><ref refid="_physics_manager_8h_1a3c6c49dd4d974c67346f991bc443b14b" kindref="member">Shapes</ref><sp/>shape,<sp/><ref refid="_physics_manager_8h_1a8a93b61bc797a7d1907f42796a252493" kindref="member">MovementType</ref><sp/>mvType,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isTrigger,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>friction,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;mass,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>restitution)</highlight></codeline>
<codeline lineno="159"><highlight class="normal">{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>btCollisionShape*<sp/>colShape;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>colShape<sp/>=<sp/>createShape(shape,<sp/>scale);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Initially<sp/>the<sp/>rigidBody<sp/><sp/>is<sp/>in<sp/>repose</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>btVector3<sp/>reposeInertia(0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Stores<sp/>the<sp/>initial<sp/>position<sp/>and<sp/>orientation<sp/>of<sp/>the<sp/>rigid<sp/>object<sp/>to<sp/>update<sp/>them<sp/>with<sp/>each<sp/>iteration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>btDefaultMotionState*<sp/>dfMotionState<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>btDefaultMotionState(*transform);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>object<sp/>is<sp/>dynamic,<sp/>calculate<sp/>the<sp/>localInertia</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mvType<sp/>==<sp/><ref refid="_physics_manager_8h_1a8a93b61bc797a7d1907f42796a252493a5f3293f4fee67e119d537aba61589bc8" kindref="member">MOVEMENT_TYPE_DYNAMIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colShape-&gt;calculateLocalInertia(mass,<sp/>reposeInertia);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mvType<sp/>==<sp/><ref refid="_physics_manager_8h_1a8a93b61bc797a7d1907f42796a252493aaff433b41af5badf4d9de6b351e1cf17" kindref="member">MOVEMENT_TYPE_STATIC</ref>)<sp/>mass<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Info<sp/>to<sp/>create<sp/>rigidBody</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>btRigidBody::btRigidBodyConstructionInfo<sp/>rbContruction<sp/>=<sp/>btRigidBody::btRigidBodyConstructionInfo(mass,<sp/>dfMotionState,<sp/>colShape,<sp/>reposeInertia);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>btRigidBody*<sp/>rb<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>btRigidBody(rbContruction);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>rb-&gt;setRestitution(restitution);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>rb-&gt;setFriction(friction);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>rb-&gt;setCollisionFlags(mvType);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isTrigger)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rb-&gt;setCollisionFlags(btCollisionObject::CF_NO_CONTACT_RESPONSE);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>addRigidBody(rb);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rb;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classme_1_1_physics_manager_1a6c899ac34fc670d38f6d3c6809eed3d9" kindref="member">me::PhysicsManager::update</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&amp;<sp/>dt)</highlight></codeline>
<codeline lineno="198"><highlight class="normal">{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>mDynamicsWorld-&gt;stepSimulation(dt);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="comment">//#ifdef<sp/>_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>mDynamicsWorld-&gt;debugDrawWorld();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="comment">//#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="Src/Physics/PhysicsManager.cpp"/>
  </compounddef>
</doxygen>
