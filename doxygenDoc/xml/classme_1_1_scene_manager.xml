<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classme_1_1_scene_manager" kind="class" language="C++" prot="public">
    <compoundname>me::SceneManager</compoundname>
    <basecompoundref refid="classme_1_1_singleton" prot="public" virt="non-virtual">me::Singleton&lt; SceneManager &gt;</basecompoundref>
    <includes refid="_scene_manager_8h" local="no">SceneManager.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classme_1_1_scene_manager_1ac658e04415dc6c180654223ffc3ec348" prot="private" static="no" mutable="no">
        <type>friend</type>
        <definition>friend me::SceneManager::Singleton&lt; SceneManager &gt;</definition>
        <argsstring></argsstring>
        <name>Singleton&lt; SceneManager &gt;</name>
        <qualifiedname>me::SceneManager::Singleton&lt; SceneManager &gt;</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/EntityComponent/SceneManager.h" line="17" column="9" bodyfile="Src/EntityComponent/SceneManager.h" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classme_1_1_scene_manager_1ad4aa73abb11f7425e57e20ca45c92720" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; std::string, std::shared_ptr&lt; <ref refid="classme_1_1_scene" kindref="compound">Scene</ref> &gt; &gt;</type>
        <definition>std::unordered_map&lt;std::string, std::shared_ptr&lt;Scene&gt; &gt; me::SceneManager::mScenes</definition>
        <argsstring></argsstring>
        <name>mScenes</name>
        <qualifiedname>me::SceneManager::mScenes</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/EntityComponent/SceneManager.h" line="106" column="28" bodyfile="Src/EntityComponent/SceneManager.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classme_1_1_scene_manager_1aff2565fcb05e90bc9e6cc2398a39b8dc" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classme_1_1_scene" kindref="compound">Scene</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Scene&gt; me::SceneManager::mActiveScene</definition>
        <argsstring></argsstring>
        <name>mActiveScene</name>
        <qualifiedname>me::SceneManager::mActiveScene</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/EntityComponent/SceneManager.h" line="107" column="25" bodyfile="Src/EntityComponent/SceneManager.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classme_1_1_scene_manager_1a61917146f941c40f282130ade6c5cd74" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceme_1a37719813e3fb0545c6e4b9165b9215c1" kindref="member">InfoScene</ref></type>
        <definition>InfoScene me::SceneManager::mEntitiesMap</definition>
        <argsstring></argsstring>
        <name>mEntitiesMap</name>
        <qualifiedname>me::SceneManager::mEntitiesMap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/EntityComponent/SceneManager.h" line="109" column="19" bodyfile="Src/EntityComponent/SceneManager.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classme_1_1_scene_manager_1a9539bd6d36c96af17815c97517798a9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>me::SceneManager::SceneManager</definition>
        <argsstring>()</argsstring>
        <name>SceneManager</name>
        <qualifiedname>me::SceneManager::SceneManager</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Build the foundation of the <ref refid="classme_1_1_scene_manager" kindref="compound">SceneManager</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/EntityComponent/SceneManager.h" line="24" column="9" bodyfile="Src/EntityComponent/Scenemanager.cpp" bodystart="13" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_scene_manager_1a492786a63338f7592d3c90bd7c1a5b68" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>me::SceneManager::~SceneManager</definition>
        <argsstring>()</argsstring>
        <name>~SceneManager</name>
        <qualifiedname>me::SceneManager::~SceneManager</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method is meant to be the definition of the dynamic memory that has to be safely delete. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/EntityComponent/SceneManager.h" line="30" column="17" bodyfile="Src/EntityComponent/Scenemanager.cpp" bodystart="21" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_scene_manager_1a2a3c37650ea0956c6539dd6f0f6adb75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classme_1_1_scene" kindref="compound">Scene</ref> &gt;</type>
        <definition>std::shared_ptr&lt; Scene &gt; me::SceneManager::addScene</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>addScene</name>
        <qualifiedname>me::SceneManager::addScene</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a new <ref refid="classme_1_1_scene" kindref="compound">Scene</ref> to the <ref refid="classme_1_1_scene_manager" kindref="compound">SceneManager</ref>. This assumes that the name is a unique identifier. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>String</parametername>
</parameternamelist>
<parameterdescription>
<para>name to identify the new scene. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/EntityComponent/SceneManager.h" line="37" column="25" bodyfile="Src/EntityComponent/Scenemanager.cpp" bodystart="29" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_scene_manager_1a692ef55242c022bcb0f39af45f8e8f91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void me::SceneManager::removeScene</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>removeScene</name>
        <qualifiedname>me::SceneManager::removeScene</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove an scene from the <ref refid="classme_1_1_scene_manager" kindref="compound">SceneManager</ref>. This assumes that the name is a unique identifier. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>String</parametername>
</parameternamelist>
<parameterdescription>
<para>name to identify the scene to be remove. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/EntityComponent/SceneManager.h" line="44" column="14" bodyfile="Src/EntityComponent/Scenemanager.cpp" bodystart="37" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_scene_manager_1a535b9a281d883696061e9587273f42a5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classme_1_1_scene" kindref="compound">Scene</ref> &gt;</type>
        <definition>std::shared_ptr&lt; Scene &gt; me::SceneManager::getScene</definition>
        <argsstring>(const std::string &amp;name) const</argsstring>
        <name>getScene</name>
        <qualifiedname>me::SceneManager::getScene</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get an scene from the <ref refid="classme_1_1_scene_manager" kindref="compound">SceneManager</ref>. This assumes that the name is a unique identifier. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>String</parametername>
</parameternamelist>
<parameterdescription>
<para>name to identify the scene suggested. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/EntityComponent/SceneManager.h" line="51" column="25" bodyfile="Src/EntityComponent/Scenemanager.cpp" bodystart="44" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_scene_manager_1adb934d5cbbe79b5dd01eb6f7a8036561" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classme_1_1_scene" kindref="compound">Scene</ref> &gt;</type>
        <definition>std::shared_ptr&lt; Scene &gt; me::SceneManager::getActiveScene</definition>
        <argsstring>() const</argsstring>
        <name>getActiveScene</name>
        <qualifiedname>me::SceneManager::getActiveScene</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the scene that is actually active from the <ref refid="classme_1_1_scene_manager" kindref="compound">SceneManager</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/EntityComponent/SceneManager.h" line="56" column="32" bodyfile="Src/EntityComponent/SceneManager.h" bodystart="56" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_scene_manager_1acbf706a7532518e65768b045c0380f9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void me::SceneManager::renameScene</definition>
        <argsstring>(const std::string &amp;oldName, const std::string &amp;newName)</argsstring>
        <name>renameScene</name>
        <qualifiedname>me::SceneManager::renameScene</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>oldName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>newName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Rename an scene name to the new one. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>String</parametername>
</parameternamelist>
<parameterdescription>
<para>oldName to be change. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>String</parametername>
</parameternamelist>
<parameterdescription>
<para>newName to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/EntityComponent/SceneManager.h" line="65" column="14" bodyfile="Src/EntityComponent/Scenemanager.cpp" bodystart="52" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_scene_manager_1aa6cecfe127f89c94c2bff5ece29e387e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void me::SceneManager::setActiveScene</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>setActiveScene</name>
        <qualifiedname>me::SceneManager::setActiveScene</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the active scene from the <ref refid="classme_1_1_scene_manager" kindref="compound">SceneManager</ref>. This assumes that the name is a unique identifier. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>String</parametername>
</parameternamelist>
<parameterdescription>
<para>name to identify the scene suggested. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/EntityComponent/SceneManager.h" line="72" column="14" bodyfile="Src/EntityComponent/Scenemanager.cpp" bodystart="62" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_scene_manager_1aed9f90a7c28962042c37ad66a9d60d61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void me::SceneManager::update</definition>
        <argsstring>()</argsstring>
        <name>update</name>
        <qualifiedname>me::SceneManager::update</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Main loop of this manager, if there is an active scene this will call the scene loop mehtods by the order of: processNewEntities, update, lateUpdate and refresh. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/EntityComponent/SceneManager.h" line="79" column="14" bodyfile="Src/EntityComponent/Scenemanager.cpp" bodystart="69" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_scene_manager_1a4dab59e5187d481b15c24800e34f46a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int me::SceneManager::loadEntities</definition>
        <argsstring>(const std::string &amp;sceneName)</argsstring>
        <name>loadEntities</name>
        <qualifiedname>me::SceneManager::loadEntities</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>sceneName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse entities from .lua file to an unordered_map that will be passed to the current <ref refid="classme_1_1_scene" kindref="compound">Scene</ref> to create the entities. sceneName has to be the name of the file with .lua INCLUDED. Example: sceneName =&gt; scene.lua</para>
<para><simplesect kind="return"><para>Error Value, 0 if loadEntities worked correctly or 1 if some error appeared during this function </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/EntityComponent/SceneManager.h" line="89" column="13" bodyfile="Src/EntityComponent/Scenemanager.cpp" bodystart="78" bodyend="114"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classme_1_1_scene_manager_1a5ebee73567c93ce6390f3d1c748b45a4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int me::SceneManager::readEntities</definition>
        <argsstring>(lua_State *L)</argsstring>
        <name>readEntities</name>
        <qualifiedname>me::SceneManager::readEntities</qualifiedname>
        <param>
          <type>lua_State *</type>
          <declname>L</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/EntityComponent/SceneManager.h" line="99" column="13" bodyfile="Src/EntityComponent/Scenemanager.cpp" bodystart="116" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_scene_manager_1a5ead03aa4410ec9e6f38ac6deb251210" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void me::SceneManager::pushEntities</definition>
        <argsstring>()</argsstring>
        <name>pushEntities</name>
        <qualifiedname>me::SceneManager::pushEntities</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/EntityComponent/SceneManager.h" line="104" column="14" bodyfile="Src/EntityComponent/Scenemanager.cpp" bodystart="190" bodyend="193"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>me::Singleton&lt; SceneManager &gt;</label>
        <link refid="classme_1_1_singleton"/>
      </node>
      <node id="1">
        <label>me::SceneManager</label>
        <link refid="classme_1_1_scene_manager"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>me::Singleton&lt; SceneManager &gt;</label>
        <link refid="classme_1_1_singleton"/>
      </node>
      <node id="1">
        <label>me::SceneManager</label>
        <link refid="classme_1_1_scene_manager"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="Src/EntityComponent/SceneManager.h" line="16" column="5" bodyfile="Src/EntityComponent/SceneManager.h" bodystart="16" bodyend="110"/>
    <listofallmembers>
      <member refid="classme_1_1_scene_manager_1a2a3c37650ea0956c6539dd6f0f6adb75" prot="public" virt="non-virtual"><scope>me::SceneManager</scope><name>addScene</name></member>
      <member refid="classme_1_1_scene_manager_1adb934d5cbbe79b5dd01eb6f7a8036561" prot="public" virt="non-virtual"><scope>me::SceneManager</scope><name>getActiveScene</name></member>
      <member refid="classme_1_1_scene_manager_1a535b9a281d883696061e9587273f42a5" prot="public" virt="non-virtual"><scope>me::SceneManager</scope><name>getScene</name></member>
      <member refid="classme_1_1_singleton_1a919633966a5db8336cffa09f28fc2623" prot="public" virt="non-virtual"><scope>me::SceneManager</scope><name>init</name></member>
      <member refid="classme_1_1_singleton_1a8810aab25f6fdc043bfac52761a9a260" prot="public" virt="non-virtual"><scope>me::SceneManager</scope><name>instance</name></member>
      <member refid="classme_1_1_scene_manager_1a4dab59e5187d481b15c24800e34f46a4" prot="public" virt="non-virtual"><scope>me::SceneManager</scope><name>loadEntities</name></member>
      <member refid="classme_1_1_scene_manager_1aff2565fcb05e90bc9e6cc2398a39b8dc" prot="private" virt="non-virtual"><scope>me::SceneManager</scope><name>mActiveScene</name></member>
      <member refid="classme_1_1_scene_manager_1a61917146f941c40f282130ade6c5cd74" prot="private" virt="non-virtual"><scope>me::SceneManager</scope><name>mEntitiesMap</name></member>
      <member refid="classme_1_1_scene_manager_1ad4aa73abb11f7425e57e20ca45c92720" prot="private" virt="non-virtual"><scope>me::SceneManager</scope><name>mScenes</name></member>
      <member refid="classme_1_1_singleton_1a6745ba60837f9347a75c0cfc27fadfb0" prot="public" virt="non-virtual"><scope>me::SceneManager</scope><name>operator=</name></member>
      <member refid="classme_1_1_scene_manager_1a5ead03aa4410ec9e6f38ac6deb251210" prot="private" virt="non-virtual"><scope>me::SceneManager</scope><name>pushEntities</name></member>
      <member refid="classme_1_1_scene_manager_1a5ebee73567c93ce6390f3d1c748b45a4" prot="private" virt="non-virtual"><scope>me::SceneManager</scope><name>readEntities</name></member>
      <member refid="classme_1_1_scene_manager_1a692ef55242c022bcb0f39af45f8e8f91" prot="public" virt="non-virtual"><scope>me::SceneManager</scope><name>removeScene</name></member>
      <member refid="classme_1_1_scene_manager_1acbf706a7532518e65768b045c0380f9d" prot="public" virt="non-virtual"><scope>me::SceneManager</scope><name>renameScene</name></member>
      <member refid="classme_1_1_scene_manager_1a9539bd6d36c96af17815c97517798a9c" prot="public" virt="non-virtual"><scope>me::SceneManager</scope><name>SceneManager</name></member>
      <member refid="classme_1_1_scene_manager_1aa6cecfe127f89c94c2bff5ece29e387e" prot="public" virt="non-virtual"><scope>me::SceneManager</scope><name>setActiveScene</name></member>
      <member refid="classme_1_1_singleton_1af5127d54d6c6904173541b404903b599" prot="protected" virt="non-virtual"><scope>me::SceneManager</scope><name>Singleton</name></member>
      <member refid="classme_1_1_singleton_1a70f85c079fd020a8655eed54e7189845" prot="public" virt="non-virtual"><scope>me::SceneManager</scope><name>Singleton</name></member>
      <member refid="classme_1_1_scene_manager_1ac658e04415dc6c180654223ffc3ec348" prot="private" virt="non-virtual"><scope>me::SceneManager</scope><name>Singleton&lt; SceneManager &gt;</name></member>
      <member refid="classme_1_1_scene_manager_1aed9f90a7c28962042c37ad66a9d60d61" prot="public" virt="non-virtual"><scope>me::SceneManager</scope><name>update</name></member>
      <member refid="classme_1_1_scene_manager_1a492786a63338f7592d3c90bd7c1a5b68" prot="public" virt="virtual"><scope>me::SceneManager</scope><name>~SceneManager</name></member>
      <member refid="classme_1_1_singleton_1a576834dfbf95c3b929511d2a588866d1" prot="public" virt="virtual"><scope>me::SceneManager</scope><name>~Singleton</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
