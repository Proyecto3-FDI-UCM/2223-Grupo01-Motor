<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="_motor_engine_8cpp" kind="file" language="C++">
    <compoundname>MotorEngine.cpp</compoundname>
    <includes refid="_motor_engine_8h" local="yes">MotorEngine.h</includes>
    <includes local="no">iostream</includes>
    <includes local="no">thread</includes>
    <includes refid="_time_8h" local="no">time.h</includes>
    <includes local="no">memory</includes>
    <includes local="no">random</includes>
    <includes refid="_sound_manager_8h" local="yes">Audio/SoundManager.h</includes>
    <includes refid="_physics_manager_8h" local="yes">Physics/PhysicsManager.h</includes>
    <includes refid="_render_manager_8h" local="yes">Render/RenderManager.h</includes>
    <includes refid="_input_manager_8h" local="yes">Input/InputManager.h</includes>
    <includes refid="_scene_manager_8h" local="yes">EntityComponent/SceneManager.h</includes>
    <includes refid="_scene_8h" local="yes">EntityComponent/Scene.h</includes>
    <includes refid="_window_8h" local="yes">Render/Window.h</includes>
    <includes refid="_components_factory_8h" local="yes">EntityComponent/Components/ComponentsFactory.h</includes>
    <includes refid="_factory_component_8h" local="yes">EntityComponent/Components/FactoryComponent.h</includes>
    <includes local="no">SDL3/SDL_events.h</includes>
    <includes local="no">SDL3/SDL_init.h</includes>
    <incdepgraph>
      <node id="12">
        <label>Audio/SoundManager.h</label>
        <link refid="_sound_manager_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>EntityComponent/Components/ComponentsFactory.h</label>
        <link refid="_components_factory_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>EntityComponent/Components/FactoryComponent.h</label>
        <link refid="_factory_component_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>InfoScene.h</label>
        <link refid="_info_scene_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>EntityComponent/Scene.h</label>
        <link refid="_scene_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>EntityComponent/SceneManager.h</label>
        <link refid="_scene_manager_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>Axis.h</label>
        <link refid="_axis_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>Button.h</label>
        <link refid="_button_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>Input/InputManager.h</label>
        <link refid="_input_manager_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>Src/MotorEngine/MotorEngine.cpp</label>
        <link refid="_motor_engine_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>MotorEngine.h</label>
        <link refid="_motor_engine_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>MotorEngineAPI.h</label>
        <link refid="_motor_engine_a_p_i_8h"/>
      </node>
      <node id="21">
        <label>DebugDrawer.h</label>
        <link refid="_debug_drawer_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>Physics/PhysicsManager.h</label>
        <link refid="_physics_manager_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>Render/RenderManager.h</label>
        <link refid="_render_manager_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>Render/Window.h</label>
        <link refid="_window_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>Utils/Singleton.h</label>
        <link refid="_singleton_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>time.h</label>
        <link refid="_time_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>Utils/Vector2.h</label>
        <link refid="_vector2_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>Utils/Vector3.h</label>
        <link refid="_vector3_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>LinearMath/btIDebugDraw.h</label>
      </node>
      <node id="23">
        <label>Ogre.h</label>
      </node>
      <node id="25">
        <label>OgreColourValue.h</label>
      </node>
      <node id="38">
        <label>SDL3/SDL_events.h</label>
      </node>
      <node id="39">
        <label>SDL3/SDL_init.h</label>
      </node>
      <node id="4">
        <label>Windows.h</label>
      </node>
      <node id="14">
        <label>algorithm</label>
      </node>
      <node id="15">
        <label>cctype</label>
      </node>
      <node id="5">
        <label>chrono</label>
      </node>
      <node id="19">
        <label>cmath</label>
      </node>
      <node id="34">
        <label>initializer_list</label>
      </node>
      <node id="7">
        <label>iostream</label>
      </node>
      <node id="18">
        <label>math.h</label>
      </node>
      <node id="10">
        <label>memory</label>
      </node>
      <node id="11">
        <label>random</label>
      </node>
      <node id="6">
        <label>string</label>
      </node>
      <node id="8">
        <label>thread</label>
      </node>
      <node id="13">
        <label>unordered_map</label>
      </node>
      <node id="30">
        <label>vector</label>
      </node>
    </incdepgraph>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_motor_engine_8cpp_1a54df1405e77d85ad756df1f0eaa10180" prot="public" static="no">
        <type>const char *(*</type>
        <definition>typedef const char *(* GameName) ()</definition>
        <argsstring>)()</argsstring>
        <name>GameName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/MotorEngine/MotorEngine.cpp" line="27" column="15" bodyfile="Src/MotorEngine/MotorEngine.cpp" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_motor_engine_8cpp_1a91a26f032ffde5ca7236c176217471bf" prot="public" static="no">
        <type>bool(__cdecl *</type>
        <definition>typedef bool(__cdecl * GameEntryPoint) ()</definition>
        <argsstring>)()</argsstring>
        <name>GameEntryPoint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/MotorEngine/MotorEngine.cpp" line="28" column="9" bodyfile="Src/MotorEngine/MotorEngine.cpp" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_motor_engine_8cpp_1a30b340f18dcd84e9e59b84a6367ca932" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* TypeDefinition) ()</definition>
        <argsstring>)()</argsstring>
        <name>TypeDefinition</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/MotorEngine/MotorEngine.cpp" line="29" column="9" bodyfile="Src/MotorEngine/MotorEngine.cpp" bodystart="29" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_motor_engine_8h" kindref="compound">MotorEngine.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>---<sp/>C++</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;thread&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_time_8h" kindref="compound">time.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;random&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>---<sp/>Managers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_sound_manager_8h" kindref="compound">Audio/SoundManager.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_physics_manager_8h" kindref="compound">Physics/PhysicsManager.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_render_manager_8h" kindref="compound">Render/RenderManager.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_input_manager_8h" kindref="compound">Input/InputManager.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_scene_manager_8h" kindref="compound">EntityComponent/SceneManager.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_scene_8h" kindref="compound">EntityComponent/Scene.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_window_8h" kindref="compound">Render/Window.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>---<sp/>Components</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_components_factory_8h" kindref="compound">EntityComponent/Components/ComponentsFactory.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_factory_component_8h" kindref="compound">EntityComponent/Components/FactoryComponent.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>---<sp/>Utils</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_time_8h" kindref="compound">Utils/Time.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>---<sp/>SDL3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;SDL3/SDL_events.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;SDL3/SDL_init.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//typedef<sp/>HRESULT(CALLBACK*<sp/>LPFNDLLFUNC1)(DWORD,<sp/>UINT*);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>(*GameName)();</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>bool(__cdecl*<sp/><ref refid="_motor_engine_8cpp_1a91a26f032ffde5ca7236c176217471bf" kindref="member">GameEntryPoint</ref>)();</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void(*<ref refid="_motor_engine_8cpp_1a30b340f18dcd84e9e59b84a6367ca932" kindref="member">TypeDefinition</ref>)();</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceme" kindref="compound">me</ref>;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classme_1_1_motor_engine_1a147a555b5db9124403dd5065c57a4167" kindref="member">MotorEngine::setup</ref>(std::string<sp/>gameName)</highlight></codeline>
<codeline lineno="34"><highlight class="normal">{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>loadGame(gameName);<sp/></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(game<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_motor_engine_8cpp_1a91a26f032ffde5ca7236c176217471bf" kindref="member">GameEntryPoint</ref><sp/>entryPoint<sp/>=<sp/>(<ref refid="_motor_engine_8cpp_1a91a26f032ffde5ca7236c176217471bf" kindref="member">GameEntryPoint</ref>)GetProcAddress(game,<sp/></highlight><highlight class="stringliteral">&quot;init&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entryPoint<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_motor_engine_8cpp_1a54df1405e77d85ad756df1f0eaa10180" kindref="member">GameName</ref><sp/>name<sp/>=<sp/>(<ref refid="_motor_engine_8cpp_1a54df1405e77d85ad756df1f0eaa10180" kindref="member">GameName</ref>)GetProcAddress(game,<sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classme_1_1_singleton_1a919633966a5db8336cffa09f28fc2623" kindref="member">Window::init</ref>(SDL_INIT_EVERYTHING,<sp/>name<sp/>==<sp/>NULL<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;Motor<sp/>Engine&quot;</highlight><highlight class="normal"><sp/>:<sp/>name(),<sp/>SDL_WINDOWPOS_UNDEFINED,</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SDL_WINDOWPOS_UNDEFINED,<sp/>854,<sp/>480,<sp/>SDL_WINDOW_INPUT_FOCUS<sp/>|<sp/>SDL_WINDOW_RESIZABLE<sp/>|<sp/>SDL_WINDOW_OPENGL);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Register<sp/>Motor<sp/>Engine&apos;s<sp/>default<sp/>component<sp/>factories</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_motor_engine_8cpp_1a30b340f18dcd84e9e59b84a6367ca932" kindref="member">TypeDefinition</ref><sp/>gameTypesDef<sp/>=<sp/>(<ref refid="_motor_engine_8cpp_1a30b340f18dcd84e9e59b84a6367ca932" kindref="member">TypeDefinition</ref>)GetProcAddress(game,<sp/></highlight><highlight class="stringliteral">&quot;initFactories&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gameTypesDef<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Añadir<sp/>componentes<sp/>del<sp/>juego</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>gameTypesDef();</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Añadir<sp/>componentes<sp/>del<sp/>motor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>initFactories();</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Init<sp/>managers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceme_1a4c5f82cdd874c703ca40fb8fc4336d8d" kindref="member">physicsManager</ref>().<ref refid="classme_1_1_physics_manager_1a5193cc56360379350eecb952d607805d" kindref="member">start</ref>();</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>cam<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;CameraDemo&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceme_1af8da8de4d9ebcdaa653b23af353b5edc" kindref="member">renderManager</ref>().<ref refid="classme_1_1_render_manager_1a178464764e348339c8238b9749fa062a" kindref="member">createCamera</ref>(cam,<sp/>1,<sp/>10000,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>0,<sp/>Ogre::ColourValue(0,<sp/>0,<sp/>0.5));</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceme_1af8da8de4d9ebcdaa653b23af353b5edc" kindref="member">renderManager</ref>().<ref refid="classme_1_1_render_manager_1a6fe9e6d618c9e37586a9c3ee59ece096" kindref="member">setCameraInfo</ref>(cam,<sp/><ref refid="class_ogre_1_1_vector" kindref="compound">Ogre::Vector3f</ref>(0,<sp/>0.45,<sp/>-0.8),<sp/><ref refid="class_ogre_1_1_vector" kindref="compound">Ogre::Vector3f</ref>(-1000,<sp/>0,<sp/>0));</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceme_1af8da8de4d9ebcdaa653b23af353b5edc" kindref="member">renderManager</ref>().<ref refid="classme_1_1_render_manager_1a1d03ebb0bd03b0ab64d8313e58f6ff43" kindref="member">createNewLight</ref>(</highlight><highlight class="stringliteral">&quot;luz&quot;</highlight><highlight class="normal">,<sp/><ref refid="class_ogre_1_1_vector" kindref="compound">Ogre::Vector3f</ref>(0,<sp/>500,<sp/>500),<sp/><ref refid="class_ogre_1_1_vector" kindref="compound">Ogre::Vector3f</ref>(0,<sp/>-1,<sp/>-1));</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entryPoint();</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classme_1_1_motor_engine_1a0c14616b91b39841ea62594ab6503a61" kindref="member">MotorEngine::loop</ref>()</highlight></codeline>
<codeline lineno="72"><highlight class="normal">{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/><sp/><sp/><sp/>Init<sp/>Utils</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>timeUtils<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_time" kindref="compound">Time</ref>();</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/><sp/><sp/><sp/>Physics<sp/>are<sp/>calculated<sp/>every<sp/>0.02<sp/>seconds<sp/>(Fixed<sp/>Update)<sp/>while<sp/>the<sp/>rest<sp/>of<sp/>the<sp/>game<sp/>is<sp/>calculated<sp/>depending<sp/>on<sp/>the<sp/>frames<sp/>per<sp/>second</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/><sp/><sp/><sp/>of<sp/>the<sp/>computer</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>pFrameRate<sp/>=<sp/>timeUtils-&gt;<ref refid="class_time_1a879bfedfffe323754165585e85bb1e46" kindref="member">getPhysicsFrameValue</ref>();</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>std::chrono::duration&lt;double&gt;<sp/>pInterval<sp/>=<sp/>std::chrono::duration&lt;double&gt;(1.0<sp/>/<sp/>pFrameRate);<sp/></highlight><highlight class="comment">//<sp/>-&gt;<sp/>1<sp/>/<sp/>50</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>Two<sp/>clocks<sp/>that<sp/>are<sp/>used<sp/>to<sp/>calculate<sp/>time<sp/>between<sp/>frames</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>std::chrono::steady_clock::time_point<sp/>lastTick<sp/>=<sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>std::chrono::steady_clock::time_point<sp/>lastPhysicsTick<sp/>=<sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>Used<sp/>to<sp/>calculate<sp/>Delta<sp/>Time<sp/>and<sp/>Fixed<sp/>Delta<sp/>Time</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>std::chrono::duration&lt;double&gt;<sp/>dtAccum<sp/>=<sp/>std::chrono::duration&lt;double&gt;();</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>std::chrono::duration&lt;double&gt;<sp/>dt<sp/>=<sp/>std::chrono::duration&lt;double&gt;();</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>std::chrono::duration&lt;double&gt;<sp/>fixedDt<sp/>=<sp/>std::chrono::duration&lt;double&gt;();</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>FrameRate<sp/>counter</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>std::chrono::duration&lt;double&gt;<sp/>timer<sp/>=<sp/>std::chrono::duration&lt;double&gt;();</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>frameCounter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fpsValue<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceme_1acac54ce3805b69e3433ac8712a35450c" kindref="member">sceneManager</ref>().<ref refid="classme_1_1_scene_manager_1adb934d5cbbe79b5dd01eb6f7a8036561" kindref="member">getActiveScene</ref>().get()-&gt;processNewEntities();</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceme_1acac54ce3805b69e3433ac8712a35450c" kindref="member">sceneManager</ref>().<ref refid="classme_1_1_scene_manager_1adb934d5cbbe79b5dd01eb6f7a8036561" kindref="member">getActiveScene</ref>().get()-&gt;start();</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_button_8h_1a33fcc6aa445cb781bfca881e39e5333e" kindref="member">SDL_Event</ref><sp/>event;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>quit<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceme_1afd92726e761ee88a793af225d8f55d7a" kindref="member">inputManager</ref>().<ref refid="classme_1_1_input_manager_1a26f5a6fb4c432d00040156e45853cf98" kindref="member">addEvent</ref>(quitLoop,<sp/>&amp;quit);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!quit)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(SDL_PollEvent(&amp;event))<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Update<sp/>the<sp/>new<sp/>frames<sp/>values</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dt<sp/>=<sp/>std::chrono::high_resolution_clock::now()<sp/>-<sp/>lastTick;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timer<sp/>+=<sp/>dt;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeUtils-&gt;<ref refid="class_time_1ac80d4360b9928730fb071843f2e387e2" kindref="member">deltaTime</ref><sp/>=<sp/>dt.count();</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frameCounter++;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(timer.count()<sp/>&gt;<sp/>1.0)<sp/>{<sp/></highlight><highlight class="comment">//every<sp/>second</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fpsValue<sp/>=<sp/>frameCounter<sp/>/<sp/>1000;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeUtils-&gt;<ref refid="class_time_1a561b4617629ba2326030e6c4ba4390bd" kindref="member">currentFPSValue</ref><sp/>=<sp/>fpsValue;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;FPS:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>timeUtils-&gt;<ref refid="class_time_1a561b4617629ba2326030e6c4ba4390bd" kindref="member">currentFPSValue</ref><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frameCounter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timer<sp/>=<sp/>std::chrono::duration&lt;double&gt;();</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Update<sp/>the<sp/>scene</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceme_1acac54ce3805b69e3433ac8712a35450c" kindref="member">sceneManager</ref>().<ref refid="classme_1_1_scene_manager_1aed9f90a7c28962042c37ad66a9d60d61" kindref="member">update</ref>();</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Update<sp/>physics</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dtAccum<sp/>+=<sp/>dt;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceme_1a4c5f82cdd874c703ca40fb8fc4336d8d" kindref="member">physicsManager</ref>().<ref refid="classme_1_1_physics_manager_1a6c899ac34fc670d38f6d3c6809eed3d9" kindref="member">update</ref>(0.016);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dtAccum<sp/>&gt;=<sp/>pInterval)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Limitado<sp/>a<sp/>50<sp/>fps</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fixedDt<sp/>=<sp/>std::chrono::high_resolution_clock::now()<sp/>-<sp/>lastPhysicsTick;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeUtils-&gt;<ref refid="class_time_1a392f74c55779960792e13a71564b921c" kindref="member">fixedDeltaTime</ref><sp/>=<sp/>fixedDt.count();</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dtAccum<sp/>=<sp/>std::chrono::duration&lt;double&gt;();</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastPhysicsTick<sp/>=<sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Render<sp/>the<sp/>scene</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceme_1af8da8de4d9ebcdaa653b23af353b5edc" kindref="member">renderManager</ref>().<ref refid="classme_1_1_render_manager_1a7b55b3550af4f044f269817de60bb3c6" kindref="member">render</ref>();</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastTick<sp/>=<sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classme_1_1_motor_engine_1a2fa0f6a7710153ac3b9caa8dad206839" kindref="member">MotorEngine::exit</ref>()</highlight></codeline>
<codeline lineno="165"><highlight class="normal">{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/><sp/><sp/><sp/>Clear<sp/>the<sp/>memory<sp/>created<sp/>in<sp/>the<sp/>execution<sp/>of<sp/>the<sp/>program</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>FreeLibrary(game);</highlight></codeline>
<codeline lineno="171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MotorEngine::loadGame(std::string<sp/>gameDllName)</highlight></codeline>
<codeline lineno="174"><highlight class="normal">{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>gameDllName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;./&quot;</highlight><highlight class="normal"><sp/>+<sp/>gameDllName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_d.dll&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>gameDllName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;./&quot;</highlight><highlight class="normal"><sp/>+<sp/>gameDllName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.dll&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Convert<sp/>to<sp/>Windows<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length<sp/>=<sp/>gameDllName.length();</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>wtext<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">[length<sp/>*<sp/>2];</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>pReturnValue<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>size_t();</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>mbstowcs_s(pReturnValue,<sp/>wtext,<sp/>length<sp/>*<sp/>2,<sp/>gameDllName.c_str(),<sp/>length);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>game<sp/>=<sp/>LoadLibrary(wtext);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>pReturnValue;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>wtext;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>game<sp/>!=<sp/>NULL;</highlight></codeline>
<codeline lineno="194"><highlight class="normal">}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>me::MotorEngine::initFactories()</highlight></codeline>
<codeline lineno="197"><highlight class="normal">{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceme_1a2b2e5ee03fa025cbc18185e54c865b08" kindref="member">componentsFactory</ref>().<ref refid="classme_1_1_components_factory_1a8e19569e45383a83234dae874ef88f56" kindref="member">addFactoryComponent</ref>(</highlight><highlight class="stringliteral">&quot;transform&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classme_1_1_factory_transform" kindref="compound">FactoryTransform</ref>());</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceme_1a2b2e5ee03fa025cbc18185e54c865b08" kindref="member">componentsFactory</ref>().<ref refid="classme_1_1_components_factory_1a8e19569e45383a83234dae874ef88f56" kindref="member">addFactoryComponent</ref>(</highlight><highlight class="stringliteral">&quot;rigidbody&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classme_1_1_factory_rigid_body" kindref="compound">FactoryRigidBody</ref>());</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceme_1a2b2e5ee03fa025cbc18185e54c865b08" kindref="member">componentsFactory</ref>().<ref refid="classme_1_1_components_factory_1a8e19569e45383a83234dae874ef88f56" kindref="member">addFactoryComponent</ref>(</highlight><highlight class="stringliteral">&quot;animator&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classme_1_1_factory_animator" kindref="compound">FactoryAnimator</ref>());</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceme_1a2b2e5ee03fa025cbc18185e54c865b08" kindref="member">componentsFactory</ref>().<ref refid="classme_1_1_components_factory_1a8e19569e45383a83234dae874ef88f56" kindref="member">addFactoryComponent</ref>(</highlight><highlight class="stringliteral">&quot;meshrenderer&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classme_1_1_factory_mesh_renderer" kindref="compound">FactoryMeshRenderer</ref>());</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceme_1a2b2e5ee03fa025cbc18185e54c865b08" kindref="member">componentsFactory</ref>().<ref refid="classme_1_1_components_factory_1a8e19569e45383a83234dae874ef88f56" kindref="member">addFactoryComponent</ref>(</highlight><highlight class="stringliteral">&quot;collider&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classme_1_1_factory_collider" kindref="compound">FactoryCollider</ref>());</highlight></codeline>
<codeline lineno="203"><highlight class="normal">}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MotorEngine::quitLoop(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>userdata,<sp/><ref refid="_button_8h_1a33fcc6aa445cb781bfca881e39e5333e" kindref="member">SDL_Event</ref>*<sp/>event)</highlight></codeline>
<codeline lineno="206"><highlight class="normal">{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(event-&gt;type<sp/>==<sp/>SDL_EVENT_QUIT<sp/>||<sp/>(event-&gt;type<sp/>==<sp/>SDL_EVENT_KEY_DOWN<sp/>&amp;&amp;<sp/>event-&gt;key.keysym.sym<sp/>==<sp/>SDLK_ESCAPE))<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>quit<sp/>=<sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*)userdata;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*quit<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;MotorEngine<sp/>quitting...\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><ref refid="classme_1_1_motor_engine_1a82c5f33e6397046f65117b5897c01f9d" kindref="member">MotorEngine::MotorEngine</ref>()<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal">}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><ref refid="classme_1_1_motor_engine_1ab4e97a750c7ed94386edfe8f280a08d3" kindref="member">MotorEngine::~MotorEngine</ref>()</highlight></codeline>
<codeline lineno="223"><highlight class="normal">{</highlight></codeline>
<codeline lineno="224"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="Src/MotorEngine/MotorEngine.cpp"/>
  </compounddef>
</doxygen>
