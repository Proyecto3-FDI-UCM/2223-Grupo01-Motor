<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classme_1_1_singleton" kind="class" language="C++" prot="public">
    <compoundname>me::Singleton</compoundname>
    <includes refid="_singleton_8h" local="no">Singleton.h</includes>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classme_1_1_singleton_1af4704dfb44eb87ba430dca8544fc51e9" prot="private" static="yes" mutable="no">
        <type>std::unique_ptr&lt; T &gt;</type>
        <definition>std::unique_ptr&lt; T &gt; me::Singleton&lt; T &gt;::mInstance</definition>
        <argsstring></argsstring>
        <name>mInstance</name>
        <qualifiedname>me::Singleton::mInstance</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Utils/Singleton.h" line="26" column="24" bodyfile="Src/Utils/Singleton.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classme_1_1_singleton_1af5127d54d6c6904173541b404903b599" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>me::Singleton&lt; T &gt;::Singleton</definition>
        <argsstring>()</argsstring>
        <name>Singleton</name>
        <qualifiedname>me::Singleton::Singleton</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Utils/Singleton.h" line="29" column="1" bodyfile="Src/Utils/Singleton.h" bodystart="29" bodyend="29"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classme_1_1_singleton_1a6745ba60837f9347a75c0cfc27fadfb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classme_1_1_singleton" kindref="compound">Singleton</ref>&lt; T &gt; &amp;</type>
        <definition>Singleton&lt; T &gt; &amp; me::Singleton&lt; T &gt;::operator=</definition>
        <argsstring>(const Singleton&lt; T &gt; &amp;o)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>me::Singleton::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classme_1_1_singleton" kindref="compound">Singleton</ref>&lt; T &gt; &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Utils/Singleton.h" line="32" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_singleton_1a70f85c079fd020a8655eed54e7189845" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>me::Singleton&lt; T &gt;::Singleton</definition>
        <argsstring>(const Singleton&lt; T &gt; &amp;o)=delete</argsstring>
        <name>Singleton</name>
        <qualifiedname>me::Singleton::Singleton</qualifiedname>
        <param>
          <type>const <ref refid="classme_1_1_singleton" kindref="compound">Singleton</ref>&lt; T &gt; &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Utils/Singleton.h" line="33" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_singleton_1a576834dfbf95c3b929511d2a588866d1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual me::Singleton&lt; T &gt;::~Singleton</definition>
        <argsstring>()</argsstring>
        <name>~Singleton</name>
        <qualifiedname>me::Singleton::~Singleton</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Utils/Singleton.h" line="34" column="9" bodyfile="Src/Utils/Singleton.h" bodystart="34" bodyend="34"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classme_1_1_singleton_1a919633966a5db8336cffa09f28fc2623" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ...</type>
            <declname>Targs</declname>
            <defname>Targs</defname>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>static T * me::Singleton&lt; T &gt;::init</definition>
        <argsstring>(Targs &amp;&amp;...args)</argsstring>
        <name>init</name>
        <qualifiedname>me::Singleton::init</qualifiedname>
        <param>
          <type>Targs &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructs the instance of class T. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Arguments</parametername>
</parameternamelist>
<parameterdescription>
<para>to pass to class T constructor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Utils/Singleton.h" line="41" column="10" bodyfile="Src/Utils/Singleton.h" bodystart="41" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_singleton_1a8810aab25f6fdc043bfac52761a9a260" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T *</type>
        <definition>static T * me::Singleton&lt; T &gt;::instance</definition>
        <argsstring>()</argsstring>
        <name>instance</name>
        <qualifiedname>me::Singleton::instance</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the class T instance. If it does not exits, creates it with the default constructor and returns it. <simplesect kind="return"><para>Reference to the only instance of class T. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Utils/Singleton.h" line="59" column="10" bodyfile="Src/Utils/Singleton.h" bodystart="59" bodyend="63"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Ensures there is only one instance of a class, and offers global access to it. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>is the class made a singleton </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <location file="Src/Utils/Singleton.h" line="23" column="1" bodyfile="Src/Utils/Singleton.h" bodystart="23" bodyend="64"/>
    <listofallmembers>
      <member refid="classme_1_1_singleton_1a919633966a5db8336cffa09f28fc2623" prot="public" virt="non-virtual"><scope>me::Singleton</scope><name>init</name></member>
      <member refid="classme_1_1_singleton_1a8810aab25f6fdc043bfac52761a9a260" prot="public" virt="non-virtual"><scope>me::Singleton</scope><name>instance</name></member>
      <member refid="classme_1_1_singleton_1af4704dfb44eb87ba430dca8544fc51e9" prot="private" virt="non-virtual"><scope>me::Singleton</scope><name>mInstance</name></member>
      <member refid="classme_1_1_singleton_1a6745ba60837f9347a75c0cfc27fadfb0" prot="public" virt="non-virtual"><scope>me::Singleton</scope><name>operator=</name></member>
      <member refid="classme_1_1_singleton_1af5127d54d6c6904173541b404903b599" prot="protected" virt="non-virtual"><scope>me::Singleton</scope><name>Singleton</name></member>
      <member refid="classme_1_1_singleton_1a70f85c079fd020a8655eed54e7189845" prot="public" virt="non-virtual"><scope>me::Singleton</scope><name>Singleton</name></member>
      <member refid="classme_1_1_singleton_1a576834dfbf95c3b929511d2a588866d1" prot="public" virt="virtual"><scope>me::Singleton</scope><name>~Singleton</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
