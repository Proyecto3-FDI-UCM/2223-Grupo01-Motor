<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classme_1_1_sound_manager" kind="class" language="C++" prot="public">
    <compoundname>me::SoundManager</compoundname>
    <basecompoundref refid="classme_1_1_singleton" prot="public" virt="non-virtual">me::Singleton&lt; SoundManager &gt;</basecompoundref>
    <includes refid="_sound_manager_8h" local="no">SoundManager.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classme_1_1_sound_manager_1a87f75e8948499153ffb1914c0a19cfe9" prot="private" static="no" mutable="no">
        <type>friend</type>
        <definition>friend me::SoundManager::Singleton&lt; SoundManager &gt;</definition>
        <argsstring></argsstring>
        <name>Singleton&lt; SoundManager &gt;</name>
        <qualifiedname>me::SoundManager::Singleton&lt; SoundManager &gt;</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Audio/SoundManager.h" line="41" column="1" bodyfile="Src/Audio/SoundManager.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classme_1_1_sound_manager_1a83c46f002094395d4a1ce3a3f48ed114" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; std::string, FMOD::Sound * &gt;</type>
        <definition>std::unordered_map&lt;std::string, FMOD::Sound*&gt; me::SoundManager::mSoundsMap</definition>
        <argsstring></argsstring>
        <name>mSoundsMap</name>
        <qualifiedname>me::SoundManager::mSoundsMap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Audio/SoundManager.h" line="44" column="20" bodyfile="Src/Audio/SoundManager.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classme_1_1_sound_manager_1ae73ee6635cc88fa86c53552f6af09d54" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; FMOD::Sound *, <ref refid="_sound_manager_8h_1ae3f91b6700d531ec62e89650ab25b9e6" kindref="member">CHANNEL_NUMBER</ref> &gt;</type>
        <definition>std::unordered_map&lt;FMOD::Sound*,CHANNEL_NUMBER&gt; me::SoundManager::mLastPlayedMap</definition>
        <argsstring></argsstring>
        <name>mLastPlayedMap</name>
        <qualifiedname>me::SoundManager::mLastPlayedMap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Audio/SoundManager.h" line="46" column="20" bodyfile="Src/Audio/SoundManager.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classme_1_1_sound_manager_1a97ad61e622b2c9dfb1298c66053125ea" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; std::string, FMOD::ChannelGroup * &gt;</type>
        <definition>std::unordered_map&lt;std::string, FMOD::ChannelGroup*&gt; me::SoundManager::mChannelGroupMaps</definition>
        <argsstring></argsstring>
        <name>mChannelGroupMaps</name>
        <qualifiedname>me::SoundManager::mChannelGroupMaps</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Audio/SoundManager.h" line="48" column="20" bodyfile="Src/Audio/SoundManager.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classme_1_1_sound_manager_1a173cac3a2d222e55a6b2fa0cd828e2f2" prot="private" static="no" mutable="no">
        <type>std::vector&lt; FMOD::Channel * &gt;</type>
        <definition>std::vector&lt;FMOD::Channel*&gt; me::SoundManager::mChannelsVector</definition>
        <argsstring></argsstring>
        <name>mChannelsVector</name>
        <qualifiedname>me::SoundManager::mChannelsVector</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Audio/SoundManager.h" line="50" column="13" bodyfile="Src/Audio/SoundManager.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classme_1_1_sound_manager_1a643ed5295cfd5f02de016579be75a287" prot="private" static="no" mutable="no">
        <type>FMOD::ChannelGroup *</type>
        <definition>FMOD::ChannelGroup* me::SoundManager::mEffects</definition>
        <argsstring></argsstring>
        <name>mEffects</name>
        <qualifiedname>me::SoundManager::mEffects</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Audio/SoundManager.h" line="52" column="20" bodyfile="Src/Audio/SoundManager.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classme_1_1_sound_manager_1a80f21de9d69159facff7de77161e9b14" prot="private" static="no" mutable="no">
        <type>FMOD::ChannelGroup *</type>
        <definition>FMOD::ChannelGroup * me::SoundManager::mMusic</definition>
        <argsstring></argsstring>
        <name>mMusic</name>
        <qualifiedname>me::SoundManager::mMusic</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Audio/SoundManager.h" line="52" column="30" bodyfile="Src/Audio/SoundManager.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classme_1_1_sound_manager_1a85d3c8864de18070a140ef5c250e0c6e" prot="private" static="no" mutable="no">
        <type>FMOD::ChannelGroup *</type>
        <definition>FMOD::ChannelGroup * me::SoundManager::mMaster</definition>
        <argsstring></argsstring>
        <name>mMaster</name>
        <qualifiedname>me::SoundManager::mMaster</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Audio/SoundManager.h" line="52" column="37" bodyfile="Src/Audio/SoundManager.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classme_1_1_sound_manager_1adbf4d711e7cb8dd63ce37cb6e326e7d4" prot="private" static="no" mutable="no">
        <type>std::vector&lt; bool &gt;</type>
        <definition>std::vector&lt;bool&gt; me::SoundManager::mListeners</definition>
        <argsstring></argsstring>
        <name>mListeners</name>
        <qualifiedname>me::SoundManager::mListeners</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Audio/SoundManager.h" line="53" column="13" bodyfile="Src/Audio/SoundManager.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classme_1_1_sound_manager_1ab9a630b738674512c6548b5c1bf006a5" prot="private" static="no" mutable="no">
        <type>FMOD::System *</type>
        <definition>FMOD::System* me::SoundManager::mSoundSystem</definition>
        <argsstring></argsstring>
        <name>mSoundSystem</name>
        <qualifiedname>me::SoundManager::mSoundSystem</qualifiedname>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Audio/SoundManager.h" line="55" column="14" bodyfile="Src/Audio/SoundManager.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classme_1_1_sound_manager_1a1f7261d900e67f0a50f915ba670be44c" prot="private" static="no" mutable="no">
        <type>FMOD_RESULT</type>
        <definition>FMOD_RESULT me::SoundManager::mResult</definition>
        <argsstring></argsstring>
        <name>mResult</name>
        <qualifiedname>me::SoundManager::mResult</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Audio/SoundManager.h" line="99" column="13" bodyfile="Src/Audio/SoundManager.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classme_1_1_sound_manager_1aa42b4c042edc734bfa64830001a96077" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>me::SoundManager::SoundManager</definition>
        <argsstring>()</argsstring>
        <name>SoundManager</name>
        <qualifiedname>me::SoundManager::SoundManager</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Audio/SoundManager.h" line="42" column="1" bodyfile="Src/Audio/SoundManager.cpp" bodystart="6" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_sound_manager_1a9b116ff0dc1116b3cb7f7716e41f365b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool me::SoundManager::checkFMODResult</definition>
        <argsstring>(FMOD_RESULT FMODResult)</argsstring>
        <name>checkFMODResult</name>
        <qualifiedname>me::SoundManager::checkFMODResult</qualifiedname>
        <param>
          <type>FMOD_RESULT</type>
          <declname>FMODResult</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Chech if the result of any FMOD-related action is without any error. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>FMODResult</parametername>
</parameternamelist>
<parameterdescription>
<para>a flag that shows if there has been an error </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A boolean representing whether there was an error or not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Audio/SoundManager.h" line="62" column="6" bodyfile="Src/Audio/SoundManager.cpp" bodystart="31" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_sound_manager_1a09759e79d44db5a9093371999d752fde" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FMOD::Sound *</type>
        <definition>FMOD::Sound * me::SoundManager::getSound</definition>
        <argsstring>(std::string soundName)</argsstring>
        <name>getSound</name>
        <qualifiedname>me::SoundManager::getSound</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>soundName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets a sound handle via the name of the sound. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>soundName</parametername>
</parameternamelist>
<parameterdescription>
<para>: the name of the sound linked to a channek needed to look for a certain channel. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Nullptr if there is no sound with that given name. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Audio/SoundManager.h" line="69" column="13" bodyfile="Src/Audio/SoundManager.cpp" bodystart="44" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_sound_manager_1a8e1b4997313beab092cede9948d64de9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FMOD::Channel *</type>
        <definition>FMOD::Channel * me::SoundManager::getChannel</definition>
        <argsstring>(std::string soundName)</argsstring>
        <name>getChannel</name>
        <qualifiedname>me::SoundManager::getChannel</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>soundName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets a channel handle via the sound that was last played on it. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>soundName</parametername>
</parameternamelist>
<parameterdescription>
<para>: the name of the sound linked to a channel needed to look for a certain channel. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Nullptr if there is no such channel or the correspondent channel. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Audio/SoundManager.h" line="76" column="15" bodyfile="Src/Audio/SoundManager.cpp" bodystart="52" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_sound_manager_1a3cd019bb81f50a89c3422c545521adef" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FMOD::ChannelGroup *</type>
        <definition>FMOD::ChannelGroup * me::SoundManager::getGroupChannel</definition>
        <argsstring>(std::string channelGroupName)</argsstring>
        <name>getGroupChannel</name>
        <qualifiedname>me::SoundManager::getGroupChannel</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>channelGroupName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets a group channel handle via the name it was created with. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>groupName</parametername>
</parameternamelist>
<parameterdescription>
<para>: the name of the group channel. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Nullptr if there is no such group channel or the correspondent group channel. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Audio/SoundManager.h" line="83" column="20" bodyfile="Src/Audio/SoundManager.cpp" bodystart="66" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_sound_manager_1a5ff3e97315b84bafd3cf15c4249f1676" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool me::SoundManager::changeChannelVolume</definition>
        <argsstring>(std::string channelGroupName, float volume)</argsstring>
        <name>changeChannelVolume</name>
        <qualifiedname>me::SoundManager::changeChannelVolume</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>channelGroupName</declname>
        </param>
        <param>
          <type>float</type>
          <declname>volume</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Changes the volume of a channel. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>groupName</parametername>
</parameternamelist>
<parameterdescription>
<para>: the name of the group channel which volume will be changed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>volume</parametername>
</parameternamelist>
<parameterdescription>
<para>: the new value the volume will have now. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>False if there is no such channel os ir an <ref refid="namespace_f_m_o_d" kindref="compound">FMOD</ref> error, true if the volume is changed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Audio/SoundManager.h" line="91" column="6" bodyfile="Src/Audio/SoundManager.cpp" bodystart="74" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_sound_manager_1a04d1be642edd83459b0f1d9f7e05c417" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void me::SoundManager::nameToLower</definition>
        <argsstring>(std::string &amp;name)</argsstring>
        <name>nameToLower</name>
        <qualifiedname>me::SoundManager::nameToLower</qualifiedname>
        <param>
          <type>std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Makes sure the sound name is in all lower case with no spaces. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>: the name to change. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Audio/SoundManager.h" line="97" column="6" bodyfile="Src/Audio/SoundManager.cpp" bodystart="83" bodyend="88"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classme_1_1_sound_manager_1afc245c5926bb7220f96e9b2423abdccc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void me::SoundManager::systemRefresh</definition>
        <argsstring>()</argsstring>
        <name>systemRefresh</name>
        <qualifiedname>me::SoundManager::systemRefresh</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Updates the sound system every step of the game loop. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Audio/SoundManager.h" line="105" column="6" bodyfile="Src/Audio/SoundManager.cpp" bodystart="90" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_sound_manager_1a3141d0d6d213e4869cb9eb03a2143a02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool me::SoundManager::create3DSound</definition>
        <argsstring>(const char *soundPath, std::string soundName, float minDistance, float maxDistance)</argsstring>
        <name>create3DSound</name>
        <qualifiedname>me::SoundManager::create3DSound</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>soundPath</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>soundName</declname>
        </param>
        <param>
          <type>float</type>
          <declname>minDistance</declname>
        </param>
        <param>
          <type>float</type>
          <declname>maxDistance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a 3D sound. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>soundPath</parametername>
</parameternamelist>
<parameterdescription>
<para>: relative path to the sound that will be loaded in the sound handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>soundName</parametername>
</parameternamelist>
<parameterdescription>
<para>: the especific name of the sound which mode will be changed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>minDistance</parametername>
</parameternamelist>
<parameterdescription>
<para>: minimum audible distance for a 3D sound. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxDistance</parametername>
</parameternamelist>
<parameterdescription>
<para>: maximum audible distance for a 3D sound. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A boolean representing whether or not a the sound was created. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Audio/SoundManager.h" line="114" column="6" bodyfile="Src/Audio/SoundManager.cpp" bodystart="99" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_sound_manager_1a0bb521cbfa59616365a33db702790c6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool me::SoundManager::createNormalSound</definition>
        <argsstring>(const char *soundPath, std::string soundName)</argsstring>
        <name>createNormalSound</name>
        <qualifiedname>me::SoundManager::createNormalSound</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>soundPath</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>soundName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a normal sound. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>soundPath</parametername>
</parameternamelist>
<parameterdescription>
<para>: relative path to the sound that will be loaded in the sound handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>soundName</parametername>
</parameternamelist>
<parameterdescription>
<para>: the especific name of the sound which mode will be changed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A boolean representing whether or not a the sound was created. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Audio/SoundManager.h" line="121" column="6" bodyfile="Src/Audio/SoundManager.cpp" bodystart="127" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_sound_manager_1afd52cef648f883f140ecdf503bf50cc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool me::SoundManager::setSpeed</definition>
        <argsstring>(std::string soundName, float newSpeed)</argsstring>
        <name>setSpeed</name>
        <qualifiedname>me::SoundManager::setSpeed</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>soundName</declname>
        </param>
        <param>
          <type>float</type>
          <declname>newSpeed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the speed a certain sound wil be played at. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>soundName</parametername>
</parameternamelist>
<parameterdescription>
<para>: the especific name of the sound which speed will be changed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newSpeed</parametername>
</parameternamelist>
<parameterdescription>
<para>: the new value the sound will be played at. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A boolean showing wether or not the speed was changed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Audio/SoundManager.h" line="128" column="6" bodyfile="Src/Audio/SoundManager.cpp" bodystart="242" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_sound_manager_1a6a5fe4cec8ec72e7b5acce74475d3396" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool me::SoundManager::setMode</definition>
        <argsstring>(std::string soundName, FMOD_MODE newMode)</argsstring>
        <name>setMode</name>
        <qualifiedname>me::SoundManager::setMode</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>soundName</declname>
        </param>
        <param>
          <type><ref refid="_sound_manager_8h_1ab817628375dd23c707108f7d9fd302ca" kindref="member">FMOD_MODE</ref></type>
          <declname>newMode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the mode of a certain sound. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>soundName</parametername>
</parameternamelist>
<parameterdescription>
<para>: the especific name of the sound which mode will be changed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newMode</parametername>
</parameternamelist>
<parameterdescription>
<para>the new flag the sound will be changed to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A boolean showing wether or not the mode was set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Audio/SoundManager.h" line="135" column="6" bodyfile="Src/Audio/SoundManager.cpp" bodystart="253" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_sound_manager_1a8889e16fb53250251a659d5742a29b1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool me::SoundManager::createChannelGroup</definition>
        <argsstring>(std::string groupName)</argsstring>
        <name>createChannelGroup</name>
        <qualifiedname>me::SoundManager::createChannelGroup</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>groupName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a channel group if a channel with the same name doesn&apos;t already exists. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newChannelGroup</parametername>
</parameternamelist>
<parameterdescription>
<para>: the name for the new channel group. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A boolean representing whether or not a new channel was indeed created. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Audio/SoundManager.h" line="141" column="6" bodyfile="Src/Audio/SoundManager.cpp" bodystart="263" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_sound_manager_1a70964114d6b76ca12ce5e457caacf74e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool me::SoundManager::setChannelVolume</definition>
        <argsstring>(std::string groupName, float newVolume)</argsstring>
        <name>setChannelVolume</name>
        <qualifiedname>me::SoundManager::setChannelVolume</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>groupName</declname>
        </param>
        <param>
          <type>float</type>
          <declname>newVolume</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Changes the volume of a certain group channel if it exists. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>groupName</parametername>
</parameternamelist>
<parameterdescription>
<para>: the name of the channel group. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newVolume</parametername>
</parameternamelist>
<parameterdescription>
<para>: the volume value the group channel will be changed to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A boolean representing whether or not a the volume was changed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Audio/SoundManager.h" line="148" column="6" bodyfile="Src/Audio/SoundManager.cpp" bodystart="280" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_sound_manager_1a8b5c1b4fab4ba23443bce940b8939794" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool me::SoundManager::setVolume</definition>
        <argsstring>(std::string soundName, float newVolume)</argsstring>
        <name>setVolume</name>
        <qualifiedname>me::SoundManager::setVolume</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>soundName</declname>
        </param>
        <param>
          <type>float</type>
          <declname>newVolume</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Changes the volume of a certain channel if it exists. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>soundName</parametername>
</parameternamelist>
<parameterdescription>
<para>: the especific name of the sound which volume will be changed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newVolume</parametername>
</parameternamelist>
<parameterdescription>
<para>: the volume value the channel will be changed to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A boolean representing wether or not the volume was changed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Audio/SoundManager.h" line="155" column="6" bodyfile="Src/Audio/SoundManager.cpp" bodystart="293" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_sound_manager_1a9c0b431d92b944f0a1e79cfc24915a39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float me::SoundManager::getVolume</definition>
        <argsstring>(std::string soundName)</argsstring>
        <name>getVolume</name>
        <qualifiedname>me::SoundManager::getVolume</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>soundName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Checks the volume of a certain channel if it exists. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>soundName</parametername>
</parameternamelist>
<parameterdescription>
<para>: the especific name of the sound which speed will be changed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The specific float of the volume. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Audio/SoundManager.h" line="162" column="7" bodyfile="Src/Audio/SoundManager.cpp" bodystart="306" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_sound_manager_1a7b71e6f378405d67ca184444c6e1c936" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool me::SoundManager::pauseSound</definition>
        <argsstring>(std::string soundName, bool pause)</argsstring>
        <name>pauseSound</name>
        <qualifiedname>me::SoundManager::pauseSound</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>soundName</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>pause</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Looks for a sound channel and in case that it exists, sets the pause state of that channel to &quot;pause&quot;. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>soundName</parametername>
</parameternamelist>
<parameterdescription>
<para>: the especific name of the sound which speed will be paused. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pause</parametername>
</parameternamelist>
<parameterdescription>
<para>: the new pause value the channel will get. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the sound is pauded, false if the sound didn&apos;t exist. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Audio/SoundManager.h" line="170" column="6" bodyfile="Src/Audio/SoundManager.cpp" bodystart="149" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_sound_manager_1a673e40d5edd145f89730bf35e3da085b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool me::SoundManager::playSound</definition>
        <argsstring>(std::string soundName, bool isLoop, const char *channelGroup, FMOD_VECTOR *channelPos, FMOD_VECTOR *channelVel, int timesLooped)</argsstring>
        <name>playSound</name>
        <qualifiedname>me::SoundManager::playSound</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>soundName</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isLoop</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>channelGroup</declname>
        </param>
        <param>
          <type>FMOD_VECTOR *</type>
          <declname>channelPos</declname>
        </param>
        <param>
          <type>FMOD_VECTOR *</type>
          <declname>channelVel</declname>
        </param>
        <param>
          <type>int</type>
          <declname>timesLooped</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the loopability of a certain sound dependind on &quot;isLoop&quot;. It checks for available channels to play the sound and assigns a group channel depending on the user input. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>soundName</parametername>
</parameternamelist>
<parameterdescription>
<para>: the especific name of the sound which will be played. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isLoop</parametername>
</parameternamelist>
<parameterdescription>
<para>: the value of loopability that will be used to play the sound. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channelGroup</parametername>
</parameternamelist>
<parameterdescription>
<para>: the channel group where the sound will played on. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channelPos</parametername>
</parameternamelist>
<parameterdescription>
<para>: the channel&apos;s position used for panning and attenuation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channelVel</parametername>
</parameternamelist>
<parameterdescription>
<para>: the channel&apos; group where the sound will played on&apos;s velocity in 3D space used for doppler. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timesLooped</parametername>
</parameternamelist>
<parameterdescription>
<para>: the number of times the sound will be looped. By default it is set to constant loop. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A boolean showing whether or not a channel group was found to play the sound. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Audio/SoundManager.h" line="183" column="6" bodyfile="Src/Audio/SoundManager.cpp" bodystart="166" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_sound_manager_1a0f475e7e7f54957100b6fe59c1454e29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool me::SoundManager::deleteSound</definition>
        <argsstring>(std::string soundName)</argsstring>
        <name>deleteSound</name>
        <qualifiedname>me::SoundManager::deleteSound</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>soundName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Releases the dynamic memory created on runtime when creating new sounds. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>soundName</parametername>
</parameternamelist>
<parameterdescription>
<para>: the especific name of the sound which speed will be changed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A boolean showing wether or not the sound was eliminated. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Audio/SoundManager.h" line="189" column="6" bodyfile="Src/Audio/SoundManager.cpp" bodystart="210" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_sound_manager_1af78cde6c156326cec930337d6f886a1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void me::SoundManager::updateListenersPosition</definition>
        <argsstring>(int index, Vector3 listenerPos, Vector3 listenerFW, Vector3 listenerUP, Vector3 listenerVel={ 0, 0, 0 })</argsstring>
        <name>updateListenersPosition</name>
        <qualifiedname>me::SoundManager::updateListenersPosition</qualifiedname>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="classme_1_1_vector3" kindref="compound">Vector3</ref></type>
          <declname>listenerPos</declname>
        </param>
        <param>
          <type><ref refid="classme_1_1_vector3" kindref="compound">Vector3</ref></type>
          <declname>listenerFW</declname>
        </param>
        <param>
          <type><ref refid="classme_1_1_vector3" kindref="compound">Vector3</ref></type>
          <declname>listenerUP</declname>
        </param>
        <param>
          <type><ref refid="classme_1_1_vector3" kindref="compound">Vector3</ref></type>
          <declname>listenerVel</declname>
          <defval>{ 0, 0, 0 }</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Updates the position of a sound listener relative to a certain sound. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>: the index that refers to a certain listener. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>listenerPos</parametername>
</parameternamelist>
<parameterdescription>
<para>: the position of the listener. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>listenerFW</parametername>
</parameternamelist>
<parameterdescription>
<para>: </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>listenerUP</parametername>
</parameternamelist>
<parameterdescription>
<para>: </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>listenerVel</parametername>
</parameternamelist>
<parameterdescription>
<para>: the velocity of the listener. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Audio/SoundManager.h" line="198" column="6" bodyfile="Src/Audio/SoundManager.cpp" bodystart="223" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_sound_manager_1afff7f6e5fd095e3a411f106b3d74f078" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void me::SoundManager::removeListener</definition>
        <argsstring>(int index)</argsstring>
        <name>removeListener</name>
        <qualifiedname>me::SoundManager::removeListener</qualifiedname>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes the listener from its vector and resets its values. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>: the index that refers to a certain listener. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Audio/SoundManager.h" line="204" column="6" bodyfile="Src/Audio/SoundManager.cpp" bodystart="228" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_sound_manager_1a784b2a3fd06000bf1a135832362fc04e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool me::SoundManager::setSoundPosition</definition>
        <argsstring>(std::string soundName, Vector3 position)</argsstring>
        <name>setSoundPosition</name>
        <qualifiedname>me::SoundManager::setSoundPosition</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>soundName</declname>
        </param>
        <param>
          <type><ref refid="classme_1_1_vector3" kindref="compound">Vector3</ref></type>
          <declname>position</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the global position of a sound i. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>soundName</parametername>
</parameternamelist>
<parameterdescription>
<para>: the especific name of the sound which position will be set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>: the value of the position of the sound. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A boolean showing wether or not the position was set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Audio/SoundManager.h" line="212" column="6" bodyfile="Src/Audio/SoundManager.cpp" bodystart="234" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_sound_manager_1ac6f3c6ec6995394ede2e7217ec7fe160" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int me::SoundManager::getNextUsefulListenerIndex</definition>
        <argsstring>()</argsstring>
        <name>getNextUsefulListenerIndex</name>
        <qualifiedname>me::SoundManager::getNextUsefulListenerIndex</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the useful listener which will be able to listen to a new sound. <simplesect kind="return"><para>A integer showing whether or not a useful listener was found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Audio/SoundManager.h" line="218" column="12" bodyfile="Src/Audio/SoundManager.h" bodystart="218" bodyend="224"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ref refid="classme_1_1_sound_manager" kindref="compound">SoundManager</ref> provides <ref refid="namespace_f_m_o_d" kindref="compound">FMOD</ref> wrappers to manage audio creation and modulation, audio channel and audio channel groups. You can access the <ref refid="classme_1_1_input_manager" kindref="compound">InputManager</ref> calling sm(). </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>me::Singleton&lt; SoundManager &gt;</label>
        <link refid="classme_1_1_singleton"/>
      </node>
      <node id="1">
        <label>me::SoundManager</label>
        <link refid="classme_1_1_sound_manager"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>me::Singleton&lt; SoundManager &gt;</label>
        <link refid="classme_1_1_singleton"/>
      </node>
      <node id="1">
        <label>me::SoundManager</label>
        <link refid="classme_1_1_sound_manager"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="Src/Audio/SoundManager.h" line="39" column="1" bodyfile="Src/Audio/SoundManager.h" bodystart="40" bodyend="227"/>
    <listofallmembers>
      <member refid="classme_1_1_sound_manager_1a5ff3e97315b84bafd3cf15c4249f1676" prot="private" virt="non-virtual"><scope>me::SoundManager</scope><name>changeChannelVolume</name></member>
      <member refid="classme_1_1_sound_manager_1a9b116ff0dc1116b3cb7f7716e41f365b" prot="private" virt="non-virtual"><scope>me::SoundManager</scope><name>checkFMODResult</name></member>
      <member refid="classme_1_1_sound_manager_1a3141d0d6d213e4869cb9eb03a2143a02" prot="public" virt="non-virtual"><scope>me::SoundManager</scope><name>create3DSound</name></member>
      <member refid="classme_1_1_sound_manager_1a8889e16fb53250251a659d5742a29b1c" prot="public" virt="non-virtual"><scope>me::SoundManager</scope><name>createChannelGroup</name></member>
      <member refid="classme_1_1_sound_manager_1a0bb521cbfa59616365a33db702790c6d" prot="public" virt="non-virtual"><scope>me::SoundManager</scope><name>createNormalSound</name></member>
      <member refid="classme_1_1_sound_manager_1a0f475e7e7f54957100b6fe59c1454e29" prot="public" virt="non-virtual"><scope>me::SoundManager</scope><name>deleteSound</name></member>
      <member refid="classme_1_1_sound_manager_1a8e1b4997313beab092cede9948d64de9" prot="private" virt="non-virtual"><scope>me::SoundManager</scope><name>getChannel</name></member>
      <member refid="classme_1_1_sound_manager_1a3cd019bb81f50a89c3422c545521adef" prot="private" virt="non-virtual"><scope>me::SoundManager</scope><name>getGroupChannel</name></member>
      <member refid="classme_1_1_sound_manager_1ac6f3c6ec6995394ede2e7217ec7fe160" prot="public" virt="non-virtual"><scope>me::SoundManager</scope><name>getNextUsefulListenerIndex</name></member>
      <member refid="classme_1_1_sound_manager_1a09759e79d44db5a9093371999d752fde" prot="private" virt="non-virtual"><scope>me::SoundManager</scope><name>getSound</name></member>
      <member refid="classme_1_1_sound_manager_1a9c0b431d92b944f0a1e79cfc24915a39" prot="public" virt="non-virtual"><scope>me::SoundManager</scope><name>getVolume</name></member>
      <member refid="classme_1_1_singleton_1a919633966a5db8336cffa09f28fc2623" prot="public" virt="non-virtual"><scope>me::SoundManager</scope><name>init</name></member>
      <member refid="classme_1_1_singleton_1a8810aab25f6fdc043bfac52761a9a260" prot="public" virt="non-virtual"><scope>me::SoundManager</scope><name>instance</name></member>
      <member refid="classme_1_1_sound_manager_1a97ad61e622b2c9dfb1298c66053125ea" prot="private" virt="non-virtual"><scope>me::SoundManager</scope><name>mChannelGroupMaps</name></member>
      <member refid="classme_1_1_sound_manager_1a173cac3a2d222e55a6b2fa0cd828e2f2" prot="private" virt="non-virtual"><scope>me::SoundManager</scope><name>mChannelsVector</name></member>
      <member refid="classme_1_1_sound_manager_1a643ed5295cfd5f02de016579be75a287" prot="private" virt="non-virtual"><scope>me::SoundManager</scope><name>mEffects</name></member>
      <member refid="classme_1_1_sound_manager_1ae73ee6635cc88fa86c53552f6af09d54" prot="private" virt="non-virtual"><scope>me::SoundManager</scope><name>mLastPlayedMap</name></member>
      <member refid="classme_1_1_sound_manager_1adbf4d711e7cb8dd63ce37cb6e326e7d4" prot="private" virt="non-virtual"><scope>me::SoundManager</scope><name>mListeners</name></member>
      <member refid="classme_1_1_sound_manager_1a85d3c8864de18070a140ef5c250e0c6e" prot="private" virt="non-virtual"><scope>me::SoundManager</scope><name>mMaster</name></member>
      <member refid="classme_1_1_sound_manager_1a80f21de9d69159facff7de77161e9b14" prot="private" virt="non-virtual"><scope>me::SoundManager</scope><name>mMusic</name></member>
      <member refid="classme_1_1_sound_manager_1a1f7261d900e67f0a50f915ba670be44c" prot="private" virt="non-virtual"><scope>me::SoundManager</scope><name>mResult</name></member>
      <member refid="classme_1_1_sound_manager_1a83c46f002094395d4a1ce3a3f48ed114" prot="private" virt="non-virtual"><scope>me::SoundManager</scope><name>mSoundsMap</name></member>
      <member refid="classme_1_1_sound_manager_1ab9a630b738674512c6548b5c1bf006a5" prot="private" virt="non-virtual"><scope>me::SoundManager</scope><name>mSoundSystem</name></member>
      <member refid="classme_1_1_sound_manager_1a04d1be642edd83459b0f1d9f7e05c417" prot="private" virt="non-virtual"><scope>me::SoundManager</scope><name>nameToLower</name></member>
      <member refid="classme_1_1_singleton_1a6745ba60837f9347a75c0cfc27fadfb0" prot="public" virt="non-virtual"><scope>me::SoundManager</scope><name>operator=</name></member>
      <member refid="classme_1_1_sound_manager_1a7b71e6f378405d67ca184444c6e1c936" prot="public" virt="non-virtual"><scope>me::SoundManager</scope><name>pauseSound</name></member>
      <member refid="classme_1_1_sound_manager_1a673e40d5edd145f89730bf35e3da085b" prot="public" virt="non-virtual"><scope>me::SoundManager</scope><name>playSound</name></member>
      <member refid="classme_1_1_sound_manager_1afff7f6e5fd095e3a411f106b3d74f078" prot="public" virt="non-virtual"><scope>me::SoundManager</scope><name>removeListener</name></member>
      <member refid="classme_1_1_sound_manager_1a70964114d6b76ca12ce5e457caacf74e" prot="public" virt="non-virtual"><scope>me::SoundManager</scope><name>setChannelVolume</name></member>
      <member refid="classme_1_1_sound_manager_1a6a5fe4cec8ec72e7b5acce74475d3396" prot="public" virt="non-virtual"><scope>me::SoundManager</scope><name>setMode</name></member>
      <member refid="classme_1_1_sound_manager_1a784b2a3fd06000bf1a135832362fc04e" prot="public" virt="non-virtual"><scope>me::SoundManager</scope><name>setSoundPosition</name></member>
      <member refid="classme_1_1_sound_manager_1afd52cef648f883f140ecdf503bf50cc6" prot="public" virt="non-virtual"><scope>me::SoundManager</scope><name>setSpeed</name></member>
      <member refid="classme_1_1_sound_manager_1a8b5c1b4fab4ba23443bce940b8939794" prot="public" virt="non-virtual"><scope>me::SoundManager</scope><name>setVolume</name></member>
      <member refid="classme_1_1_singleton_1af5127d54d6c6904173541b404903b599" prot="protected" virt="non-virtual"><scope>me::SoundManager</scope><name>Singleton</name></member>
      <member refid="classme_1_1_singleton_1a70f85c079fd020a8655eed54e7189845" prot="public" virt="non-virtual"><scope>me::SoundManager</scope><name>Singleton</name></member>
      <member refid="classme_1_1_sound_manager_1a87f75e8948499153ffb1914c0a19cfe9" prot="private" virt="non-virtual"><scope>me::SoundManager</scope><name>Singleton&lt; SoundManager &gt;</name></member>
      <member refid="classme_1_1_sound_manager_1aa42b4c042edc734bfa64830001a96077" prot="private" virt="non-virtual"><scope>me::SoundManager</scope><name>SoundManager</name></member>
      <member refid="classme_1_1_sound_manager_1afc245c5926bb7220f96e9b2423abdccc" prot="public" virt="non-virtual"><scope>me::SoundManager</scope><name>systemRefresh</name></member>
      <member refid="classme_1_1_sound_manager_1af78cde6c156326cec930337d6f886a1c" prot="public" virt="non-virtual"><scope>me::SoundManager</scope><name>updateListenersPosition</name></member>
      <member refid="classme_1_1_singleton_1a576834dfbf95c3b929511d2a588866d1" prot="public" virt="virtual"><scope>me::SoundManager</scope><name>~Singleton</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
