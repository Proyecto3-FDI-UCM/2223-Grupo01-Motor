<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classme_1_1_window" kind="class" language="C++" prot="public">
    <compoundname>me::Window</compoundname>
    <basecompoundref refid="classme_1_1_singleton" prot="public" virt="non-virtual">me::Singleton&lt; Window &gt;</basecompoundref>
    <includes refid="_window_8h" local="no">Window.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classme_1_1_window_1af11abf8faca062d639a45727971beda2" prot="private" static="no" mutable="no">
        <type>friend</type>
        <definition>friend me::Window::Singleton&lt; Window &gt;</definition>
        <argsstring></argsstring>
        <name>Singleton&lt; Window &gt;</name>
        <qualifiedname>me::Window::Singleton&lt; Window &gt;</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/Window.h" line="26" column="1" bodyfile="Src/Render/Window.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classme_1_1_window_1af3da7c85e571818c055e82fdc723e959" prot="private" static="no" mutable="no">
        <type><ref refid="_render_window_8h_1a55a196c7d3b8497538632c79ae1e6392" kindref="member">SDL_Window</ref> *</type>
        <definition>SDL_Window* me::Window::window</definition>
        <argsstring></argsstring>
        <name>window</name>
        <qualifiedname>me::Window::window</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/Window.h" line="46" column="12" bodyfile="Src/Render/Window.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classme_1_1_window_1a74e6087da23d3c24e9fac0245e5ec92c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Window::Window</definition>
        <argsstring>()</argsstring>
        <name>Window</name>
        <qualifiedname>me::Window::Window</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes SDL and creates an 854x480 SDL window named &quot;Motor Engine&quot;, and will take input focus </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/Window.h" line="32" column="1" bodyfile="Src/Render/Window.cpp" bodystart="7" bodyend="12"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_window_1a4750d83e7b5e164f2cc29ed345373697" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Window::Window</definition>
        <argsstring>(uint32_t sdlFlags, const char *name, int x, int y, int w, int h, uint32_t windowFlags)</argsstring>
        <name>Window</name>
        <qualifiedname>me::Window::Window</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>sdlFlags</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>h</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>windowFlags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Intitialices SDL and creates an SDL <ref refid="classme_1_1_window" kindref="compound">Window</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sdlFlags</parametername>
</parameternamelist>
<parameterdescription>
<para>0, or one or more SDL_InitFlags OR&apos;d together </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the window in UTF-8 encoding. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>position of the window. Use <computeroutput>SDL_WINDOWPOS_CENTERED</computeroutput> or <computeroutput>SDL_WINDOWPOS_UNDEFINED</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>width and height of the window in screen coordinates </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>windowFlags</parametername>
</parameternamelist>
<parameterdescription>
<para>0, or one or more SDL_WindowFlags OR&apos;d together </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The window that was created or NULL on failure. Call SDL_GetError() for more information. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/Window.h" line="43" column="1" bodyfile="Src/Render/Window.cpp" bodystart="14" bodyend="18"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classme_1_1_window_1a245d821e6016fa1f6970ccbbedd635f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Window::~Window</definition>
        <argsstring>()</argsstring>
        <name>~Window</name>
        <qualifiedname>me::Window::~Window</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/Window.h" line="49" column="1" bodyfile="Src/Render/Window.cpp" bodystart="20" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="classme_1_1_window_1a7aab48895f33d6a5ecc2f5a1c0e582c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_render_window_8h_1a55a196c7d3b8497538632c79ae1e6392" kindref="member">SDL_Window</ref> *</type>
        <definition>SDL_Window * Window::get</definition>
        <argsstring>()</argsstring>
        <name>get</name>
        <qualifiedname>me::Window::get</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The window that was created or NULL on failure. Call SDL_GetError() for more information. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Src/Render/Window.h" line="54" column="12" bodyfile="Src/Render/Window.cpp" bodystart="24" bodyend="27"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Manages a SDL_Window instance so it can be shared among several modules like <ref refid="namespace_ogre" kindref="compound">Ogre</ref> and Bullet. By default, it&apos;ll initialize SDL and create an 854x480 SDL window named &quot;Motor Engine&quot;, and will take input focus. Initialize the window with: Window::init(Uint32 sdlFlags, const char* name, int x, int y, int w, int h, Uint32 windowFlags); and access the window with win().<ref refid="classme_1_1_window_1a7aab48895f33d6a5ecc2f5a1c0e582c7" kindref="member">get()</ref>; <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sdlFlags</parametername>
</parameternamelist>
<parameterdescription>
<para>0, or one or more SDL_InitFlags OR&apos;d together </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the window in UTF-8 encoding. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>position of the window. Use <computeroutput>SDL_WINDOWPOS_CENTERED</computeroutput> or <computeroutput>SDL_WINDOWPOS_UNDEFINED</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>width and height of the window in screen coordinates </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>windowFlags</parametername>
</parameternamelist>
<parameterdescription>
<para>0, or one or more SDL_WindowFlags OR&apos;d together </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>me::Singleton&lt; Window &gt;</label>
        <link refid="classme_1_1_singleton"/>
      </node>
      <node id="1">
        <label>me::Window</label>
        <link refid="classme_1_1_window"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>me::Singleton&lt; Window &gt;</label>
        <link refid="classme_1_1_singleton"/>
      </node>
      <node id="1">
        <label>me::Window</label>
        <link refid="classme_1_1_window"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="Src/Render/Window.h" line="24" column="1" bodyfile="Src/Render/Window.h" bodystart="25" bodyend="55"/>
    <listofallmembers>
      <member refid="classme_1_1_window_1a7aab48895f33d6a5ecc2f5a1c0e582c7" prot="public" virt="non-virtual"><scope>me::Window</scope><name>get</name></member>
      <member refid="classme_1_1_singleton_1a919633966a5db8336cffa09f28fc2623" prot="public" virt="non-virtual"><scope>me::Window</scope><name>init</name></member>
      <member refid="classme_1_1_singleton_1a8810aab25f6fdc043bfac52761a9a260" prot="public" virt="non-virtual"><scope>me::Window</scope><name>instance</name></member>
      <member refid="classme_1_1_singleton_1a6745ba60837f9347a75c0cfc27fadfb0" prot="public" virt="non-virtual"><scope>me::Window</scope><name>operator=</name></member>
      <member refid="classme_1_1_singleton_1af5127d54d6c6904173541b404903b599" prot="protected" virt="non-virtual"><scope>me::Window</scope><name>Singleton</name></member>
      <member refid="classme_1_1_singleton_1a70f85c079fd020a8655eed54e7189845" prot="public" virt="non-virtual"><scope>me::Window</scope><name>Singleton</name></member>
      <member refid="classme_1_1_window_1af11abf8faca062d639a45727971beda2" prot="private" virt="non-virtual"><scope>me::Window</scope><name>Singleton&lt; Window &gt;</name></member>
      <member refid="classme_1_1_window_1af3da7c85e571818c055e82fdc723e959" prot="private" virt="non-virtual"><scope>me::Window</scope><name>window</name></member>
      <member refid="classme_1_1_window_1a74e6087da23d3c24e9fac0245e5ec92c" prot="private" virt="non-virtual"><scope>me::Window</scope><name>Window</name></member>
      <member refid="classme_1_1_window_1a4750d83e7b5e164f2cc29ed345373697" prot="private" virt="non-virtual"><scope>me::Window</scope><name>Window</name></member>
      <member refid="classme_1_1_singleton_1a576834dfbf95c3b929511d2a588866d1" prot="public" virt="virtual"><scope>me::Window</scope><name>~Singleton</name></member>
      <member refid="classme_1_1_window_1a245d821e6016fa1f6970ccbbedd635f6" prot="public" virt="non-virtual"><scope>me::Window</scope><name>~Window</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
