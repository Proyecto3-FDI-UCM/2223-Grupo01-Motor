<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classme_1_1_window" xml:lang="en-US">
<title>me::Window Class Reference</title>
<indexterm><primary>me::Window</primary></indexterm>
<para>
<computeroutput>#include &lt;Window.h&gt;</computeroutput>
</para>
<para>Inheritance diagram for me::Window:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classme_1_1_window.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classme_1_1_window_1a245d821e6016fa1f6970ccbbedd635f6">~Window</link> ()</para>
</listitem>
            <listitem><para><link linkend="__render_window_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * <link linkend="_classme_1_1_window_1a7aab48895f33d6a5ecc2f5a1c0e582c7">get</link> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
Public Member Functions inherited from <link linkend="_classme_1_1_singleton">me::Singleton&lt; Window &gt;</link>        <itemizedlist>
            <listitem><para><link linkend="_classme_1_1_singleton_1a70f85c079fd020a8655eed54e7189845">Singleton</link> (const <link linkend="_classme_1_1_singleton">Singleton</link>&lt; <link linkend="_classme_1_1_window">Window</link> &gt; &amp;o)=delete</para>
</listitem>
            <listitem><para><link linkend="_classme_1_1_singleton">Singleton</link>&lt; <link linkend="_classme_1_1_window">Window</link> &gt; &amp; <link linkend="_classme_1_1_singleton_1a6745ba60837f9347a75c0cfc27fadfb0">operator=</link> (const <link linkend="_classme_1_1_singleton">Singleton</link>&lt; <link linkend="_classme_1_1_window">Window</link> &gt; &amp;o)=delete</para>
</listitem>
            <listitem><para>virtual <link linkend="_classme_1_1_singleton_1a576834dfbf95c3b929511d2a588866d1">~Singleton</link> ()</para>
</listitem>
        </itemizedlist>
<simplesect>
    <title>Additional Inherited Members    </title>
Static Public Member Functions inherited from <link linkend="_classme_1_1_singleton">me::Singleton&lt; Window &gt;</link>        <itemizedlist>
            <listitem><para>static <link linkend="_classme_1_1_window">Window</link> * <link linkend="_classme_1_1_singleton_1a919633966a5db8336cffa09f28fc2623">init</link> (Targs &amp;&amp;...args)</para>
</listitem>
            <listitem><para>static <link linkend="_classme_1_1_window">Window</link> * <link linkend="_classme_1_1_singleton_1a8810aab25f6fdc043bfac52761a9a260">instance</link> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
Protected Member Functions inherited from <link linkend="_classme_1_1_singleton">me::Singleton&lt; Window &gt;</link>        <itemizedlist>
            <listitem><para><link linkend="_classme_1_1_singleton_1af5127d54d6c6904173541b404903b599">Singleton</link> ()</para>
</listitem>
        </itemizedlist>
<section>
<title>Detailed Description</title>

<para>Manages a SDL_Window instance so it can be shared among several modules like <link linkend="_namespace_ogre">Ogre</link> and Bullet. By default, it&apos;ll initialize SDL and create an 854x480 SDL window named &quot;Motor Engine&quot;, and will take input focus. Initialize the window with: Window::init(Uint32 sdlFlags, const char* name, int x, int y, int w, int h, Uint32 windowFlags); and access the window with win().<link linkend="_classme_1_1_window_1a7aab48895f33d6a5ecc2f5a1c0e582c7">get()</link>; 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>sdlFlags</entry><entry>
<para>0, or one or more SDL_InitFlags OR&apos;d together </para>
</entry>
                            </row>
                            <row>
<entry>name</entry><entry>
<para>name of the window in UTF-8 encoding. </para>
</entry>
                            </row>
                            <row>
<entry>x, y</entry><entry>
<para>position of the window. Use <computeroutput>SDL_WINDOWPOS_CENTERED</computeroutput> or <computeroutput>SDL_WINDOWPOS_UNDEFINED</computeroutput>. </para>
</entry>
                            </row>
                            <row>
<entry>w, h</entry><entry>
<para>width and height of the window in screen coordinates </para>
</entry>
                            </row>
                            <row>
<entry>windowFlags</entry><entry>
<para>0, or one or more SDL_WindowFlags OR&apos;d together </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classme_1_1_window_1a245d821e6016fa1f6970ccbbedd635f6"/><section>
    <title>~Window()</title>
<indexterm><primary>~Window</primary><secondary>me::Window</secondary></indexterm>
<indexterm><primary>me::Window</primary><secondary>~Window</secondary></indexterm>
<para><computeroutput>Window::~Window ( )</computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classme_1_1_window_1a7aab48895f33d6a5ecc2f5a1c0e582c7"/><section>
    <title>get()</title>
<indexterm><primary>get</primary><secondary>me::Window</secondary></indexterm>
<indexterm><primary>me::Window</primary><secondary>get</secondary></indexterm>
<para><computeroutput><link linkend="__render_window_8h_1a55a196c7d3b8497538632c79ae1e6392">SDL_Window</link> * Window::get ( )</computeroutput></para>
<para><formalpara><title>Returns</title>

<para>The window that was created or NULL on failure. Call SDL_GetError() for more information. </para>
</formalpara>
</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
Src/Render/<link linkend="__window_8h">Window.h</link>Src/Render/<link linkend="__window_8cpp">Window.cpp</link></section>
</section>
