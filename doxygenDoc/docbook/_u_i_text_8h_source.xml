<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__u_i_text_8h_source" xml:lang="en-US">
<title>UIText.h</title>
<indexterm><primary>Src/EntityComponent/Components/UIText.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="preprocessor">#pragma&#32;once</emphasis>
2 <emphasis role="preprocessor">#ifndef&#32;__ENTITYCOMPONETN_UITEXT</emphasis>
3 <emphasis role="preprocessor">#define&#32;__ENTITYCOMPONETN_UITEXT</emphasis>
4 
5 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__component_8h">Component.h</link>&quot;</emphasis>
6 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__vector3_8h">Utils/Vector3.h</link>&quot;</emphasis>
7 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__vector4_8h">Utils/Vector4.h</link>&quot;</emphasis>
8 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__u_i_element_8h">UIElement.h</link>&quot;</emphasis>
9 <emphasis role="preprocessor">#include&#32;&lt;OgreTextAreaOverlayElement.h&gt;</emphasis>
10 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
11 
12 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespaceme">me</link>&#32;{
13 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="__motor_engine_a_p_i_8h_1ae7d210fc6a9598f82960577024307219">__MOTORENGINE_API</link>&#32;<link linkend="_classme_1_1_u_i_text">UIText</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_classme_1_1_u_i_element">UIElement</link>
14 &#32;&#32;&#32;&#32;{
15 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classme_1_1_u_i_text">UIText</link>(std::string&#32;name,&#32;std::string&#32;fontName,&#32;<emphasis role="keywordtype">float</emphasis>&#32;posX,&#32;<emphasis role="keywordtype">float</emphasis>&#32;poxY,&#32;<emphasis role="keywordtype">float</emphasis>&#32;width,&#32;<emphasis role="keywordtype">float</emphasis>&#32;height,&#32;std::string&#32;text,&#32;<link linkend="_classme_1_1_vector4">Vector4</link>&#32;textColor);
16 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classme_1_1_u_i_text">~UIText</link>();
17 
18 
24 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;setPosition(<emphasis role="keywordtype">float</emphasis>&#32;x,&#32;<emphasis role="keywordtype">float</emphasis>&#32;y);
25 
26 
32 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;setSize(<emphasis role="keywordtype">float</emphasis>&#32;w,&#32;<emphasis role="keywordtype">float</emphasis>&#32;h);
33 
34 
35 
40 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;setFont(std::string&#32;fontName);
41 
42 
47 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;setText(std::string&#32;newText);
48 
49 
54 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;setTextColor(<link linkend="_classme_1_1_vector4">Vector4</link>&#32;newColor);
55 
56 
61 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;setWidth(<emphasis role="keywordtype">double</emphasis>&#32;widthValue);
62 
63 
68 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;setHeight(<emphasis role="keywordtype">double</emphasis>&#32;heightValue);
69 
70 
71 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
72 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;Set&#32;whether&#32;the&#32;UIText&#32;instance&#32;is&#32;active&#32;or&#32;not</emphasis>
73 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;@param&#32;active&#32;True&#32;if&#32;the&#32;UIText&#32;should&#32;be&#32;active,&#32;false&#32;otherwise</emphasis>
74 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
75 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;setActive(<emphasis role="keywordtype">bool</emphasis>&#32;active);
76 
77 
82 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;setTextAligment(Ogre::TextAreaOverlayElement::Alignment&#32;a);
83 
84 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
85 
86 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Pointer&#32;to&#32;the&#32;text&#32;area&#32;overlay&#32;element</emphasis>
87 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Ogre::TextAreaOverlayElement*&#32;mTextArea;
88 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;alignment&#32;of&#32;the&#32;text&#32;displayed&#32;</emphasis>
89 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Ogre::TextAreaOverlayElement::Alignment&#32;mAlignment;
90 &#32;&#32;&#32;&#32;};
91 }
92 
93 
94 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;!__EC_UI_TEXT</emphasis>
95 
96 
97 
</programlisting></section>
