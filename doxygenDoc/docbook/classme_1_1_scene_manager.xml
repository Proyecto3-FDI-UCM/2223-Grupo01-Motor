<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classme_1_1_scene_manager" xml:lang="en-US">
<title>me::SceneManager Class Reference</title>
<indexterm><primary>me::SceneManager</primary></indexterm>
<para>
<computeroutput>#include &lt;SceneManager.h&gt;</computeroutput>
</para>
<para>Inheritance diagram for me::SceneManager:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classme_1_1_scene_manager.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classme_1_1_scene_manager_1a9539bd6d36c96af17815c97517798a9c">SceneManager</link> ()</para>
</listitem>
            <listitem><para>virtual <link linkend="_classme_1_1_scene_manager_1a492786a63338f7592d3c90bd7c1a5b68">~SceneManager</link> ()</para>
</listitem>
            <listitem><para>std::shared_ptr&lt; <link linkend="_classme_1_1_scene">Scene</link> &gt; <link linkend="_classme_1_1_scene_manager_1a2a3c37650ea0956c6539dd6f0f6adb75">addScene</link> (const std::string &amp;name)</para>
</listitem>
            <listitem><para>void <link linkend="_classme_1_1_scene_manager_1a692ef55242c022bcb0f39af45f8e8f91">removeScene</link> (const std::string &amp;name)</para>
</listitem>
            <listitem><para>std::shared_ptr&lt; <link linkend="_classme_1_1_scene">Scene</link> &gt; <link linkend="_classme_1_1_scene_manager_1a535b9a281d883696061e9587273f42a5">getScene</link> (const std::string &amp;name) const</para>
</listitem>
            <listitem><para>std::shared_ptr&lt; <link linkend="_classme_1_1_scene">Scene</link> &gt; <link linkend="_classme_1_1_scene_manager_1adb934d5cbbe79b5dd01eb6f7a8036561">getActiveScene</link> () const</para>
</listitem>
            <listitem><para>void <link linkend="_classme_1_1_scene_manager_1acbf706a7532518e65768b045c0380f9d">renameScene</link> (const std::string &amp;oldName, const std::string &amp;newName)</para>
</listitem>
            <listitem><para>void <link linkend="_classme_1_1_scene_manager_1aa6cecfe127f89c94c2bff5ece29e387e">setActiveScene</link> (const std::string &amp;name)</para>
</listitem>
            <listitem><para>void <link linkend="_classme_1_1_scene_manager_1aed9f90a7c28962042c37ad66a9d60d61">update</link> ()</para>
</listitem>
            <listitem><para>int <link linkend="_classme_1_1_scene_manager_1a4dab59e5187d481b15c24800e34f46a4">loadEntities</link> (const std::string &amp;sceneName)</para>
</listitem>
        </itemizedlist>
</simplesect>
Public Member Functions inherited from <link linkend="_classme_1_1_singleton">me::Singleton&lt; SceneManager &gt;</link>        <itemizedlist>
            <listitem><para><link linkend="_classme_1_1_singleton_1a70f85c079fd020a8655eed54e7189845">Singleton</link> (const <link linkend="_classme_1_1_singleton">Singleton</link>&lt; <link linkend="_classme_1_1_scene_manager">SceneManager</link> &gt; &amp;o)=delete</para>
</listitem>
            <listitem><para><link linkend="_classme_1_1_singleton">Singleton</link>&lt; <link linkend="_classme_1_1_scene_manager">SceneManager</link> &gt; &amp; <link linkend="_classme_1_1_singleton_1a6745ba60837f9347a75c0cfc27fadfb0">operator=</link> (const <link linkend="_classme_1_1_singleton">Singleton</link>&lt; <link linkend="_classme_1_1_scene_manager">SceneManager</link> &gt; &amp;o)=delete</para>
</listitem>
            <listitem><para>virtual <link linkend="_classme_1_1_singleton_1a576834dfbf95c3b929511d2a588866d1">~Singleton</link> ()</para>
</listitem>
        </itemizedlist>
<simplesect>
    <title>Additional Inherited Members    </title>
Static Public Member Functions inherited from <link linkend="_classme_1_1_singleton">me::Singleton&lt; SceneManager &gt;</link>        <itemizedlist>
            <listitem><para>static <link linkend="_classme_1_1_scene_manager">SceneManager</link> * <link linkend="_classme_1_1_singleton_1a919633966a5db8336cffa09f28fc2623">init</link> (Targs &amp;&amp;...args)</para>
</listitem>
            <listitem><para>static <link linkend="_classme_1_1_scene_manager">SceneManager</link> * <link linkend="_classme_1_1_singleton_1a8810aab25f6fdc043bfac52761a9a260">instance</link> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
Protected Member Functions inherited from <link linkend="_classme_1_1_singleton">me::Singleton&lt; SceneManager &gt;</link>        <itemizedlist>
            <listitem><para><link linkend="_classme_1_1_singleton_1af5127d54d6c6904173541b404903b599">Singleton</link> ()</para>
</listitem>
        </itemizedlist>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classme_1_1_scene_manager_1a9539bd6d36c96af17815c97517798a9c"/><section>
    <title>SceneManager()</title>
<indexterm><primary>SceneManager</primary><secondary>me::SceneManager</secondary></indexterm>
<indexterm><primary>me::SceneManager</primary><secondary>SceneManager</secondary></indexterm>
<para><computeroutput>me::SceneManager::SceneManager ( )</computeroutput></para>
<para>Build the foundation of the <link linkend="_classme_1_1_scene_manager">SceneManager</link>. </para>
</section>
<anchor xml:id="_classme_1_1_scene_manager_1a492786a63338f7592d3c90bd7c1a5b68"/><section>
    <title>~SceneManager()</title>
<indexterm><primary>~SceneManager</primary><secondary>me::SceneManager</secondary></indexterm>
<indexterm><primary>me::SceneManager</primary><secondary>~SceneManager</secondary></indexterm>
<para><computeroutput>me::SceneManager::~SceneManager ( )<computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>This method is meant to be the definition of the dynamic memory that has to be safely delete. </para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classme_1_1_scene_manager_1a2a3c37650ea0956c6539dd6f0f6adb75"/><section>
    <title>addScene()</title>
<indexterm><primary>addScene</primary><secondary>me::SceneManager</secondary></indexterm>
<indexterm><primary>me::SceneManager</primary><secondary>addScene</secondary></indexterm>
<para><computeroutput>std::shared_ptr&lt; <link linkend="_classme_1_1_scene">Scene</link> &gt; me::SceneManager::addScene (const std::string &amp; name)</computeroutput></para>
<para>Add a new <link linkend="_classme_1_1_scene">Scene</link> to the <link linkend="_classme_1_1_scene_manager">SceneManager</link>. This assumes that the name is a unique identifier. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>String</entry><entry>
<para>name to identify the new scene. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_classme_1_1_scene_manager_1adb934d5cbbe79b5dd01eb6f7a8036561"/><section>
    <title>getActiveScene()</title>
<indexterm><primary>getActiveScene</primary><secondary>me::SceneManager</secondary></indexterm>
<indexterm><primary>me::SceneManager</primary><secondary>getActiveScene</secondary></indexterm>
<para><computeroutput>std::shared_ptr&lt; <link linkend="_classme_1_1_scene">Scene</link> &gt; me::SceneManager::getActiveScene ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Get the scene that is actually active from the <link linkend="_classme_1_1_scene_manager">SceneManager</link>. </para>
</section>
<anchor xml:id="_classme_1_1_scene_manager_1a535b9a281d883696061e9587273f42a5"/><section>
    <title>getScene()</title>
<indexterm><primary>getScene</primary><secondary>me::SceneManager</secondary></indexterm>
<indexterm><primary>me::SceneManager</primary><secondary>getScene</secondary></indexterm>
<para><computeroutput>std::shared_ptr&lt; <link linkend="_classme_1_1_scene">Scene</link> &gt; me::SceneManager::getScene (const std::string &amp; name) const</computeroutput></para>
<para>Get an scene from the <link linkend="_classme_1_1_scene_manager">SceneManager</link>. This assumes that the name is a unique identifier. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>String</entry><entry>
<para>name to identify the scene suggested. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_classme_1_1_scene_manager_1a4dab59e5187d481b15c24800e34f46a4"/><section>
    <title>loadEntities()</title>
<indexterm><primary>loadEntities</primary><secondary>me::SceneManager</secondary></indexterm>
<indexterm><primary>me::SceneManager</primary><secondary>loadEntities</secondary></indexterm>
<para><computeroutput>int me::SceneManager::loadEntities (const std::string &amp; sceneName)</computeroutput></para>
<para>Parse entities from .lua file to an unordered_map that will be passed to the current <link linkend="_classme_1_1_scene">Scene</link> to create the entities. sceneName has to be the name of the file with .lua INCLUDED. Example: sceneName =&gt; scene.lua</para>

<para><formalpara><title>Returns</title>

<para>Error Value, 0 if loadEntities worked correctly or 1 if some error appeared during this function </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classme_1_1_scene_manager_1a692ef55242c022bcb0f39af45f8e8f91"/><section>
    <title>removeScene()</title>
<indexterm><primary>removeScene</primary><secondary>me::SceneManager</secondary></indexterm>
<indexterm><primary>me::SceneManager</primary><secondary>removeScene</secondary></indexterm>
<para><computeroutput>void me::SceneManager::removeScene (const std::string &amp; name)</computeroutput></para>
<para>Remove an scene from the <link linkend="_classme_1_1_scene_manager">SceneManager</link>. This assumes that the name is a unique identifier. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>String</entry><entry>
<para>name to identify the scene to be remove. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_classme_1_1_scene_manager_1acbf706a7532518e65768b045c0380f9d"/><section>
    <title>renameScene()</title>
<indexterm><primary>renameScene</primary><secondary>me::SceneManager</secondary></indexterm>
<indexterm><primary>me::SceneManager</primary><secondary>renameScene</secondary></indexterm>
<para><computeroutput>void me::SceneManager::renameScene (const std::string &amp; oldName, const std::string &amp; newName)</computeroutput></para>
<para>Rename an scene name to the new one. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>String</entry><entry>
<para>oldName to be change. </para>
</entry>
                            </row>
                            <row>
<entry>String</entry><entry>
<para>newName to be set. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_classme_1_1_scene_manager_1aa6cecfe127f89c94c2bff5ece29e387e"/><section>
    <title>setActiveScene()</title>
<indexterm><primary>setActiveScene</primary><secondary>me::SceneManager</secondary></indexterm>
<indexterm><primary>me::SceneManager</primary><secondary>setActiveScene</secondary></indexterm>
<para><computeroutput>void me::SceneManager::setActiveScene (const std::string &amp; name)</computeroutput></para>
<para>Set the active scene from the <link linkend="_classme_1_1_scene_manager">SceneManager</link>. This assumes that the name is a unique identifier. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>String</entry><entry>
<para>name to identify the scene suggested. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_classme_1_1_scene_manager_1aed9f90a7c28962042c37ad66a9d60d61"/><section>
    <title>update()</title>
<indexterm><primary>update</primary><secondary>me::SceneManager</secondary></indexterm>
<indexterm><primary>me::SceneManager</primary><secondary>update</secondary></indexterm>
<para><computeroutput>void me::SceneManager::update ( )</computeroutput></para>
<para>Main loop of this manager, if there is an active scene this will call the scene loop mehtods by the order of: processNewEntities, update, lateUpdate and refresh. </para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
Src/EntityComponent/<link linkend="__scene_manager_8h">SceneManager.h</link>Src/EntityComponent/<link linkend="__scenemanager_8cpp">Scenemanager.cpp</link></section>
</section>
