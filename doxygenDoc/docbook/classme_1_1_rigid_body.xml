<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classme_1_1_rigid_body" xml:lang="en-US">
<title>me::RigidBody Class Reference</title>
<indexterm><primary>me::RigidBody</primary></indexterm>
<para>
<computeroutput>#include &lt;RigidBody.h&gt;</computeroutput>
</para>
<para>Inheritance diagram for me::RigidBody:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classme_1_1_rigid_body.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classme_1_1_rigid_body_1a0be8e6e50a7a381ebe25ecbe60643c85">RigidBody</link> ()</para>
</listitem>
            <listitem><para><link linkend="_classme_1_1_rigid_body_1a667d92b721c6c1072c3ae29583f4de0a">~RigidBody</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_classme_1_1_rigid_body_1afc256e6a0acfc8403a63c6f88e7251e7">start</link> () override</para>
</listitem>
            <listitem><para>void <link linkend="_classme_1_1_rigid_body_1ace166d0417a107651406a821071a827a">update</link> () override</para>
</listitem>
            <listitem><para>void <link linkend="_classme_1_1_rigid_body_1a1a617e3d268a641f57710f5067375b15">lateUpdate</link> () override</para>
</listitem>
            <listitem><para>void <link linkend="_classme_1_1_rigid_body_1a54d755df6695c7bda14440b8b49be7f9">setTrigger</link> (bool isTrigger)</para>
</listitem>
            <listitem><para>void <link linkend="_classme_1_1_rigid_body_1a391d125434fe50a9fa3cdf51dc624759">setMass</link> (float mass)</para>
</listitem>
            <listitem><para>void <link linkend="_classme_1_1_rigid_body_1a55964a98631556a45ab72a39ba994a4a">setFriction</link> (float friction)</para>
</listitem>
            <listitem><para>void <link linkend="_classme_1_1_rigid_body_1a6180a6f9718f828df3158a8bab23236a">setRestitution</link> (float restitution)</para>
</listitem>
            <listitem><para>void <link linkend="_classme_1_1_rigid_body_1a2601a159924ddb9f57c781f0dad979e4">setColShape</link> (int colShape)</para>
</listitem>
            <listitem><para>void <link linkend="_classme_1_1_rigid_body_1a4152f4fd03ae45fc146178cd1cd2396e">setMomeventType</link> (int mvType)</para>
</listitem>
            <listitem><para>bool <link linkend="_classme_1_1_rigid_body_1a8b86f53b288a7531f11265ad27f18b4f">getTrigger</link> ()</para>
</listitem>
            <listitem><para>float <link linkend="_classme_1_1_rigid_body_1a0d73e2dc9b02c05feb27db3cb88bf507">getMass</link> ()</para>
</listitem>
            <listitem><para>float <link linkend="_classme_1_1_rigid_body_1a1e6c2e0d3d335b37498924061340ffc8">getFriction</link> ()</para>
</listitem>
            <listitem><para>float <link linkend="_classme_1_1_rigid_body_1a3091cf9d99387fb6080fa472afa14005">getRestitution</link> ()</para>
</listitem>
            <listitem><para>int <link linkend="_classme_1_1_rigid_body_1abca33af6fd34f5b5722c78542a46f87a">getColShape</link> ()</para>
</listitem>
            <listitem><para>int <link linkend="_classme_1_1_rigid_body_1ae514e7e9bd24531a63668439c36d396a">getMovementType</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_classme_1_1_rigid_body_1a575476ece10aeedf01be1a381d9d3346">addForce</link> (<link linkend="_classme_1_1_vector3">Vector3</link> force, <link linkend="_classme_1_1_vector3">Vector3</link> relativePos)</para>
</listitem>
            <listitem><para>void <link linkend="_classme_1_1_rigid_body_1ad474ec4df0965ae6caa6fe17d86c2aab">addImpulse</link> (<link linkend="_classme_1_1_vector3">Vector3</link> impulse, <link linkend="_classme_1_1_vector3">Vector3</link> relativePos)</para>
</listitem>
        </itemizedlist>
</simplesect>
Public Member Functions inherited from <link linkend="_classme_1_1_component">me::Component</link>        <itemizedlist>
            <listitem><para><link linkend="_classme_1_1_component_1a4dae1070d5cb2b14b49466e64b3095d6">Component</link> ()</para>
</listitem>
            <listitem><para>virtual <link linkend="_classme_1_1_component_1ab2a3844334f7d532196025c32e100799">~Component</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_classme_1_1_component_1a7c5786c94bfaf7b6e110f9fa30feafb3">setEntity</link> (<link linkend="_classme_1_1_entity">Entity</link> *e)</para>
</listitem>
            <listitem><para><link linkend="_classme_1_1_entity">Entity</link> * <link linkend="_classme_1_1_component_1a1c8917fcfda2d8ad66ab487ab726a0cd">getEntity</link> ()</para>
</listitem>
            <listitem><para>virtual void <link linkend="_classme_1_1_component_1a349e2dfff958c956945a12fbcb6951ae">start</link> ()</para>
</listitem>
            <listitem><para>virtual void <link linkend="_classme_1_1_component_1a421049b57bf72b90a48425f772b39aa1">update</link> ()</para>
</listitem>
            <listitem><para>virtual void <link linkend="_classme_1_1_component_1af9625b0308ccd7b22c7871922de0b0a0">lateUpdate</link> ()</para>
</listitem>
            <listitem><para>virtual void <link linkend="_classme_1_1_component_1a4d98175f03ee8266f71d9237b3d23748">OnCollisionEnter</link> (<link linkend="_classme_1_1_entity">Entity</link> *other)</para>
</listitem>
            <listitem><para>virtual void <link linkend="_classme_1_1_component_1a9e024171b2bbed0cedf1476e2879081f">OnCollisionStay</link> (<link linkend="_classme_1_1_entity">Entity</link> *other)</para>
</listitem>
            <listitem><para>virtual void <link linkend="_classme_1_1_component_1a643aad67bcb41b2c936e49e25b78342e">OnCollisionExit</link> (<link linkend="_classme_1_1_entity">Entity</link> *other)</para>
</listitem>
        </itemizedlist>
<simplesect>
    <title>Additional Inherited Members    </title>
Public Attributes inherited from <link linkend="_classme_1_1_component">me::Component</link>        <itemizedlist>
            <listitem><para>bool <link linkend="_classme_1_1_component_1ab29a0b2c3a9ad3e4e0cf81d8fdbff4f3">enabled</link> = true</para>
</listitem>
        </itemizedlist>
</simplesect>
Protected Attributes inherited from <link linkend="_classme_1_1_component">me::Component</link>        <itemizedlist>
            <listitem><para><link linkend="_classme_1_1_entity">Entity</link> * <link linkend="_classme_1_1_component_1a89862182926907ae608d3244d1d4e6d1">mEntity</link></para>
</listitem>
        </itemizedlist>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classme_1_1_rigid_body_1a0be8e6e50a7a381ebe25ecbe60643c85"/><section>
    <title>RigidBody()</title>
<indexterm><primary>RigidBody</primary><secondary>me::RigidBody</secondary></indexterm>
<indexterm><primary>me::RigidBody</primary><secondary>RigidBody</secondary></indexterm>
<para><computeroutput>me::RigidBody::RigidBody ( )</computeroutput></para></section>
<anchor xml:id="_classme_1_1_rigid_body_1a667d92b721c6c1072c3ae29583f4de0a"/><section>
    <title>~RigidBody()</title>
<indexterm><primary>~RigidBody</primary><secondary>me::RigidBody</secondary></indexterm>
<indexterm><primary>me::RigidBody</primary><secondary>~RigidBody</secondary></indexterm>
<para><computeroutput>me::RigidBody::~RigidBody ( )</computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classme_1_1_rigid_body_1a575476ece10aeedf01be1a381d9d3346"/><section>
    <title>addForce()</title>
<indexterm><primary>addForce</primary><secondary>me::RigidBody</secondary></indexterm>
<indexterm><primary>me::RigidBody</primary><secondary>addForce</secondary></indexterm>
<para><computeroutput>void me::RigidBody::addForce (<link linkend="_classme_1_1_vector3">Vector3</link> force, <link linkend="_classme_1_1_vector3">Vector3</link> relativePos)</computeroutput></para>
<para>Apply a force to the rigidBody</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>force</entry><entry>
<para>is the vector of the force to apply </para>
</entry>
                            </row>
                            <row>
<entry>relativePos</entry><entry>
<para>is the local pos of the rigidBody </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_classme_1_1_rigid_body_1ad474ec4df0965ae6caa6fe17d86c2aab"/><section>
    <title>addImpulse()</title>
<indexterm><primary>addImpulse</primary><secondary>me::RigidBody</secondary></indexterm>
<indexterm><primary>me::RigidBody</primary><secondary>addImpulse</secondary></indexterm>
<para><computeroutput>void me::RigidBody::addImpulse (<link linkend="_classme_1_1_vector3">Vector3</link> impulse, <link linkend="_classme_1_1_vector3">Vector3</link> relativePos)</computeroutput></para>
<para>Apply a impulse to the rigidBody</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>impulse</entry><entry>
<para>is the vector of the impulse to apply </para>
</entry>
                            </row>
                            <row>
<entry>relativePos</entry><entry>
<para>is the local pos of the rigidBody </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_classme_1_1_rigid_body_1abca33af6fd34f5b5722c78542a46f87a"/><section>
    <title>getColShape()</title>
<indexterm><primary>getColShape</primary><secondary>me::RigidBody</secondary></indexterm>
<indexterm><primary>me::RigidBody</primary><secondary>getColShape</secondary></indexterm>
<para><computeroutput>int me::RigidBody::getColShape ( )</computeroutput></para></section>
<anchor xml:id="_classme_1_1_rigid_body_1a1e6c2e0d3d335b37498924061340ffc8"/><section>
    <title>getFriction()</title>
<indexterm><primary>getFriction</primary><secondary>me::RigidBody</secondary></indexterm>
<indexterm><primary>me::RigidBody</primary><secondary>getFriction</secondary></indexterm>
<para><computeroutput>float me::RigidBody::getFriction ( )</computeroutput></para></section>
<anchor xml:id="_classme_1_1_rigid_body_1a0d73e2dc9b02c05feb27db3cb88bf507"/><section>
    <title>getMass()</title>
<indexterm><primary>getMass</primary><secondary>me::RigidBody</secondary></indexterm>
<indexterm><primary>me::RigidBody</primary><secondary>getMass</secondary></indexterm>
<para><computeroutput>float me::RigidBody::getMass ( )</computeroutput></para></section>
<anchor xml:id="_classme_1_1_rigid_body_1ae514e7e9bd24531a63668439c36d396a"/><section>
    <title>getMovementType()</title>
<indexterm><primary>getMovementType</primary><secondary>me::RigidBody</secondary></indexterm>
<indexterm><primary>me::RigidBody</primary><secondary>getMovementType</secondary></indexterm>
<para><computeroutput>int me::RigidBody::getMovementType ( )</computeroutput></para></section>
<anchor xml:id="_classme_1_1_rigid_body_1a3091cf9d99387fb6080fa472afa14005"/><section>
    <title>getRestitution()</title>
<indexterm><primary>getRestitution</primary><secondary>me::RigidBody</secondary></indexterm>
<indexterm><primary>me::RigidBody</primary><secondary>getRestitution</secondary></indexterm>
<para><computeroutput>float me::RigidBody::getRestitution ( )</computeroutput></para></section>
<anchor xml:id="_classme_1_1_rigid_body_1a8b86f53b288a7531f11265ad27f18b4f"/><section>
    <title>getTrigger()</title>
<indexterm><primary>getTrigger</primary><secondary>me::RigidBody</secondary></indexterm>
<indexterm><primary>me::RigidBody</primary><secondary>getTrigger</secondary></indexterm>
<para><computeroutput>bool me::RigidBody::getTrigger ( )</computeroutput></para></section>
<anchor xml:id="_classme_1_1_rigid_body_1a1a617e3d268a641f57710f5067375b15"/><section>
    <title>lateUpdate()</title>
<indexterm><primary>lateUpdate</primary><secondary>me::RigidBody</secondary></indexterm>
<indexterm><primary>me::RigidBody</primary><secondary>lateUpdate</secondary></indexterm>
<para><computeroutput>void me::RigidBody::lateUpdate ( )<computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>This method is meant to be the definition of those updates that has to be processed at the end of the game cycle.</para>

<para>For example: render and collisions. </para>
<para>
Reimplemented from <link linkend="_classme_1_1_component_1af9625b0308ccd7b22c7871922de0b0a0">me::Component</link>.</para>
</section>
<anchor xml:id="_classme_1_1_rigid_body_1a2601a159924ddb9f57c781f0dad979e4"/><section>
    <title>setColShape()</title>
<indexterm><primary>setColShape</primary><secondary>me::RigidBody</secondary></indexterm>
<indexterm><primary>me::RigidBody</primary><secondary>setColShape</secondary></indexterm>
<para><computeroutput>void me::RigidBody::setColShape (int colShape)</computeroutput></para></section>
<anchor xml:id="_classme_1_1_rigid_body_1a55964a98631556a45ab72a39ba994a4a"/><section>
    <title>setFriction()</title>
<indexterm><primary>setFriction</primary><secondary>me::RigidBody</secondary></indexterm>
<indexterm><primary>me::RigidBody</primary><secondary>setFriction</secondary></indexterm>
<para><computeroutput>void me::RigidBody::setFriction (float friction)</computeroutput></para></section>
<anchor xml:id="_classme_1_1_rigid_body_1a391d125434fe50a9fa3cdf51dc624759"/><section>
    <title>setMass()</title>
<indexterm><primary>setMass</primary><secondary>me::RigidBody</secondary></indexterm>
<indexterm><primary>me::RigidBody</primary><secondary>setMass</secondary></indexterm>
<para><computeroutput>void me::RigidBody::setMass (float mass)</computeroutput></para></section>
<anchor xml:id="_classme_1_1_rigid_body_1a4152f4fd03ae45fc146178cd1cd2396e"/><section>
    <title>setMomeventType()</title>
<indexterm><primary>setMomeventType</primary><secondary>me::RigidBody</secondary></indexterm>
<indexterm><primary>me::RigidBody</primary><secondary>setMomeventType</secondary></indexterm>
<para><computeroutput>void me::RigidBody::setMomeventType (int mvType)</computeroutput></para></section>
<anchor xml:id="_classme_1_1_rigid_body_1a6180a6f9718f828df3158a8bab23236a"/><section>
    <title>setRestitution()</title>
<indexterm><primary>setRestitution</primary><secondary>me::RigidBody</secondary></indexterm>
<indexterm><primary>me::RigidBody</primary><secondary>setRestitution</secondary></indexterm>
<para><computeroutput>void me::RigidBody::setRestitution (float restitution)</computeroutput></para></section>
<anchor xml:id="_classme_1_1_rigid_body_1a54d755df6695c7bda14440b8b49be7f9"/><section>
    <title>setTrigger()</title>
<indexterm><primary>setTrigger</primary><secondary>me::RigidBody</secondary></indexterm>
<indexterm><primary>me::RigidBody</primary><secondary>setTrigger</secondary></indexterm>
<para><computeroutput>void me::RigidBody::setTrigger (bool isTrigger)</computeroutput></para></section>
<anchor xml:id="_classme_1_1_rigid_body_1afc256e6a0acfc8403a63c6f88e7251e7"/><section>
    <title>start()</title>
<indexterm><primary>start</primary><secondary>me::RigidBody</secondary></indexterm>
<indexterm><primary>me::RigidBody</primary><secondary>start</secondary></indexterm>
<para><computeroutput>void me::RigidBody::start ( )<computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>This method is only ever called once. This must be called at the instantiation of the script. </para>
<para>
Reimplemented from <link linkend="_classme_1_1_component_1a349e2dfff958c956945a12fbcb6951ae">me::Component</link>.</para>
</section>
<anchor xml:id="_classme_1_1_rigid_body_1ace166d0417a107651406a821071a827a"/><section>
    <title>update()</title>
<indexterm><primary>update</primary><secondary>me::RigidBody</secondary></indexterm>
<indexterm><primary>me::RigidBody</primary><secondary>update</secondary></indexterm>
<para><computeroutput>void me::RigidBody::update ( )<computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>This method is meant to be the definition of those updates that has to be processed at the begining of the game cycle.</para>

<para>Almost all the logic updates. </para>
<para>
Reimplemented from <link linkend="_classme_1_1_component_1a421049b57bf72b90a48425f772b39aa1">me::Component</link>.</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
Src/EntityComponent/Components/<link linkend="__rigid_body_8h">RigidBody.h</link>Src/EntityComponent/Components/<link linkend="__rigid_body_8cpp">RigidBody.cpp</link></section>
</section>
