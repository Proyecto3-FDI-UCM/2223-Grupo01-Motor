<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classme_1_1_singleton" xml:lang="en-US">
<title>me::Singleton&lt; T &gt; Class Template Reference</title>
<indexterm><primary>me::Singleton&lt; T &gt;</primary></indexterm>
<para>
<computeroutput>#include &lt;Singleton.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classme_1_1_singleton">Singleton</link>&lt; T &gt; &amp; <link linkend="_classme_1_1_singleton_1a6745ba60837f9347a75c0cfc27fadfb0">operator=</link> (const <link linkend="_classme_1_1_singleton">Singleton</link>&lt; T &gt; &amp;o)=delete</para>
</listitem>
            <listitem><para><link linkend="_classme_1_1_singleton_1a70f85c079fd020a8655eed54e7189845">Singleton</link> (const <link linkend="_classme_1_1_singleton">Singleton</link>&lt; T &gt; &amp;o)=delete</para>
</listitem>
            <listitem><para>virtual <link linkend="_classme_1_1_singleton_1a576834dfbf95c3b929511d2a588866d1">~Singleton</link> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>template&lt;typename ... Targs&gt; </para><para>static T * <link linkend="_classme_1_1_singleton_1a919633966a5db8336cffa09f28fc2623">init</link> (Targs &amp;&amp;...args)</para>
</listitem>
            <listitem><para>static T * <link linkend="_classme_1_1_singleton_1a8810aab25f6fdc043bfac52761a9a260">instance</link> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classme_1_1_singleton_1af5127d54d6c6904173541b404903b599">Singleton</link> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;class T&gt;<?linebreak?>class me::Singleton&lt; T &gt;</title></simplesect>

<para>Ensures there is only one instance of a class, and offers global access to it. 
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>T</entry><entry>
<para>is the class made a singleton </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classme_1_1_singleton_1af5127d54d6c6904173541b404903b599"/><section>
    <title>Singleton()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>Singleton</primary><secondary>me::Singleton&lt; T &gt;</secondary></indexterm>
<indexterm><primary>me::Singleton&lt; T &gt;</primary><secondary>Singleton</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput><link linkend="_classme_1_1_singleton">me::Singleton</link>&lt; T &gt;::Singleton ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classme_1_1_singleton_1a70f85c079fd020a8655eed54e7189845"/><section>
    <title>Singleton()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>Singleton</primary><secondary>me::Singleton&lt; T &gt;</secondary></indexterm>
<indexterm><primary>me::Singleton&lt; T &gt;</primary><secondary>Singleton</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput><link linkend="_classme_1_1_singleton">me::Singleton</link>&lt; T &gt;::Singleton (const <link linkend="_classme_1_1_singleton">Singleton</link>&lt; T &gt; &amp; o)<computeroutput>[delete]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classme_1_1_singleton_1a576834dfbf95c3b929511d2a588866d1"/><section>
    <title>~Singleton()</title>
<indexterm><primary>~Singleton</primary><secondary>me::Singleton&lt; T &gt;</secondary></indexterm>
<indexterm><primary>me::Singleton&lt; T &gt;</primary><secondary>~Singleton</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>virtual <link linkend="_classme_1_1_singleton">me::Singleton</link>&lt; T &gt;::~<link linkend="_classme_1_1_singleton">Singleton</link> ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classme_1_1_singleton_1a919633966a5db8336cffa09f28fc2623"/><section>
    <title>init()</title>
<indexterm><primary>init</primary><secondary>me::Singleton&lt; T &gt;</secondary></indexterm>
<indexterm><primary>me::Singleton&lt; T &gt;</primary><secondary>init</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><computeroutput>template&lt;typename ... Targs&gt; </computeroutput><para><computeroutput>static T * <link linkend="_classme_1_1_singleton">me::Singleton</link>&lt; T &gt;::init (Targs &amp;&amp;... args)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para>
<para>Constructs the instance of class T. 
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>Arguments</entry><entry>
<para>to pass to class T constructor. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_classme_1_1_singleton_1a8810aab25f6fdc043bfac52761a9a260"/><section>
    <title>instance()</title>
<indexterm><primary>instance</primary><secondary>me::Singleton&lt; T &gt;</secondary></indexterm>
<indexterm><primary>me::Singleton&lt; T &gt;</primary><secondary>instance</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>static T * <link linkend="_classme_1_1_singleton">me::Singleton</link>&lt; T &gt;::instance ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para>
<para>Returns the class T instance. If it does not exits, creates it with the default constructor and returns it. <formalpara><title>Returns</title>

<para>Reference to the only instance of class T. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classme_1_1_singleton_1a6745ba60837f9347a75c0cfc27fadfb0"/><section>
    <title>operator=()</title>
<indexterm><primary>operator=</primary><secondary>me::Singleton&lt; T &gt;</secondary></indexterm>
<indexterm><primary>me::Singleton&lt; T &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput><link linkend="_classme_1_1_singleton">Singleton</link>&lt; T &gt; &amp; <link linkend="_classme_1_1_singleton">me::Singleton</link>&lt; T &gt;::operator= (const <link linkend="_classme_1_1_singleton">Singleton</link>&lt; T &gt; &amp; o)<computeroutput>[delete]</computeroutput></computeroutput></para></section>
<para>
The documentation for this class was generated from the following file:</para>
Src/Utils/<link linkend="__singleton_8h">Singleton.h</link></section>
</section>
