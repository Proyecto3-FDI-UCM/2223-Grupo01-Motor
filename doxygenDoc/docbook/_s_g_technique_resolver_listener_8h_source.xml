<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__s_g_technique_resolver_listener_8h_source" xml:lang="en-US">
<title>SGTechniqueResolverListener.h</title>
<indexterm><primary>Src/Render/SGTechniqueResolverListener.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="preprocessor">#pragma&#32;once</emphasis>
2 
3 <emphasis role="preprocessor">#ifndef&#32;__RENDER_SGTECHNIQUERESOLVERLISTENER</emphasis>
4 <emphasis role="preprocessor">#define&#32;__RENDER_SGTECHNIQUERESOLVERLISTENER</emphasis>
5 
6 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__motor_engine_a_p_i_8h">MotorEngine/MotorEngineAPI.h</link>&quot;</emphasis>
7 <emphasis role="preprocessor">#include&#32;&quot;OgreRTShaderSystem.h&quot;</emphasis>
8 <emphasis role="preprocessor">#include&#32;&quot;OgreMaterialManager.h&quot;</emphasis>
9 
10 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespaceme">me</link>&#32;{
16 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="__motor_engine_a_p_i_8h_1ae7d210fc6a9598f82960577024307219">__MOTORENGINE_API</link>&#32;<link linkend="_classme_1_1_s_g_technique_resolver_listener">SGTechniqueResolverListener</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;Ogre::MaterialManager::Listener&#32;{
17 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
18 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_classme_1_1_s_g_technique_resolver_listener">SGTechniqueResolverListener</link>(Ogre::RTShader::ShaderGenerator*&#32;pShaderGenerator);
19 
26 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Ogre::Technique*&#32;handleSchemeNotFound(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>&#32;schemeIndex,
27 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Ogre::String&#32;&amp;schemeName,
28 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Ogre::Material*&#32;originalMaterial,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>&#32;lodIndex,
29 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Ogre::Renderable*&#32;rend)&#32;<emphasis role="keyword">override</emphasis>;
30 
31 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;afterIlluminationPassesCreated(Ogre::Technique*&#32;tech)&#32;<emphasis role="keyword">override</emphasis>;
32 
33 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;beforeIlluminationPassesCleared(Ogre::Technique*&#32;tech)&#32;<emphasis role="keyword">override</emphasis>;
34 
35 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
36 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;shader&#32;generator&#32;instance.</emphasis>
37 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Ogre::RTShader::ShaderGenerator*&#32;<link linkend="_classme_1_1_s_g_technique_resolver_listener_1a91f6b1c04aa719d64755b6db5a22ceb5">mShaderGenerator</link>;&#32;
38 &#32;&#32;&#32;&#32;};
39 }
40 
41 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
