<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classme_1_1_input_manager" xml:lang="en-US">
<title>me::InputManager Class Reference</title>
<indexterm><primary>me::InputManager</primary></indexterm>
<para>
<computeroutput>#include &lt;InputManager.h&gt;</computeroutput>
</para>
<para>Inheritance diagram for me::InputManager:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classme_1_1_input_manager.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classme_1_1_input_manager">InputManager</link> &amp; <link linkend="_classme_1_1_input_manager_1a097291ca4204112b88c9e011a841cd44">operator=</link> (const <link linkend="_classme_1_1_input_manager">InputManager</link> &amp;o)=delete</para>
</listitem>
            <listitem><para><link linkend="_classme_1_1_input_manager_1a76af2005ae1b8b392e07c1729165e228">InputManager</link> (const <link linkend="_classme_1_1_input_manager">InputManager</link> &amp;o)=delete</para>
</listitem>
            <listitem><para><link linkend="_classme_1_1_input_manager_1ac07b6252aae165bce8f3608d23761ecf">~InputManager</link> () override</para>
</listitem>
            <listitem><para>void <link linkend="_classme_1_1_input_manager_1a26f5a6fb4c432d00040156e45853cf98">addEvent</link> (<link linkend="__button_8h_1aeb0e500783d5ab2d59cb0509da33af0c">SDL_EventFilter</link> filter, void *userdata=NULL)</para>
</listitem>
            <listitem><para>void <link linkend="_classme_1_1_input_manager_1a12199fbdbebc969a00d5dcda3fe1b387">deleteEvent</link> (<link linkend="__button_8h_1aeb0e500783d5ab2d59cb0509da33af0c">SDL_EventFilter</link> filter, void *userdata=NULL)</para>
</listitem>
            <listitem><para>bool <link linkend="_classme_1_1_input_manager_1ab7396a5ea3288379cd876b32b6fe2c8c">addButton</link> (std::string name, int player=-1)</para>
</listitem>
            <listitem><para>bool <link linkend="_classme_1_1_input_manager_1a2b90a407cb61f0c568324bbe6cf746e5">addButton</link> (std::string name, <link linkend="_structme_1_1_input">Input</link> input, int player=-1)</para>
</listitem>
            <listitem><para>bool <link linkend="_classme_1_1_input_manager_1a1e641f8f21ac2ba43fc022a97efea43b">deleteButton</link> (std::string name)</para>
</listitem>
            <listitem><para>bool <link linkend="_classme_1_1_input_manager_1a33e300808296f6b3e61b99c491fffd12">addAxis</link> (std::string name, <link linkend="_structme_1_1_axis_info">AxisInfo</link> info)</para>
</listitem>
            <listitem><para>bool <link linkend="_classme_1_1_input_manager_1a3384c2b1f5907fd436af6be072bca448">addAxis</link> (std::string name, <link linkend="_structme_1_1_axis_info">AxisInfo</link> info, <link linkend="_structme_1_1_axis_input">AxisInput</link> input)</para>
</listitem>
            <listitem><para>bool <link linkend="_classme_1_1_input_manager_1a072961e5535cd290a360e3af8fb92be7">deleteAxis</link> (std::string name)</para>
</listitem>
            <listitem><para>bool <link linkend="_classme_1_1_input_manager_1a8bebb9629b541d74f418bba91b027416">addBinding</link> (std::string name, <link linkend="_structme_1_1_input">Input</link> input)</para>
</listitem>
            <listitem><para>bool <link linkend="_classme_1_1_input_manager_1af7d3de9619cf3d754fb8f59ec636cde3">addBinding</link> (std::string name, <link linkend="_structme_1_1_axis_input">AxisInput</link> input)</para>
</listitem>
            <listitem><para>bool <link linkend="_classme_1_1_input_manager_1ab34c3e73e7ee2caac0cc583c97e1e039">deleteBinding</link> (std::string name, <link linkend="_structme_1_1_input">Input</link> input)</para>
</listitem>
            <listitem><para>bool <link linkend="_classme_1_1_input_manager_1aecfba078630a4503db3e27cd34318295">deleteBinding</link> (std::string name, <link linkend="_structme_1_1_axis_input">AxisInput</link> input)</para>
</listitem>
            <listitem><para>bool <link linkend="_classme_1_1_input_manager_1aad30006d6511ba5c563393367851ee14">getButton</link> (std::string name)</para>
</listitem>
            <listitem><para>float <link linkend="_classme_1_1_input_manager_1ad1094f22aae49c3ff590780d8f8ecdbf">getAxis</link> (std::string name)</para>
</listitem>
            <listitem><para>bool <link linkend="_classme_1_1_input_manager_1aa212df8f68741f22a9b5410c6ea48f05">addOnButtonPressedEvent</link> (std::string name, int(*callback)(void *), void *additionalData=NULL)</para>
</listitem>
            <listitem><para>bool <link linkend="_classme_1_1_input_manager_1a77f961528884908c89afb2a01d6f4da9">deleteOnButtonPressedEvent</link> (std::string name, int(*callback)(void *), void *additionalData=NULL)</para>
</listitem>
            <listitem><para><link linkend="_class_vector2">Vector2</link> <link linkend="_classme_1_1_input_manager_1a4c24100552d97f3d2a88e535e0f87ea8">getMousePositon</link> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
Public Member Functions inherited from <link linkend="_classme_1_1_singleton">me::Singleton&lt; InputManager &gt;</link>        <itemizedlist>
            <listitem><para><link linkend="_classme_1_1_singleton_1a70f85c079fd020a8655eed54e7189845">Singleton</link> (const <link linkend="_classme_1_1_singleton">Singleton</link>&lt; <link linkend="_classme_1_1_input_manager">InputManager</link> &gt; &amp;o)=delete</para>
</listitem>
            <listitem><para><link linkend="_classme_1_1_singleton">Singleton</link>&lt; <link linkend="_classme_1_1_input_manager">InputManager</link> &gt; &amp; <link linkend="_classme_1_1_singleton_1a6745ba60837f9347a75c0cfc27fadfb0">operator=</link> (const <link linkend="_classme_1_1_singleton">Singleton</link>&lt; <link linkend="_classme_1_1_input_manager">InputManager</link> &gt; &amp;o)=delete</para>
</listitem>
            <listitem><para>virtual <link linkend="_classme_1_1_singleton_1a576834dfbf95c3b929511d2a588866d1">~Singleton</link> ()</para>
</listitem>
        </itemizedlist>
<simplesect>
    <title>Additional Inherited Members    </title>
Static Public Member Functions inherited from <link linkend="_classme_1_1_singleton">me::Singleton&lt; InputManager &gt;</link>        <itemizedlist>
            <listitem><para>static <link linkend="_classme_1_1_input_manager">InputManager</link> * <link linkend="_classme_1_1_singleton_1a919633966a5db8336cffa09f28fc2623">init</link> (Targs &amp;&amp;...args)</para>
</listitem>
            <listitem><para>static <link linkend="_classme_1_1_input_manager">InputManager</link> * <link linkend="_classme_1_1_singleton_1a8810aab25f6fdc043bfac52761a9a260">instance</link> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
Protected Member Functions inherited from <link linkend="_classme_1_1_singleton">me::Singleton&lt; InputManager &gt;</link>        <itemizedlist>
            <listitem><para><link linkend="_classme_1_1_singleton_1af5127d54d6c6904173541b404903b599">Singleton</link> ()</para>
</listitem>
        </itemizedlist>
<section>
<title>Detailed Description</title>

<para><link linkend="_classme_1_1_input_manager">InputManager</link> provides information and callbacks for any user input from keyboard, mouse and game controller. Define virtual buttons to easely remap your game&apos;s controls. You can access the <link linkend="_classme_1_1_input_manager">InputManager</link> just calling im(). </para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classme_1_1_input_manager_1a76af2005ae1b8b392e07c1729165e228"/><section>
    <title>InputManager()</title>
<indexterm><primary>InputManager</primary><secondary>me::InputManager</secondary></indexterm>
<indexterm><primary>me::InputManager</primary><secondary>InputManager</secondary></indexterm>
<para><computeroutput>me::InputManager::InputManager (const <link linkend="_classme_1_1_input_manager">InputManager</link> &amp; o)<computeroutput>[delete]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classme_1_1_input_manager_1ac07b6252aae165bce8f3608d23761ecf"/><section>
    <title>~InputManager()</title>
<indexterm><primary>~InputManager</primary><secondary>me::InputManager</secondary></indexterm>
<indexterm><primary>me::InputManager</primary><secondary>~InputManager</secondary></indexterm>
<para><computeroutput>InputManager::~InputManager ( )<computeroutput>[override]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classme_1_1_input_manager_1a33e300808296f6b3e61b99c491fffd12"/><section>
    <title>addAxis()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>addAxis</primary><secondary>me::InputManager</secondary></indexterm>
<indexterm><primary>me::InputManager</primary><secondary>addAxis</secondary></indexterm>
<para><computeroutput>bool InputManager::addAxis (std::string name, <link linkend="_structme_1_1_axis_info">AxisInfo</link> info)</computeroutput></para>
<para>Creates an axis of name name. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>name</entry><entry>
<para>Name of the axis. </para>
</entry>
                            </row>
                            <row>
<entry>info</entry><entry>
<para>Defines the behaviour of the axis. info.gravity is the speed in units per second that the axis falls toward neutral when no input is present and info.dead is how far the user needs to move an analog stick before your application registers the movement. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A boolean representing whether the button could be created. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classme_1_1_input_manager_1a3384c2b1f5907fd436af6be072bca448"/><section>
    <title>addAxis()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>addAxis</primary><secondary>me::InputManager</secondary></indexterm>
<indexterm><primary>me::InputManager</primary><secondary>addAxis</secondary></indexterm>
<para><computeroutput>bool InputManager::addAxis (std::string name, <link linkend="_structme_1_1_axis_info">AxisInfo</link> info, <link linkend="_structme_1_1_axis_input">AxisInput</link> input)</computeroutput></para>
<para>Creates an axis of name name and binds it with some physical input. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>name</entry><entry>
<para>Name of the axis. </para>
</entry>
                            </row>
                            <row>
<entry>info</entry><entry>
<para>Defines the behaviour of the axis. info.gravity is the speed in units per second that the axis falls toward neutral when no input is present and info.dead is how far the user needs to move an analog stick before your application registers the movement. </para>
</entry>
                            </row>
                            <row>
<entry>input</entry><entry>
<para>Represents two physical buttons or keys that can trigger a virtual axis. input.type can be SDL_KeyboardEvent for keyboard key presses, SDL_MouseButtonEvent for mouse clicks, or SDL_ControllerButtonEvent for controller presses; and input.positive and input.negative represents a value of SDL_KeyCode, SDL_BUTTON or SDL_GamepadButton depending on the type of the event </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A boolean representing whether the button could be created. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classme_1_1_input_manager_1af7d3de9619cf3d754fb8f59ec636cde3"/><section>
    <title>addBinding()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>addBinding</primary><secondary>me::InputManager</secondary></indexterm>
<indexterm><primary>me::InputManager</primary><secondary>addBinding</secondary></indexterm>
<para><computeroutput>bool InputManager::addBinding (std::string name, <link linkend="_structme_1_1_axis_input">AxisInput</link> input)</computeroutput></para>
<para>Binds some physical input with a virutal axis, so triggering said input will trigger the virtual axis. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>name</entry><entry>
<para>Name of the axis. </para>
</entry>
                            </row>
                            <row>
<entry>input</entry><entry>
<para>Represents two physical buttons or keys that can trigger a virtual axis. input.type can be SDL_KeyboardEvent for keyboard key presses, SDL_MouseButtonEvent for mouse clicks, or SDL_ControllerButtonEvent for controller presses; and input.positive and input.negative represents a value of SDL_KeyCode, SDL_BUTTON or SDL_GamepadButton depending on the type of the event </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A boolean representing whether the binding was successful. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classme_1_1_input_manager_1a8bebb9629b541d74f418bba91b027416"/><section>
    <title>addBinding()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>addBinding</primary><secondary>me::InputManager</secondary></indexterm>
<indexterm><primary>me::InputManager</primary><secondary>addBinding</secondary></indexterm>
<para><computeroutput>bool InputManager::addBinding (std::string name, <link linkend="_structme_1_1_input">Input</link> input)</computeroutput></para>
<para>Binds some physical input with a virutal button, so triggering said input will trigger the virtual button. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>name</entry><entry>
<para>Name of the button. </para>
</entry>
                            </row>
                            <row>
<entry>input</entry><entry>
<para>Representation of the physical input. input.type can be SDL_KeyboardEvent for keyboard key presses, SDL_MouseButtonEvent for mouse clicks, or SDL_ControllerButtonEvent for controller presses; and input.which represents a value of SDL_KeyCode, SDL_BUTTON or SDL_GamepadButton depending on the type of the event </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A boolean representing whether the binding was successful. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classme_1_1_input_manager_1a2b90a407cb61f0c568324bbe6cf746e5"/><section>
    <title>addButton()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>addButton</primary><secondary>me::InputManager</secondary></indexterm>
<indexterm><primary>me::InputManager</primary><secondary>addButton</secondary></indexterm>
<para><computeroutput>bool InputManager::addButton (std::string name, <link linkend="_structme_1_1_input">Input</link> input, int player = <computeroutput>-1</computeroutput>
)</computeroutput></para>
<para>Creates a button of name name and binds it with some physical input. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>name</entry><entry>
<para>Name of the button. </para>
</entry>
                            </row>
                            <row>
<entry>input</entry><entry>
<para>Representation of the physical input. input.type can be SDL_KeyboardEvent for keyboard key presses, SDL_MouseButtonEvent for mouse clicks, or SDL_ControllerButtonEvent for controller presses; and input.which represents a value of SDL_KeyCode, SDL_BUTTON or SDL_GamepadButton depending on the type of the event </para>
</entry>
                            </row>
                            <row>
<entry>player</entry><entry>
<para>In case it is necessary to differenciate which player inputs a press, <link linkend="_classme_1_1_input_manager">InputManager</link> will dissmiss presses from other players. First player is 0. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A boolean representing whether the button could be created. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classme_1_1_input_manager_1ab7396a5ea3288379cd876b32b6fe2c8c"/><section>
    <title>addButton()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>addButton</primary><secondary>me::InputManager</secondary></indexterm>
<indexterm><primary>me::InputManager</primary><secondary>addButton</secondary></indexterm>
<para><computeroutput>bool InputManager::addButton (std::string name, int player = <computeroutput>-1</computeroutput>
)</computeroutput></para>
<para>Creates a button of name name. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>name</entry><entry>
<para>Name of the button. </para>
</entry>
                            </row>
                            <row>
<entry>player</entry><entry>
<para>In case it is necessary to differenciate which player inputs a press, <link linkend="_classme_1_1_input_manager">InputManager</link> will dissmiss presses from other players. First player is 0. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A boolean representing whether the button could be created. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classme_1_1_input_manager_1a26f5a6fb4c432d00040156e45853cf98"/><section>
    <title>addEvent()</title>
<indexterm><primary>addEvent</primary><secondary>me::InputManager</secondary></indexterm>
<indexterm><primary>me::InputManager</primary><secondary>addEvent</secondary></indexterm>
<para><computeroutput>void InputManager::addEvent (<link linkend="__button_8h_1aeb0e500783d5ab2d59cb0509da33af0c">SDL_EventFilter</link> filter, void * userdata = <computeroutput>NULL</computeroutput>
)</computeroutput></para>
<para>Calls filter everytime an SDL_Event is processed. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>filter</entry><entry>
<para>is a function with the format: int (<emphasis>SDL_EventFilter)(void</emphasis> userdata, SDL_Event* event). It is recommended to check the type of the event in it. </para>
</entry>
                            </row>
                            <row>
<entry>userdata</entry><entry>
<para>is a pointer to additional information to use in the callback. It is NULL by default. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_classme_1_1_input_manager_1aa212df8f68741f22a9b5410c6ea48f05"/><section>
    <title>addOnButtonPressedEvent()</title>
<indexterm><primary>addOnButtonPressedEvent</primary><secondary>me::InputManager</secondary></indexterm>
<indexterm><primary>me::InputManager</primary><secondary>addOnButtonPressedEvent</secondary></indexterm>
<para><computeroutput>bool InputManager::addOnButtonPressedEvent (std::string name, int(*)(void *) callback, void * additionalData = <computeroutput>NULL</computeroutput>
)</computeroutput></para>
<para>Binds a callback to a virtual button, so it&apos;s executed anytime it&apos;s triggered. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>name</entry><entry>
<para>Name of the button </para>
</entry>
                            </row>
                            <row>
<entry>callback</entry><entry>
<para>Callback to be binded to button name </para>
</entry>
                            </row>
                            <row>
<entry>additionalData</entry><entry>
<para>Parameter that the callback would be called with and it may use. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Whether the callback could be binded to the button </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classme_1_1_input_manager_1a072961e5535cd290a360e3af8fb92be7"/><section>
    <title>deleteAxis()</title>
<indexterm><primary>deleteAxis</primary><secondary>me::InputManager</secondary></indexterm>
<indexterm><primary>me::InputManager</primary><secondary>deleteAxis</secondary></indexterm>
<para><computeroutput>bool InputManager::deleteAxis (std::string name)</computeroutput></para>
<para>Deletes axis name and any bindings it may have. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>name</entry><entry>
<para>Name of the axis. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A boolean representing whether the axis was deleted. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classme_1_1_input_manager_1aecfba078630a4503db3e27cd34318295"/><section>
    <title>deleteBinding()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>deleteBinding</primary><secondary>me::InputManager</secondary></indexterm>
<indexterm><primary>me::InputManager</primary><secondary>deleteBinding</secondary></indexterm>
<para><computeroutput>bool InputManager::deleteBinding (std::string name, <link linkend="_structme_1_1_axis_input">AxisInput</link> input)</computeroutput></para>
<para>Unlinks an axis with some physical input 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>name</entry><entry>
<para>Name of the axis. </para>
</entry>
                            </row>
                            <row>
<entry>input</entry><entry>
<para>Represents two physical buttons or keys that can trigger a virtual axis. input.type can be SDL_KeyboardEvent for keyboard key presses, SDL_MouseButtonEvent for mouse clicks, or SDL_ControllerButtonEvent for controller presses; and input.positive and input.negative represents a value of SDL_KeyCode, SDL_BUTTON or SDL_GamepadButton depending on the type of the event </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A boolean representing whether the binding was deleted. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classme_1_1_input_manager_1ab34c3e73e7ee2caac0cc583c97e1e039"/><section>
    <title>deleteBinding()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>deleteBinding</primary><secondary>me::InputManager</secondary></indexterm>
<indexterm><primary>me::InputManager</primary><secondary>deleteBinding</secondary></indexterm>
<para><computeroutput>bool InputManager::deleteBinding (std::string name, <link linkend="_structme_1_1_input">Input</link> input)</computeroutput></para>
<para>Unlinks a button with some physical input 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>name</entry><entry>
<para>Name of the button. </para>
</entry>
                            </row>
                            <row>
<entry>input</entry><entry>
<para>Representation of the physical input. input.type can be SDL_KeyboardEvent for keyboard key presses, SDL_MouseButtonEvent for mouse clicks, or SDL_ControllerButtonEvent for controller presses; and input.which represents a value of SDL_KeyCode, SDL_BUTTON or SDL_GamepadButton depending on the type of the event </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A boolean representing whether the binding was deleted. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classme_1_1_input_manager_1a1e641f8f21ac2ba43fc022a97efea43b"/><section>
    <title>deleteButton()</title>
<indexterm><primary>deleteButton</primary><secondary>me::InputManager</secondary></indexterm>
<indexterm><primary>me::InputManager</primary><secondary>deleteButton</secondary></indexterm>
<para><computeroutput>bool InputManager::deleteButton (std::string name)</computeroutput></para>
<para>Deletes button name and any bindings it may have. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>name</entry><entry>
<para>Name of the button. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A boolean representing whether the button was deleted. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classme_1_1_input_manager_1a12199fbdbebc969a00d5dcda3fe1b387"/><section>
    <title>deleteEvent()</title>
<indexterm><primary>deleteEvent</primary><secondary>me::InputManager</secondary></indexterm>
<indexterm><primary>me::InputManager</primary><secondary>deleteEvent</secondary></indexterm>
<para><computeroutput>void InputManager::deleteEvent (<link linkend="__button_8h_1aeb0e500783d5ab2d59cb0509da33af0c">SDL_EventFilter</link> filter, void * userdata = <computeroutput>NULL</computeroutput>
)</computeroutput></para>
<para>Deletes filter from the SDLEventWatch. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>filter</entry><entry>
<para>is the same function used to add the callback. </para>
</entry>
                            </row>
                            <row>
<entry>userdata</entry><entry>
<para>is the same additional information used when adding the callback. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_classme_1_1_input_manager_1a77f961528884908c89afb2a01d6f4da9"/><section>
    <title>deleteOnButtonPressedEvent()</title>
<indexterm><primary>deleteOnButtonPressedEvent</primary><secondary>me::InputManager</secondary></indexterm>
<indexterm><primary>me::InputManager</primary><secondary>deleteOnButtonPressedEvent</secondary></indexterm>
<para><computeroutput>bool InputManager::deleteOnButtonPressedEvent (std::string name, int(*)(void *) callback, void * additionalData = <computeroutput>NULL</computeroutput>
)</computeroutput></para>
<para>Unbinds a callback from its virtual button, so it&apos;s never executed again anytime its button is triggered. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>name</entry><entry>
<para>Name of the button </para>
</entry>
                            </row>
                            <row>
<entry>callback</entry><entry>
<para>Callback to be unbinded to button name </para>
</entry>
                            </row>
                            <row>
<entry>additionalData</entry><entry>
<para>is the same additional information used when the callback was binded. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Whether the callback could be unbinded to the button </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classme_1_1_input_manager_1ad1094f22aae49c3ff590780d8f8ecdbf"/><section>
    <title>getAxis()</title>
<indexterm><primary>getAxis</primary><secondary>me::InputManager</secondary></indexterm>
<indexterm><primary>me::InputManager</primary><secondary>getAxis</secondary></indexterm>
<para><computeroutput>float InputManager::getAxis (std::string name)</computeroutput></para>
<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>name</entry><entry>
<para>Name of the axis. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The value of the axis in range [-1, 1]. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classme_1_1_input_manager_1aad30006d6511ba5c563393367851ee14"/><section>
    <title>getButton()</title>
<indexterm><primary>getButton</primary><secondary>me::InputManager</secondary></indexterm>
<indexterm><primary>me::InputManager</primary><secondary>getButton</secondary></indexterm>
<para><computeroutput>bool InputManager::getButton (std::string name)</computeroutput></para>
<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>name</entry><entry>
<para>Name of the button. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The state of the button. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classme_1_1_input_manager_1a4c24100552d97f3d2a88e535e0f87ea8"/><section>
    <title>getMousePositon()</title>
<indexterm><primary>getMousePositon</primary><secondary>me::InputManager</secondary></indexterm>
<indexterm><primary>me::InputManager</primary><secondary>getMousePositon</secondary></indexterm>
<para><computeroutput><link linkend="_class_vector2">Vector2</link> me::InputManager::getMousePositon ( )</computeroutput></para></section>
<anchor xml:id="_classme_1_1_input_manager_1a097291ca4204112b88c9e011a841cd44"/><section>
    <title>operator=()</title>
<indexterm><primary>operator=</primary><secondary>me::InputManager</secondary></indexterm>
<indexterm><primary>me::InputManager</primary><secondary>operator=</secondary></indexterm>
<para><computeroutput><link linkend="_classme_1_1_input_manager">InputManager</link> &amp; me::InputManager::operator= (const <link linkend="_classme_1_1_input_manager">InputManager</link> &amp; o)<computeroutput>[delete]</computeroutput></computeroutput></para></section>
<para>
The documentation for this class was generated from the following files:</para>
Src/Input/<link linkend="__input_manager_8h">InputManager.h</link>Src/Input/<link linkend="__input_manager_8cpp">InputManager.cpp</link></section>
</section>
