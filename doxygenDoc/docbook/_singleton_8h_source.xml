<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__singleton_8h_source" xml:lang="en-US">
<title>Singleton.h</title>
<indexterm><primary>Src/Utils/Singleton.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">/*Clase&#32;implementada&#32;en&#32;el&#32;h&#32;porque&#32;al&#32;ser&#32;template&#32;y&#32;estar&#32;en&#32;el&#32;primer</emphasis>
2 <emphasis role="comment">proyecto&#32;que&#32;se&#32;compila,&#32;al&#32;compilarse&#32;nadie&#32;la&#32;llama&#32;y&#32;no&#32;genera&#32;ninguna</emphasis>
3 <emphasis role="comment">instancia.&#32;Deben&#32;ser&#32;los&#32;otros&#32;proyectos&#32;los&#32;que&#32;generen&#32;las&#32;distintas</emphasis>
4 <emphasis role="comment">instancias&#32;de&#32;singleton.*/</emphasis>
5 
6 <emphasis role="preprocessor">#pragma&#32;once</emphasis>
7 <emphasis role="preprocessor">#ifndef&#32;__UTILS_SINGLETON</emphasis>
8 <emphasis role="preprocessor">#define&#32;__UTILS_SINGLETON</emphasis>
9 
10 <emphasis role="preprocessor">#include&#32;&lt;memory&gt;</emphasis>
11 <emphasis role="preprocessor">#ifdef&#32;_DEBUG</emphasis>
12 <emphasis role="preprocessor">#include&#32;&lt;typeinfo&gt;</emphasis>
13 <emphasis role="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
14 <emphasis role="preprocessor">#endif</emphasis>
15 
16 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespaceme">me</link>&#32;{
17 &#32;&#32;&#32;&#32;
18 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;T&gt;
23 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classme_1_1_singleton">Singleton</link>&#32;{
24 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
25 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//The&#32;only&#32;instance&#32;of&#32;class&#32;T</emphasis>
26 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::unique_ptr&lt;T&gt;&#32;mInstance;
27 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
28 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
29 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classme_1_1_singleton_1af5127d54d6c6904173541b404903b599">Singleton</link>()&#32;{};
30 
31 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
32 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classme_1_1_singleton">Singleton&lt;T&gt;</link>&amp;&#32;<link linkend="_classme_1_1_singleton_1a6745ba60837f9347a75c0cfc27fadfb0">operator=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classme_1_1_singleton">Singleton&lt;T&gt;</link>&amp;&#32;o)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
33 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classme_1_1_singleton_1a70f85c079fd020a8655eed54e7189845">Singleton</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classme_1_1_singleton">Singleton&lt;T&gt;</link>&amp;&#32;o)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
34 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_classme_1_1_singleton_1a576834dfbf95c3b929511d2a588866d1">~Singleton</link>()&#32;{}
35 
40 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;...Targs&gt;
41 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;T*&#32;<link linkend="_classme_1_1_singleton_1a919633966a5db8336cffa09f28fc2623">init</link>(Targs&#32;&amp;&amp;...args)&#32;{
42 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(mInstance.get()&#32;==&#32;<emphasis role="keyword">nullptr</emphasis>)&#32;{
43 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mInstance.reset(<emphasis role="keyword">new</emphasis>&#32;T(std::forward&lt;Targs&gt;(args)...));
44 <emphasis role="preprocessor">#ifdef&#32;_DEBUG</emphasis>
45 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Singleton:&#32;Instance&#32;of&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<emphasis role="keyword">typeid</emphasis>(T).name()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;created.\n&quot;</emphasis>;
46 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
47 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
48 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Singleton&#32;error:&#32;There&#32;already&#32;is&#32;an&#32;instance&#32;of&#32;class&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<emphasis role="keyword">typeid</emphasis>(T).name()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;.\n&quot;</emphasis>;
49 <emphasis role="preprocessor">#endif</emphasis>
50 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
51 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;mInstance.get();
52 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
53 
59 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;T*&#32;<link linkend="_classme_1_1_singleton_1a8810aab25f6fdc043bfac52761a9a260">instance</link>()&#32;{
60 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(mInstance.get()&#32;==&#32;<emphasis role="keyword">nullptr</emphasis>)
61 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classme_1_1_singleton_1a919633966a5db8336cffa09f28fc2623">init</link>();
62 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;mInstance.get();
63 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
64 &#32;&#32;&#32;&#32;};
65 
66 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;T&gt;
67 &#32;&#32;&#32;&#32;std::unique_ptr&lt;T&gt;&#32;Singleton&lt;T&gt;::mInstance;
68 }
69 
70 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
