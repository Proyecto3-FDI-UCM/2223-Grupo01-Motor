<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__render_mesh_8h_source" xml:lang="en-US">
<title>RenderMesh.h</title>
<indexterm><primary>Src/Render/RenderMesh.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="preprocessor">#pragma&#32;once</emphasis>
2 <emphasis role="preprocessor">#ifndef&#32;__RENDER_RENDERMESH</emphasis>
3 <emphasis role="preprocessor">#define&#32;__RENDER_RENDERMESH</emphasis>
4 
5 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__motor_engine_a_p_i_8h">MotorEngine/MotorEngineAPI.h</link>&quot;</emphasis>
6 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
7 <emphasis role="preprocessor">#include&#32;&lt;OgreVector3.h&gt;</emphasis>
8 
9 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_ogre">Ogre</link>&#32;{
10 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>SceneNode;
11 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>Quaternion;
12 }
13 
14 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespaceme">me</link>&#32;{
15 
16 &#32;&#32;&#32;&#32;<emphasis role="comment">//Class&#32;to&#32;create&#32;renderizable&#32;object&#32;with&#32;mesh</emphasis>
17 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="__motor_engine_a_p_i_8h_1ae7d210fc6a9598f82960577024307219">__MOTORENGINE_API</link>&#32;<link linkend="_classme_1_1_render_mesh">RenderMesh</link>
18 &#32;&#32;&#32;&#32;{
19 
20 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
21 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
22 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Reference&#32;to&#32;Ogre::SceneNode&#32;for&#32;renderize</emphasis>
23 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Ogre::SceneNode*&#32;<link linkend="_classme_1_1_render_mesh_1a7b0503d0a84d1e528ea9c450ab48a0c1">mNode</link>;
24 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Reference&#32;to&#32;Ogre::Entity&#32;for&#32;renderize</emphasis>
25 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Ogre::Entity*&#32;<link linkend="_classme_1_1_render_mesh_1a10ec5689b8d395b7a3313731a67530e5">mEntity</link>;
26 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Name&#32;of&#32;mesh&#32;that&#32;used</emphasis>
27 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_classme_1_1_render_mesh_1a8ddfbdf2193533e71721139fd2332332">mMeshName</link>;
28 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_classme_1_1_render_mesh_1ab3dc00d2951b2f5ee467f87b2810d460">mMaterialName</link>;
29 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
30 
31 
32 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
39 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classme_1_1_render_mesh">RenderMesh</link>(Ogre::SceneNode*&#32;node,std::string&#32;meshName);
40 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classme_1_1_render_mesh">~RenderMesh</link>();
41 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Set&#32;position,&#32;rotation&#32;and&#32;scale&#32;of&#32;mNode</emphasis>
42 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;setTransform(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_ogre_1_1_vector">Ogre::Vector3f</link>&#32;&amp;pos,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_ogre_1_1_vector">Ogre::Vector3f</link>&#32;&amp;scale,&#32;<emphasis role="keyword">const</emphasis>&#32;Ogre::Quaternion&#32;&amp;rot);
43 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;setPosition(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_ogre_1_1_vector">Ogre::Vector3f</link>&#32;&amp;pos);
44 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;setScale(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_ogre_1_1_vector">Ogre::Vector3f</link>&#32;&amp;scale);
45 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;setRotation(Ogre::Quaternion&#32;rot);
46 
50 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Ogre::Entity*&#32;getOgreEntity();
51 
57 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;setMaterial(std::string&#32;materialName);
58 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
59 
60 &#32;&#32;&#32;&#32;};
61 
62 }
63 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
