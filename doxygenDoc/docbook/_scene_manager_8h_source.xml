<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__scene_manager_8h_source" xml:lang="en-US">
<title>SceneManager.h</title>
<indexterm><primary>Src/EntityComponent/SceneManager.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="preprocessor">#pragma&#32;once</emphasis>
2 
3 <emphasis role="preprocessor">#ifndef&#32;__ENTITYCOMPONENT_SCENE_MANAGER</emphasis>
4 <emphasis role="preprocessor">#define&#32;__ENTITYCOMPONENT_SCENE_MANAGER</emphasis>
5 
6 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__motor_engine_a_p_i_8h">MotorEngine/MotorEngineAPI.h</link>&quot;</emphasis>
7 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__singleton_8h">Utils/Singleton.h</link>&quot;</emphasis>
8 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__info_scene_8h">InfoScene.h</link>&quot;</emphasis>
9 <emphasis role="preprocessor">#include&#32;&lt;memory&gt;</emphasis>
10 
11 <emphasis role="keyword">class&#32;</emphasis>lua_State;
12 
13 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespaceme">me</link>&#32;{
14 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>Scene;
15 
16 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="__motor_engine_a_p_i_8h_1ae7d210fc6a9598f82960577024307219">__MOTORENGINE_API</link>&#32;<link linkend="_classme_1_1_scene_manager">SceneManager</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_classme_1_1_singleton">Singleton</link>&lt;SceneManager&gt;&#32;{
17 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<link linkend="_classme_1_1_singleton">Singleton&lt;SceneManager&gt;</link>;
18 
19 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
20 
24 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classme_1_1_scene_manager">SceneManager</link>();
25 
30 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_classme_1_1_scene_manager">~SceneManager</link>();
31 
37 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::shared_ptr&lt;Scene&gt;&#32;addScene(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;name);
38 
44 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;removeScene(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;name);
45 
51 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::shared_ptr&lt;Scene&gt;&#32;getScene(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;name)&#32;<emphasis role="keyword">const</emphasis>;
52 
56 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;std::shared_ptr&lt;Scene&gt;&#32;<link linkend="_classme_1_1_scene_manager_1adb934d5cbbe79b5dd01eb6f7a8036561">getActiveScene</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
57 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;mActiveScene;
58 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
59 
65 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;renameScene(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;oldName,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;newName);
66 
72 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;setActiveScene(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;name);
73 
79 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;update();
80 
89 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;loadEntities(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;sceneName);
90 
91 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
92 
93 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
94 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;This&#32;function&#32;parses&#32;the&#32;.lua&#32;file&#32;to&#32;the&#32;unordered_map.</emphasis>
95 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;@param&#32;L&#32;is&#32;the&#32;lua_State&#32;that&#32;was&#32;opened&#32;by&#32;the&#32;function&#32;loadEntities</emphasis>
96 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;@returns&#32;Error&#32;Value,&#32;0&#32;if&#32;loadEntities&#32;worked&#32;correctly&#32;or&#32;1&#32;if</emphasis>
97 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;some&#32;error&#32;appeared&#32;during&#32;this&#32;function</emphasis>
98 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
99 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;readEntities(lua_State*&#32;L);
100 
101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
102 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;This&#32;function&#32;calls&#32;the&#32;active&#32;scene&#32;and&#32;passes&#32;the&#32;unordered_map&#32;with&#32;all&#32;the&#32;entities&#32;information</emphasis>
103 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;pushEntities();
105 
106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::unordered_map&lt;std::string,&#32;std::shared_ptr&lt;Scene&gt;&gt;&#32;mScenes;
107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::shared_ptr&lt;Scene&gt;&#32;mActiveScene;
108 
109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceme_1a37719813e3fb0545c6e4b9165b9215c1">InfoScene</link>&#32;mEntitiesMap;
110 &#32;&#32;&#32;&#32;};
111 
116 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classme_1_1_scene_manager">SceneManager</link>&amp;&#32;<link linkend="_namespaceme_1acac54ce3805b69e3433ac8712a35450c">sceneManager</link>()&#32;{
117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<link linkend="_classme_1_1_singleton_1a8810aab25f6fdc043bfac52761a9a260">SceneManager::instance</link>();
118 &#32;&#32;&#32;&#32;};
119 
120 };
121 
122 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
