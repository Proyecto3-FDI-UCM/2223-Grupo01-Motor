<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classme_1_1_s_g_technique_resolver_listener" xml:lang="en-US">
<title>me::SGTechniqueResolverListener Class Reference</title>
<indexterm><primary>me::SGTechniqueResolverListener</primary></indexterm>
<para>
<computeroutput>#include &lt;SGTechniqueResolverListener.h&gt;</computeroutput>
</para>
<para>Inheritance diagram for me::SGTechniqueResolverListener:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classme_1_1_s_g_technique_resolver_listener.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classme_1_1_s_g_technique_resolver_listener_1a9cc216a56f6a8af0dc98a28967c2d1a3">SGTechniqueResolverListener</link> (Ogre::RTShader::ShaderGenerator *pShaderGenerator)</para>
</listitem>
            <listitem><para>Ogre::Technique * <link linkend="_classme_1_1_s_g_technique_resolver_listener_1abc31ab50e9f0b9f8bf3b4054de39d727">handleSchemeNotFound</link> (unsigned short schemeIndex, const Ogre::String &amp;schemeName, Ogre::Material *originalMaterial, unsigned short lodIndex, const Ogre::Renderable *rend) override</para>
</listitem>
            <listitem><para>bool <link linkend="_classme_1_1_s_g_technique_resolver_listener_1a5d20371aca4ef2710ea67cd3da66fe10">afterIlluminationPassesCreated</link> (Ogre::Technique *tech) override</para>
</listitem>
            <listitem><para>bool <link linkend="_classme_1_1_s_g_technique_resolver_listener_1a3491c60cfd064a7501b34e0f179aded7">beforeIlluminationPassesCleared</link> (Ogre::Technique *tech) override</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Attributes    </title>
        <itemizedlist>
            <listitem><para>Ogre::RTShader::ShaderGenerator * <link linkend="_classme_1_1_s_g_technique_resolver_listener_1a91f6b1c04aa719d64755b6db5a22ceb5">mShaderGenerator</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Default implementation of a Listener to use with the <link linkend="_namespace_ogre_1_1_r_t_shader">Ogre::RTShader</link> system. When a target scheme callback is invoked with the shader generator scheme it tries to create an equivalent shader based technique based on the default technique of the given material. </para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classme_1_1_s_g_technique_resolver_listener_1a9cc216a56f6a8af0dc98a28967c2d1a3"/><section>
    <title>SGTechniqueResolverListener()</title>
<indexterm><primary>SGTechniqueResolverListener</primary><secondary>me::SGTechniqueResolverListener</secondary></indexterm>
<indexterm><primary>me::SGTechniqueResolverListener</primary><secondary>SGTechniqueResolverListener</secondary></indexterm>
<para><computeroutput>me::SGTechniqueResolverListener::SGTechniqueResolverListener (Ogre::RTShader::ShaderGenerator * pShaderGenerator)<computeroutput>[explicit]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classme_1_1_s_g_technique_resolver_listener_1a5d20371aca4ef2710ea67cd3da66fe10"/><section>
    <title>afterIlluminationPassesCreated()</title>
<indexterm><primary>afterIlluminationPassesCreated</primary><secondary>me::SGTechniqueResolverListener</secondary></indexterm>
<indexterm><primary>me::SGTechniqueResolverListener</primary><secondary>afterIlluminationPassesCreated</secondary></indexterm>
<para><computeroutput>bool me::SGTechniqueResolverListener::afterIlluminationPassesCreated (Ogre::Technique * tech)<computeroutput>[override]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classme_1_1_s_g_technique_resolver_listener_1a3491c60cfd064a7501b34e0f179aded7"/><section>
    <title>beforeIlluminationPassesCleared()</title>
<indexterm><primary>beforeIlluminationPassesCleared</primary><secondary>me::SGTechniqueResolverListener</secondary></indexterm>
<indexterm><primary>me::SGTechniqueResolverListener</primary><secondary>beforeIlluminationPassesCleared</secondary></indexterm>
<para><computeroutput>bool me::SGTechniqueResolverListener::beforeIlluminationPassesCleared (Ogre::Technique * tech)<computeroutput>[override]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classme_1_1_s_g_technique_resolver_listener_1abc31ab50e9f0b9f8bf3b4054de39d727"/><section>
    <title>handleSchemeNotFound()</title>
<indexterm><primary>handleSchemeNotFound</primary><secondary>me::SGTechniqueResolverListener</secondary></indexterm>
<indexterm><primary>me::SGTechniqueResolverListener</primary><secondary>handleSchemeNotFound</secondary></indexterm>
<para><computeroutput>Ogre::Technique * me::SGTechniqueResolverListener::handleSchemeNotFound (unsigned short schemeIndex, const Ogre::String &amp; schemeName, Ogre::Material * originalMaterial, unsigned short lodIndex, const Ogre::Renderable * rend)<computeroutput>[override]</computeroutput></computeroutput></para>
<para>This is the hook point where shader based technique will be created. It will be called whenever the material manager won&apos;t find appropriate technique that satisfy the target scheme name. If the scheme name is out target RT Shader System scheme name we will try to create shader generated technique for it. </para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_classme_1_1_s_g_technique_resolver_listener_1a91f6b1c04aa719d64755b6db5a22ceb5"/><section>
    <title>mShaderGenerator</title>
<indexterm><primary>mShaderGenerator</primary><secondary>me::SGTechniqueResolverListener</secondary></indexterm>
<indexterm><primary>me::SGTechniqueResolverListener</primary><secondary>mShaderGenerator</secondary></indexterm>
<para><computeroutput>Ogre::RTShader::ShaderGenerator* me::SGTechniqueResolverListener::mShaderGenerator<computeroutput>[protected]</computeroutput></computeroutput></para></section>
<para>
The documentation for this class was generated from the following files:</para>
Src/Render/<link linkend="__s_g_technique_resolver_listener_8h">SGTechniqueResolverListener.h</link>Src/Render/<link linkend="__s_g_technique_resolver_listener_8cpp">SGTechniqueResolverListener.cpp</link></section>
</section>
