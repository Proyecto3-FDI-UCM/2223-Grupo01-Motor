<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classme_1_1_scene" xml:lang="en-US">
<title>me::Scene Class Reference</title>
<indexterm><primary>me::Scene</primary></indexterm>
<para>
<computeroutput>#include &lt;Scene.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classme_1_1_scene_1a9610d79b8a2dd2d092603e17e3eca80f">Scene</link> (const <link linkend="_namespaceme_1a7af63ced847cd4a7e0ca4ba5a1688da3">SceneName</link> name)</para>
</listitem>
            <listitem><para>virtual <link linkend="_classme_1_1_scene_1a298e8e0b2716f284e047874be0ae18aa">~Scene</link> ()</para>
</listitem>
            <listitem><para>std::shared_ptr&lt; <link linkend="_classme_1_1_entity">Entity</link> &gt; <link linkend="_classme_1_1_scene_1a240675d5e2ab7d3cc93a38296c362039">addEntity</link> (const <link linkend="_namespaceme_1a4549e57e933271d021f2d5b4cd46c84e">EntityName</link> name)</para>
</listitem>
            <listitem><para>void <link linkend="_classme_1_1_scene_1a47b4d3fd7351e759695c091be1f16cce">removeEntity</link> (const <link linkend="_namespaceme_1a4549e57e933271d021f2d5b4cd46c84e">EntityName</link> &amp;name)</para>
</listitem>
            <listitem><para>std::vector&lt; std::shared_ptr&lt; <link linkend="_classme_1_1_entity">Entity</link> &gt; &gt; <link linkend="_classme_1_1_scene_1a2e082d7c60c03a74ef7ab375a5b9187f">getEntities</link> () const</para>
</listitem>
            <listitem><para>std::shared_ptr&lt; <link linkend="_classme_1_1_entity">Entity</link> &gt; <link linkend="_classme_1_1_scene_1a3cead7c855db457ec65520aa84936cc5">findEntity</link> (const <link linkend="_namespaceme_1a4549e57e933271d021f2d5b4cd46c84e">EntityName</link> &amp;name) const</para>
</listitem>
            <listitem><para>const <link linkend="_namespaceme_1a4549e57e933271d021f2d5b4cd46c84e">EntityName</link> <link linkend="_classme_1_1_scene_1ad3a4b63860b58bd6099c642edfcd0b37">getName</link> () const</para>
</listitem>
            <listitem><para>void <link linkend="_classme_1_1_scene_1aab34b49d48da59f38b1353a11f638109">setName</link> (const <link linkend="_namespaceme_1a7af63ced847cd4a7e0ca4ba5a1688da3">SceneName</link> name)</para>
</listitem>
            <listitem><para>void <link linkend="_classme_1_1_scene_1aba1cafa3873b414d6d1373e4b310cecc">renameEntity</link> (const <link linkend="_namespaceme_1a4549e57e933271d021f2d5b4cd46c84e">EntityName</link> &amp;oldName, const <link linkend="_namespaceme_1a4549e57e933271d021f2d5b4cd46c84e">EntityName</link> &amp;newName)</para>
</listitem>
            <listitem><para>virtual void <link linkend="_classme_1_1_scene_1a6c567df3aa3cc13c9fc10d2e76ead630">start</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_classme_1_1_scene_1a7b38b1bb2ad9c0d58c9d6b7a24dbdc49">update</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_classme_1_1_scene_1a926bb98a1a2701370385d908317ef96a">lateUpdate</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_classme_1_1_scene_1a696834492d284fa97327eaebe047dc23">refresh</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_classme_1_1_scene_1ac7a79c583363e7b96ec2a1e69c2ad98e">processNewEntities</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_classme_1_1_scene_1a12b45b5136b252eefdc3ef45afc8497e">pushEntities</link> (<link linkend="_namespaceme_1a37719813e3fb0545c6e4b9165b9215c1">InfoScene</link> &amp;entitiesMap)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Attributes    </title>
        <itemizedlist>
            <listitem><para><link linkend="_namespaceme_1a7af63ced847cd4a7e0ca4ba5a1688da3">SceneName</link> <link linkend="_classme_1_1_scene_1aeb63ee8ae73ceeead581c3cde895291e">mName</link></para>
</listitem>
            <listitem><para>std::vector&lt; std::shared_ptr&lt; <link linkend="_classme_1_1_entity">Entity</link> &gt; &gt; <link linkend="_classme_1_1_scene_1ade7e79aada5fbdbf408f05f19da86226">mNewEntities</link></para>
</listitem>
            <listitem><para>std::unordered_map&lt; <link linkend="_namespaceme_1a4549e57e933271d021f2d5b4cd46c84e">EntityName</link>, std::shared_ptr&lt; <link linkend="_classme_1_1_entity">Entity</link> &gt; &gt; <link linkend="_classme_1_1_scene_1ab142ec1bded6510e2cc2d8df88eab0b2">mEntities</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classme_1_1_scene_1a9610d79b8a2dd2d092603e17e3eca80f"/><section>
    <title>Scene()</title>
<indexterm><primary>Scene</primary><secondary>me::Scene</secondary></indexterm>
<indexterm><primary>me::Scene</primary><secondary>Scene</secondary></indexterm>
<para><computeroutput>me::Scene::Scene (const <link linkend="_namespaceme_1a7af63ced847cd4a7e0ca4ba5a1688da3">SceneName</link> name)</computeroutput></para>
<para>Build the foundation of the <link linkend="_classme_1_1_scene">Scene</link>. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>String</entry><entry>
<para>name to identify it. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_classme_1_1_scene_1a298e8e0b2716f284e047874be0ae18aa"/><section>
    <title>~Scene()</title>
<indexterm><primary>~Scene</primary><secondary>me::Scene</secondary></indexterm>
<indexterm><primary>me::Scene</primary><secondary>~Scene</secondary></indexterm>
<para><computeroutput>me::Scene::~Scene ( )<computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>This method is meant to be the definition of the dynamic memory that has to be safely delete. </para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classme_1_1_scene_1a240675d5e2ab7d3cc93a38296c362039"/><section>
    <title>addEntity()</title>
<indexterm><primary>addEntity</primary><secondary>me::Scene</secondary></indexterm>
<indexterm><primary>me::Scene</primary><secondary>addEntity</secondary></indexterm>
<para><computeroutput>std::shared_ptr&lt; <link linkend="_classme_1_1_entity">Entity</link> &gt; me::Scene::addEntity (const <link linkend="_namespaceme_1a4549e57e933271d021f2d5b4cd46c84e">EntityName</link> name)</computeroutput></para>
<para>Prepares a new entity to be safely add to the scene. This assumes that the name is a unique identifier. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>String</entry><entry>
<para>name to identify the new entity. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Created new entity. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classme_1_1_scene_1a3cead7c855db457ec65520aa84936cc5"/><section>
    <title>findEntity()</title>
<indexterm><primary>findEntity</primary><secondary>me::Scene</secondary></indexterm>
<indexterm><primary>me::Scene</primary><secondary>findEntity</secondary></indexterm>
<para><computeroutput>std::shared_ptr&lt; <link linkend="_classme_1_1_entity">Entity</link> &gt; me::Scene::findEntity (const <link linkend="_namespaceme_1a4549e57e933271d021f2d5b4cd46c84e">EntityName</link> &amp; name) const</computeroutput></para>
<para>Finds and returns an entity in the scene with the given name. If no entity with the given name is found or if it&apos;s deactivated, returns nullptr. This assumes that the name is a unique identifier, it there is more than one entity with that name then the first found entity will be return. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>String</entry><entry>
<para>name of the entity to be found. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para><link linkend="_classme_1_1_entity">Entity</link> with the given name, or nullptr if not found. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classme_1_1_scene_1a2e082d7c60c03a74ef7ab375a5b9187f"/><section>
    <title>getEntities()</title>
<indexterm><primary>getEntities</primary><secondary>me::Scene</secondary></indexterm>
<indexterm><primary>me::Scene</primary><secondary>getEntities</secondary></indexterm>
<para><computeroutput>std::vector&lt; std::shared_ptr&lt; <link linkend="_classme_1_1_entity">Entity</link> &gt; &gt; me::Scene::getEntities ( ) const</computeroutput></para>
<para>Get a vector of all entities in the scene. <formalpara><title>Returns</title>

<para>Vector of <link linkend="_classme_1_1_entity">Entity</link> pointers. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classme_1_1_scene_1ad3a4b63860b58bd6099c642edfcd0b37"/><section>
    <title>getName()</title>
<indexterm><primary>getName</primary><secondary>me::Scene</secondary></indexterm>
<indexterm><primary>me::Scene</primary><secondary>getName</secondary></indexterm>
<para><computeroutput>const <link linkend="_namespaceme_1a4549e57e933271d021f2d5b4cd46c84e">EntityName</link> me::Scene::getName ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Get the scene name. <formalpara><title>Returns</title>

<para>String name. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classme_1_1_scene_1a926bb98a1a2701370385d908317ef96a"/><section>
    <title>lateUpdate()</title>
<indexterm><primary>lateUpdate</primary><secondary>me::Scene</secondary></indexterm>
<indexterm><primary>me::Scene</primary><secondary>lateUpdate</secondary></indexterm>
<para><computeroutput>void me::Scene::lateUpdate ( )</computeroutput></para>
<para>This method is meant to be the definition of those updates that has to be processed at the end of the game cycle.</para>

<para>For example: render and collisions. </para>
</section>
<anchor xml:id="_classme_1_1_scene_1ac7a79c583363e7b96ec2a1e69c2ad98e"/><section>
    <title>processNewEntities()</title>
<indexterm><primary>processNewEntities</primary><secondary>me::Scene</secondary></indexterm>
<indexterm><primary>me::Scene</primary><secondary>processNewEntities</secondary></indexterm>
<para><computeroutput>void me::Scene::processNewEntities ( )</computeroutput></para>
<para>Safely adds the new entities from map, by deferring the addition of the new entity to the mEntities map until after the loop has completed. </para>
</section>
<anchor xml:id="_classme_1_1_scene_1a12b45b5136b252eefdc3ef45afc8497e"/><section>
    <title>pushEntities()</title>
<indexterm><primary>pushEntities</primary><secondary>me::Scene</secondary></indexterm>
<indexterm><primary>me::Scene</primary><secondary>pushEntities</secondary></indexterm>
<para><computeroutput>void me::Scene::pushEntities (<link linkend="_namespaceme_1a37719813e3fb0545c6e4b9165b9215c1">InfoScene</link> &amp; entitiesMap)</computeroutput></para>
<para>Safely adds the new entities from unordered_map passed by the sceneManager 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>entitiesMap</entry><entry>
<para>is the unordered_map that contains all the information about the entity and its components. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_classme_1_1_scene_1a696834492d284fa97327eaebe047dc23"/><section>
    <title>refresh()</title>
<indexterm><primary>refresh</primary><secondary>me::Scene</secondary></indexterm>
<indexterm><primary>me::Scene</primary><secondary>refresh</secondary></indexterm>
<para><computeroutput>void me::Scene::refresh ( )</computeroutput></para>
<para>Safely deletes dead entities from map, this means the ones who are deactivate. Fact: std::erase_if() was added to the C++ Standard Library in C++20. </para>
</section>
<anchor xml:id="_classme_1_1_scene_1a47b4d3fd7351e759695c091be1f16cce"/><section>
    <title>removeEntity()</title>
<indexterm><primary>removeEntity</primary><secondary>me::Scene</secondary></indexterm>
<indexterm><primary>me::Scene</primary><secondary>removeEntity</secondary></indexterm>
<para><computeroutput>void me::Scene::removeEntity (const <link linkend="_namespaceme_1a4549e57e933271d021f2d5b4cd46c84e">EntityName</link> &amp; name)</computeroutput></para>
<para>Prepares an entity to be safely remove from the scene. This assumes that the name is a unique identifier. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>String</entry><entry>
<para>name to identify the entity to be remove. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_classme_1_1_scene_1aba1cafa3873b414d6d1373e4b310cecc"/><section>
    <title>renameEntity()</title>
<indexterm><primary>renameEntity</primary><secondary>me::Scene</secondary></indexterm>
<indexterm><primary>me::Scene</primary><secondary>renameEntity</secondary></indexterm>
<para><computeroutput>void me::Scene::renameEntity (const <link linkend="_namespaceme_1a4549e57e933271d021f2d5b4cd46c84e">EntityName</link> &amp; oldName, const <link linkend="_namespaceme_1a4549e57e933271d021f2d5b4cd46c84e">EntityName</link> &amp; newName)</computeroutput></para>
<para>Rename an entity name to the new one. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>String</entry><entry>
<para>oldName to be change. </para>
</entry>
                            </row>
                            <row>
<entry>String</entry><entry>
<para>newName to be set. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_classme_1_1_scene_1aab34b49d48da59f38b1353a11f638109"/><section>
    <title>setName()</title>
<indexterm><primary>setName</primary><secondary>me::Scene</secondary></indexterm>
<indexterm><primary>me::Scene</primary><secondary>setName</secondary></indexterm>
<para><computeroutput>void me::Scene::setName (const <link linkend="_namespaceme_1a7af63ced847cd4a7e0ca4ba5a1688da3">SceneName</link> name)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Set the scene name to the new one. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>String</entry><entry>
<para>name. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_classme_1_1_scene_1a6c567df3aa3cc13c9fc10d2e76ead630"/><section>
    <title>start()</title>
<indexterm><primary>start</primary><secondary>me::Scene</secondary></indexterm>
<indexterm><primary>me::Scene</primary><secondary>start</secondary></indexterm>
<para><computeroutput>void me::Scene::start ( )<computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>This method is only ever called once. This must be called at the instantiation of the script. </para>
</section>
<anchor xml:id="_classme_1_1_scene_1a7b38b1bb2ad9c0d58c9d6b7a24dbdc49"/><section>
    <title>update()</title>
<indexterm><primary>update</primary><secondary>me::Scene</secondary></indexterm>
<indexterm><primary>me::Scene</primary><secondary>update</secondary></indexterm>
<para><computeroutput>void me::Scene::update ( )</computeroutput></para>
<para>This method is meant to be the definition of those updates that has to be processed at the begining of the game cycle.</para>

<para>Almost all the logic updates. </para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_classme_1_1_scene_1ab142ec1bded6510e2cc2d8df88eab0b2"/><section>
    <title>mEntities</title>
<indexterm><primary>mEntities</primary><secondary>me::Scene</secondary></indexterm>
<indexterm><primary>me::Scene</primary><secondary>mEntities</secondary></indexterm>
<para><computeroutput>std::unordered_map&lt;<link linkend="_namespaceme_1a4549e57e933271d021f2d5b4cd46c84e">EntityName</link>, std::shared_ptr&lt;<link linkend="_classme_1_1_entity">Entity</link>&gt; &gt; me::Scene::mEntities<computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classme_1_1_scene_1aeb63ee8ae73ceeead581c3cde895291e"/><section>
    <title>mName</title>
<indexterm><primary>mName</primary><secondary>me::Scene</secondary></indexterm>
<indexterm><primary>me::Scene</primary><secondary>mName</secondary></indexterm>
<para><computeroutput><link linkend="_namespaceme_1a7af63ced847cd4a7e0ca4ba5a1688da3">SceneName</link> me::Scene::mName<computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classme_1_1_scene_1ade7e79aada5fbdbf408f05f19da86226"/><section>
    <title>mNewEntities</title>
<indexterm><primary>mNewEntities</primary><secondary>me::Scene</secondary></indexterm>
<indexterm><primary>me::Scene</primary><secondary>mNewEntities</secondary></indexterm>
<para><computeroutput>std::vector&lt;std::shared_ptr&lt;<link linkend="_classme_1_1_entity">Entity</link>&gt; &gt; me::Scene::mNewEntities<computeroutput>[protected]</computeroutput></computeroutput></para></section>
<para>
The documentation for this class was generated from the following files:</para>
Src/EntityComponent/<link linkend="__scene_8h">Scene.h</link>Src/EntityComponent/<link linkend="__scene_8cpp">Scene.cpp</link></section>
</section>
