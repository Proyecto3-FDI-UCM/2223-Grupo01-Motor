<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classme_1_1_vector3" xml:lang="en-US">
<title>me::Vector3 Class Reference</title>
<indexterm><primary>me::Vector3</primary></indexterm>
<para>
<computeroutput>#include &lt;Vector3.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classme_1_1_vector3_1ac8821c6d2b9ed58a7f9b8c88305e4d36">Vector3</link> ()</para>
</listitem>
            <listitem><para><link linkend="_classme_1_1_vector3_1a1de965b6eb0a8481deae2c985cb61828">Vector3</link> (float a, float b, float c)</para>
</listitem>
            <listitem><para><link linkend="_classme_1_1_vector3_1acedcce13ac1b0827a208c86afe28cd6f">Vector3</link> (const <link linkend="_classme_1_1_vector3">Vector3</link> &amp;v)</para>
</listitem>
            <listitem><para><link linkend="_classme_1_1_vector3">Vector3</link> <link linkend="_classme_1_1_vector3_1a99f85da3057603ccb39f6eb763034f04">operator-</link> (const <link linkend="_classme_1_1_vector3">Vector3</link> &amp;v)</para>
</listitem>
            <listitem><para><link linkend="_classme_1_1_vector3">Vector3</link> <link linkend="_classme_1_1_vector3_1af53975ac627719c8f5cec4d993109a1b">operator-=</link> (const <link linkend="_classme_1_1_vector3">Vector3</link> &amp;v)</para>
</listitem>
            <listitem><para><link linkend="_classme_1_1_vector3">Vector3</link> <link linkend="_classme_1_1_vector3_1a9228f34c33c47c753442a5402aaaf0ba">operator+</link> (const <link linkend="_classme_1_1_vector3">Vector3</link> &amp;v)</para>
</listitem>
            <listitem><para><link linkend="_classme_1_1_vector3">Vector3</link> <link linkend="_classme_1_1_vector3_1a463d61af7a0820031e0380b0a5843194">operator+=</link> (const <link linkend="_classme_1_1_vector3">Vector3</link> &amp;v)</para>
</listitem>
            <listitem><para><link linkend="_classme_1_1_vector3">Vector3</link> <link linkend="_classme_1_1_vector3_1ac57cc7f826080b81bb18a98a7fbd5b03">operator*</link> (const float &amp;s)</para>
</listitem>
            <listitem><para><link linkend="_classme_1_1_vector3">Vector3</link> <link linkend="_classme_1_1_vector3_1a9a86611849b69a8a0a999a792b429b30">operator*=</link> (const float &amp;s)</para>
</listitem>
            <listitem><para>void <link linkend="_classme_1_1_vector3_1a7042bc8cf846ecfe090472cafd19c4de">operator=</link> (const <link linkend="_classme_1_1_vector3">Vector3</link> &amp;v)</para>
</listitem>
            <listitem><para>void <link linkend="_classme_1_1_vector3_1a969763079ad5dc688c283b316c58f04b">operator=</link> (const <link linkend="_classme_1_1_vector3">Vector3</link> *v)</para>
</listitem>
            <listitem><para>void <link linkend="_classme_1_1_vector3_1a2c44bbfe8c2b0c594ce59a0d21dc9e6a">operator=</link> (const btVector3 &amp;v)</para>
</listitem>
            <listitem><para>bool <link linkend="_classme_1_1_vector3_1a6ec99d2e2c0f781c257bf9c2e665ee40">operator==</link> (const <link linkend="_classme_1_1_vector3">Vector3</link> &amp;v)</para>
</listitem>
            <listitem><para>bool <link linkend="_classme_1_1_vector3_1a3bb95b94a0911ae9f1eae66695f65c70">operator!=</link> (const <link linkend="_classme_1_1_vector3">Vector3</link> &amp;v)</para>
</listitem>
            <listitem><para><link linkend="_classme_1_1_vector3">Vector3</link> <link linkend="_classme_1_1_vector3_1aeea975239841f3092d46e3b5fc00e650">lerp</link> (const <link linkend="_classme_1_1_vector3">Vector3</link> &amp;a, const <link linkend="_classme_1_1_vector3">Vector3</link> &amp;b, float f)</para>
</listitem>
            <listitem><para>float <link linkend="_classme_1_1_vector3_1a0502f6bddb56abe607b38ab71cf836cd">magnitude</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_classme_1_1_vector3_1a27f9aa009d2bc1bcb04b0ec131808e4e">normalize</link> ()</para>
</listitem>
            <listitem><para>float <link linkend="_classme_1_1_vector3_1a84741e7d6dfbfffb99f003b553999311">dot</link> (const <link linkend="_classme_1_1_vector3">Vector3</link> &amp;v)</para>
</listitem>
            <listitem><para><link linkend="_classme_1_1_vector3">Vector3</link> <link linkend="_classme_1_1_vector3_1ad2a9b10b8f2f2781005cd75d0298484e">cross</link> (const <link linkend="_classme_1_1_vector3">Vector3</link> &amp;v)</para>
</listitem>
            <listitem><para><link linkend="_classme_1_1_vector3">Vector3</link> <link linkend="_classme_1_1_vector3_1a5bca587233ee8c0c680cf78e90dc9fc5">zero</link> ()</para>
</listitem>
            <listitem><para><link linkend="_classme_1_1_vector3">Vector3</link> <link linkend="_classme_1_1_vector3_1af06c065a31f91da96512e66470a5b2d8">up</link> ()</para>
</listitem>
            <listitem><para><link linkend="_classme_1_1_vector3">Vector3</link> <link linkend="_classme_1_1_vector3_1afc3e8c147fa86dfc49d34ec718c3965f">down</link> ()</para>
</listitem>
            <listitem><para><link linkend="_classme_1_1_vector3">Vector3</link> <link linkend="_classme_1_1_vector3_1ae8ce996e2ba77eb37eee8ce08cf0dcc3">left</link> ()</para>
</listitem>
            <listitem><para><link linkend="_classme_1_1_vector3">Vector3</link> <link linkend="_classme_1_1_vector3_1a5141f62fab57a78d67362f610a80e78d">right</link> ()</para>
</listitem>
            <listitem><para><link linkend="_classme_1_1_vector3">Vector3</link> <link linkend="_classme_1_1_vector3_1a5728ce1ca8624d278e426d31ac94afaa">back</link> ()</para>
</listitem>
            <listitem><para><link linkend="_classme_1_1_vector3">Vector3</link> <link linkend="_classme_1_1_vector3_1aaff942df255dceef6ed6e67e2f3a5e0a">forward</link> ()</para>
</listitem>
            <listitem><para>float <link linkend="_classme_1_1_vector3_1a4deee5dd2e7d7987aeae0f4801853012">distance</link> (const <link linkend="_classme_1_1_vector3">Vector3</link> &amp;v)</para>
</listitem>
            <listitem><para>float <link linkend="_classme_1_1_vector3_1a669c925db6273fd5d5998109c0e8f479">angle</link> (const <link linkend="_classme_1_1_vector3">Vector3</link> &amp;v)</para>
</listitem>
            <listitem><para><link linkend="_namespace_ogre_1a8b4adeb18d1b0fcedea1b58bcbc67879">Ogre::Vector3f</link> <link linkend="_classme_1_1_vector3_1a0be34d0f041fc68996ec5cdd0bff584a">v3ToOgreV3</link> ()</para>
</listitem>
            <listitem><para>btVector3 <link linkend="_classme_1_1_vector3_1acf528d3a6b29fc816a4e3b75b358c878">v3ToBulletV3</link> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Attributes    </title>
        <itemizedlist>
            <listitem><para>float <link linkend="_classme_1_1_vector3_1a9c64642050dc360a016090fc80c063c4">x</link></para>
</listitem>
            <listitem><para>float <link linkend="_classme_1_1_vector3_1ae5654880d96f9bc0b064db5058149bee">y</link></para>
</listitem>
            <listitem><para>float <link linkend="_classme_1_1_vector3_1ac32ec3fedcfc9ca6a6e1260bf55cbeaa">z</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Friends    </title>
        <itemizedlist>
            <listitem><para><link linkend="_namespacestd_1a6a5cbaba415722865ff10d1ee0c559d0">std::ostream</link> &amp; <link linkend="_classme_1_1_vector3_1a3958b94f7c0d4e6620dd4566b49c7676">operator&lt;&lt;</link> (<link linkend="_namespacestd_1a6a5cbaba415722865ff10d1ee0c559d0">std::ostream</link> &amp;os, const <link linkend="_classme_1_1_vector3">Vector3</link> &amp;v)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classme_1_1_vector3_1ac8821c6d2b9ed58a7f9b8c88305e4d36"/><section>
    <title>Vector3()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>Vector3</primary><secondary>me::Vector3</secondary></indexterm>
<indexterm><primary>me::Vector3</primary><secondary>Vector3</secondary></indexterm>
<para><computeroutput>me::Vector3::Vector3 ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classme_1_1_vector3_1a1de965b6eb0a8481deae2c985cb61828"/><section>
    <title>Vector3()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>Vector3</primary><secondary>me::Vector3</secondary></indexterm>
<indexterm><primary>me::Vector3</primary><secondary>Vector3</secondary></indexterm>
<para><computeroutput>me::Vector3::Vector3 (float a, float b, float c)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classme_1_1_vector3_1acedcce13ac1b0827a208c86afe28cd6f"/><section>
    <title>Vector3()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>Vector3</primary><secondary>me::Vector3</secondary></indexterm>
<indexterm><primary>me::Vector3</primary><secondary>Vector3</secondary></indexterm>
<para><computeroutput>me::Vector3::Vector3 (const <link linkend="_classme_1_1_vector3">Vector3</link> &amp; v)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classme_1_1_vector3_1a669c925db6273fd5d5998109c0e8f479"/><section>
    <title>angle()</title>
<indexterm><primary>angle</primary><secondary>me::Vector3</secondary></indexterm>
<indexterm><primary>me::Vector3</primary><secondary>angle</secondary></indexterm>
<para><computeroutput>float Vector3::angle (const <link linkend="_classme_1_1_vector3">Vector3</link> &amp; v)</computeroutput></para>
<para>Returns the angle between this vector and another vector &quot;v&quot;</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>v</entry><entry>
<para>The other vector </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The angle between the two vectors in degrees </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classme_1_1_vector3_1a5728ce1ca8624d278e426d31ac94afaa"/><section>
    <title>back()</title>
<indexterm><primary>back</primary><secondary>me::Vector3</secondary></indexterm>
<indexterm><primary>me::Vector3</primary><secondary>back</secondary></indexterm>
<para><computeroutput><link linkend="_classme_1_1_vector3">Vector3</link> Vector3::back ( )</computeroutput></para>
<para>Returns a unit vector pointing backwards along the z-axis </para>
</section>
<anchor xml:id="_classme_1_1_vector3_1ad2a9b10b8f2f2781005cd75d0298484e"/><section>
    <title>cross()</title>
<indexterm><primary>cross</primary><secondary>me::Vector3</secondary></indexterm>
<indexterm><primary>me::Vector3</primary><secondary>cross</secondary></indexterm>
<para><computeroutput><link linkend="_classme_1_1_vector3">Vector3</link> Vector3::cross (const <link linkend="_classme_1_1_vector3">Vector3</link> &amp; v)</computeroutput></para>
<para>Calculate the cross product between this vector and another vector &quot;v&quot;</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>v</entry><entry>
<para>The other vector to calculate the cross product with </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The cross product of the two vectors </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classme_1_1_vector3_1a4deee5dd2e7d7987aeae0f4801853012"/><section>
    <title>distance()</title>
<indexterm><primary>distance</primary><secondary>me::Vector3</secondary></indexterm>
<indexterm><primary>me::Vector3</primary><secondary>distance</secondary></indexterm>
<para><computeroutput>float Vector3::distance (const <link linkend="_classme_1_1_vector3">Vector3</link> &amp; v)</computeroutput></para>
<para>Returns the distance between this vector and another vector &quot;v&quot;</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>v</entry><entry>
<para>The other vector </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The distance between the two vectors </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classme_1_1_vector3_1a84741e7d6dfbfffb99f003b553999311"/><section>
    <title>dot()</title>
<indexterm><primary>dot</primary><secondary>me::Vector3</secondary></indexterm>
<indexterm><primary>me::Vector3</primary><secondary>dot</secondary></indexterm>
<para><computeroutput>float Vector3::dot (const <link linkend="_classme_1_1_vector3">Vector3</link> &amp; v)</computeroutput></para>
<para>Calculate the dot product between this vector and another vector &quot;v&quot;</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>v</entry><entry>
<para>The other vector to calculate the dot product with </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The dot product of the two vectors </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classme_1_1_vector3_1afc3e8c147fa86dfc49d34ec718c3965f"/><section>
    <title>down()</title>
<indexterm><primary>down</primary><secondary>me::Vector3</secondary></indexterm>
<indexterm><primary>me::Vector3</primary><secondary>down</secondary></indexterm>
<para><computeroutput><link linkend="_classme_1_1_vector3">Vector3</link> Vector3::down ( )</computeroutput></para>
<para>Returns a unit vector pointing downwards along the y-axis </para>
</section>
<anchor xml:id="_classme_1_1_vector3_1aaff942df255dceef6ed6e67e2f3a5e0a"/><section>
    <title>forward()</title>
<indexterm><primary>forward</primary><secondary>me::Vector3</secondary></indexterm>
<indexterm><primary>me::Vector3</primary><secondary>forward</secondary></indexterm>
<para><computeroutput><link linkend="_classme_1_1_vector3">Vector3</link> Vector3::forward ( )</computeroutput></para>
<para>Returns a unit vector pointing forwards along the z-axis </para>
</section>
<anchor xml:id="_classme_1_1_vector3_1ae8ce996e2ba77eb37eee8ce08cf0dcc3"/><section>
    <title>left()</title>
<indexterm><primary>left</primary><secondary>me::Vector3</secondary></indexterm>
<indexterm><primary>me::Vector3</primary><secondary>left</secondary></indexterm>
<para><computeroutput><link linkend="_classme_1_1_vector3">Vector3</link> Vector3::left ( )</computeroutput></para>
<para>Returns a unit vector pointing to the left along the x-axis </para>
</section>
<anchor xml:id="_classme_1_1_vector3_1aeea975239841f3092d46e3b5fc00e650"/><section>
    <title>lerp()</title>
<indexterm><primary>lerp</primary><secondary>me::Vector3</secondary></indexterm>
<indexterm><primary>me::Vector3</primary><secondary>lerp</secondary></indexterm>
<para><computeroutput><link linkend="_classme_1_1_vector3">Vector3</link> Vector3::lerp (const <link linkend="_classme_1_1_vector3">Vector3</link> &amp; a, const <link linkend="_classme_1_1_vector3">Vector3</link> &amp; b, float f)</computeroutput></para>
<para>Returns the linear interpolation between &quot;a&quot; and &quot;b&quot; by a factor of &quot;f&quot;</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>a</entry><entry>
<para>The starting vector to interpolate from </para>
</entry>
                            </row>
                            <row>
<entry>b</entry><entry>
<para>The ending vector to interpolate to </para>
</entry>
                            </row>
                            <row>
<entry>f</entry><entry>
<para>The interpolation factor, a value between 0 and 1 </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_classme_1_1_vector3_1a0502f6bddb56abe607b38ab71cf836cd"/><section>
    <title>magnitude()</title>
<indexterm><primary>magnitude</primary><secondary>me::Vector3</secondary></indexterm>
<indexterm><primary>me::Vector3</primary><secondary>magnitude</secondary></indexterm>
<para><computeroutput>float Vector3::magnitude ( )</computeroutput></para>
<para>Calculate the magnitude (length) of the vector</para>

<para><formalpara><title>Returns</title>

<para>The magnitude of the vector </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classme_1_1_vector3_1a27f9aa009d2bc1bcb04b0ec131808e4e"/><section>
    <title>normalize()</title>
<indexterm><primary>normalize</primary><secondary>me::Vector3</secondary></indexterm>
<indexterm><primary>me::Vector3</primary><secondary>normalize</secondary></indexterm>
<para><computeroutput>void Vector3::normalize ( )</computeroutput></para>
<para>Normalize the vector to have a magnitude of 1 </para>
</section>
<anchor xml:id="_classme_1_1_vector3_1a3bb95b94a0911ae9f1eae66695f65c70"/><section>
    <title>operator!=()</title>
<indexterm><primary>operator!=</primary><secondary>me::Vector3</secondary></indexterm>
<indexterm><primary>me::Vector3</primary><secondary>operator!=</secondary></indexterm>
<para><computeroutput>bool Vector3::operator!= (const <link linkend="_classme_1_1_vector3">Vector3</link> &amp; v)</computeroutput></para>
<para>Check if this vector is not equal to another vector &quot;v&quot;</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>v</entry><entry>
<para>The other vector to check inequality with </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>True if the two vectors are not equal, false otherwise </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classme_1_1_vector3_1ac57cc7f826080b81bb18a98a7fbd5b03"/><section>
    <title>operator*()</title>
<indexterm><primary>operator*</primary><secondary>me::Vector3</secondary></indexterm>
<indexterm><primary>me::Vector3</primary><secondary>operator*</secondary></indexterm>
<para><computeroutput><link linkend="_classme_1_1_vector3">Vector3</link> Vector3::operator* (const float &amp; s)</computeroutput></para>
<para>Returns the product of this vector and a scalar</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>s</entry><entry>
<para>The scalar to multiply this vector by </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The product of this vector and the scalar </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classme_1_1_vector3_1a9a86611849b69a8a0a999a792b429b30"/><section>
    <title>operator*=()</title>
<indexterm><primary>operator*=</primary><secondary>me::Vector3</secondary></indexterm>
<indexterm><primary>me::Vector3</primary><secondary>operator*=</secondary></indexterm>
<para><computeroutput><link linkend="_classme_1_1_vector3">Vector3</link> Vector3::operator*= (const float &amp; s)</computeroutput></para>
<para>Returns the product of this vector and a scalar</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>s</entry><entry>
<para>The scalar to multiply this vector by </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The product of this vector and the scalar </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classme_1_1_vector3_1a9228f34c33c47c753442a5402aaaf0ba"/><section>
    <title>operator+()</title>
<indexterm><primary>operator+</primary><secondary>me::Vector3</secondary></indexterm>
<indexterm><primary>me::Vector3</primary><secondary>operator+</secondary></indexterm>
<para><computeroutput><link linkend="_classme_1_1_vector3">Vector3</link> Vector3::operator+ (const <link linkend="_classme_1_1_vector3">Vector3</link> &amp; v)</computeroutput></para>
<para>Returns the sum of this vector and another vector</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>v</entry><entry>
<para>The other vector to add to this vector </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The sum of this vector and the other vector </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classme_1_1_vector3_1a463d61af7a0820031e0380b0a5843194"/><section>
    <title>operator+=()</title>
<indexterm><primary>operator+=</primary><secondary>me::Vector3</secondary></indexterm>
<indexterm><primary>me::Vector3</primary><secondary>operator+=</secondary></indexterm>
<para><computeroutput><link linkend="_classme_1_1_vector3">Vector3</link> Vector3::operator+= (const <link linkend="_classme_1_1_vector3">Vector3</link> &amp; v)</computeroutput></para>
<para>Returns the sum of this vector and another vector</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>v</entry><entry>
<para>The other vector to add to this vector </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The sum of this vector and the other vector </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classme_1_1_vector3_1a99f85da3057603ccb39f6eb763034f04"/><section>
    <title>operator-()</title>
<indexterm><primary>operator-</primary><secondary>me::Vector3</secondary></indexterm>
<indexterm><primary>me::Vector3</primary><secondary>operator-</secondary></indexterm>
<para><computeroutput><link linkend="_classme_1_1_vector3">Vector3</link> Vector3::operator- (const <link linkend="_classme_1_1_vector3">Vector3</link> &amp; v)</computeroutput></para>
<para>Returns the difference between this vector and another vector</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>v</entry><entry>
<para>The other vector to subtract from this vector </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The difference between this vector and the other vector </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classme_1_1_vector3_1af53975ac627719c8f5cec4d993109a1b"/><section>
    <title>operator-=()</title>
<indexterm><primary>operator-=</primary><secondary>me::Vector3</secondary></indexterm>
<indexterm><primary>me::Vector3</primary><secondary>operator-=</secondary></indexterm>
<para><computeroutput><link linkend="_classme_1_1_vector3">Vector3</link> Vector3::operator-= (const <link linkend="_classme_1_1_vector3">Vector3</link> &amp; v)</computeroutput></para>
<para>Returns the difference between this vector and another vector</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>v</entry><entry>
<para>The other vector to subtract from this vector </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The difference between this vector and the other vector </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classme_1_1_vector3_1a2c44bbfe8c2b0c594ce59a0d21dc9e6a"/><section>
    <title>operator=()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>me::Vector3</secondary></indexterm>
<indexterm><primary>me::Vector3</primary><secondary>operator=</secondary></indexterm>
<para><computeroutput>void Vector3::operator= (const btVector3 &amp; v)</computeroutput></para></section>
<anchor xml:id="_classme_1_1_vector3_1a7042bc8cf846ecfe090472cafd19c4de"/><section>
    <title>operator=()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>me::Vector3</secondary></indexterm>
<indexterm><primary>me::Vector3</primary><secondary>operator=</secondary></indexterm>
<para><computeroutput>void Vector3::operator= (const <link linkend="_classme_1_1_vector3">Vector3</link> &amp; v)</computeroutput></para></section>
<anchor xml:id="_classme_1_1_vector3_1a969763079ad5dc688c283b316c58f04b"/><section>
    <title>operator=()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>me::Vector3</secondary></indexterm>
<indexterm><primary>me::Vector3</primary><secondary>operator=</secondary></indexterm>
<para><computeroutput>void Vector3::operator= (const <link linkend="_classme_1_1_vector3">Vector3</link> * v)</computeroutput></para></section>
<anchor xml:id="_classme_1_1_vector3_1a6ec99d2e2c0f781c257bf9c2e665ee40"/><section>
    <title>operator==()</title>
<indexterm><primary>operator==</primary><secondary>me::Vector3</secondary></indexterm>
<indexterm><primary>me::Vector3</primary><secondary>operator==</secondary></indexterm>
<para><computeroutput>bool Vector3::operator== (const <link linkend="_classme_1_1_vector3">Vector3</link> &amp; v)</computeroutput></para>
<para>Check if this vector is equal to another vector &quot;v&quot;</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>v</entry><entry>
<para>The other vector to check equality with </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>True if the two vectors are equal, false otherwise </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classme_1_1_vector3_1a5141f62fab57a78d67362f610a80e78d"/><section>
    <title>right()</title>
<indexterm><primary>right</primary><secondary>me::Vector3</secondary></indexterm>
<indexterm><primary>me::Vector3</primary><secondary>right</secondary></indexterm>
<para><computeroutput><link linkend="_classme_1_1_vector3">Vector3</link> Vector3::right ( )</computeroutput></para>
<para>Returns a unit vector pointing to the right along the x-axis </para>
</section>
<anchor xml:id="_classme_1_1_vector3_1af06c065a31f91da96512e66470a5b2d8"/><section>
    <title>up()</title>
<indexterm><primary>up</primary><secondary>me::Vector3</secondary></indexterm>
<indexterm><primary>me::Vector3</primary><secondary>up</secondary></indexterm>
<para><computeroutput><link linkend="_classme_1_1_vector3">Vector3</link> Vector3::up ( )</computeroutput></para>
<para>Returns a unit vector pointing upwards along the y-axis </para>
</section>
<anchor xml:id="_classme_1_1_vector3_1acf528d3a6b29fc816a4e3b75b358c878"/><section>
    <title>v3ToBulletV3()</title>
<indexterm><primary>v3ToBulletV3</primary><secondary>me::Vector3</secondary></indexterm>
<indexterm><primary>me::Vector3</primary><secondary>v3ToBulletV3</secondary></indexterm>
<para><computeroutput>btVector3 me::Vector3::v3ToBulletV3 ( )</computeroutput></para>
<para>Returns the conversion of a <link linkend="_classme_1_1_vector3">Vector3</link> to an btVector3 </para>
</section>
<anchor xml:id="_classme_1_1_vector3_1a0be34d0f041fc68996ec5cdd0bff584a"/><section>
    <title>v3ToOgreV3()</title>
<indexterm><primary>v3ToOgreV3</primary><secondary>me::Vector3</secondary></indexterm>
<indexterm><primary>me::Vector3</primary><secondary>v3ToOgreV3</secondary></indexterm>
<para><computeroutput><link linkend="_namespace_ogre_1a8b4adeb18d1b0fcedea1b58bcbc67879">Ogre::Vector3f</link> me::Vector3::v3ToOgreV3 ( )</computeroutput></para>
<para>Returns the conversion of a <link linkend="_classme_1_1_vector3">Vector3</link> to an <link linkend="_namespace_ogre_1a8b4adeb18d1b0fcedea1b58bcbc67879">Ogre::Vector3f</link> </para>
</section>
<anchor xml:id="_classme_1_1_vector3_1a5bca587233ee8c0c680cf78e90dc9fc5"/><section>
    <title>zero()</title>
<indexterm><primary>zero</primary><secondary>me::Vector3</secondary></indexterm>
<indexterm><primary>me::Vector3</primary><secondary>zero</secondary></indexterm>
<para><computeroutput><link linkend="_classme_1_1_vector3">Vector3</link> Vector3::zero ( )</computeroutput></para>
<para>Returns the linear interpolation between &quot;a&quot; and &quot;b&quot; by a factor of &quot;f&quot; </para>
</section>
</section>
<section>
<title>Friends And Related Function Documentation</title>
<anchor xml:id="_classme_1_1_vector3_1a3958b94f7c0d4e6620dd4566b49c7676"/><section>
    <title>operator&lt;&lt;</title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>me::Vector3</secondary></indexterm>
<indexterm><primary>me::Vector3</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput><link linkend="_namespacestd_1a6a5cbaba415722865ff10d1ee0c559d0">std::ostream</link> &amp; operator&lt;&lt; (<link linkend="_namespacestd_1a6a5cbaba415722865ff10d1ee0c559d0">std::ostream</link> &amp; os, const <link linkend="_classme_1_1_vector3">Vector3</link> &amp; v)<computeroutput>[friend]</computeroutput></computeroutput></para>
<para>Returns a formatted string representation of the vector</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>os</entry><entry>
<para>The output stream to write to </para>
</entry>
                            </row>
                            <row>
<entry>v</entry><entry>
<para>The vector to format </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The output stream with the formatted string </para>
</formalpara>
</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_classme_1_1_vector3_1a9c64642050dc360a016090fc80c063c4"/><section>
    <title>x</title>
<indexterm><primary>x</primary><secondary>me::Vector3</secondary></indexterm>
<indexterm><primary>me::Vector3</primary><secondary>x</secondary></indexterm>
<para><computeroutput>float me::Vector3::x</computeroutput></para></section>
<anchor xml:id="_classme_1_1_vector3_1ae5654880d96f9bc0b064db5058149bee"/><section>
    <title>y</title>
<indexterm><primary>y</primary><secondary>me::Vector3</secondary></indexterm>
<indexterm><primary>me::Vector3</primary><secondary>y</secondary></indexterm>
<para><computeroutput>float me::Vector3::y</computeroutput></para></section>
<anchor xml:id="_classme_1_1_vector3_1ac32ec3fedcfc9ca6a6e1260bf55cbeaa"/><section>
    <title>z</title>
<indexterm><primary>z</primary><secondary>me::Vector3</secondary></indexterm>
<indexterm><primary>me::Vector3</primary><secondary>z</secondary></indexterm>
<para><computeroutput>float me::Vector3::z</computeroutput></para></section>
<para>
The documentation for this class was generated from the following files:</para>
Src/Utils/<link linkend="__vector3_8h">Vector3.h</link>Src/Utils/<link linkend="__vector3_8cpp">Vector3.cpp</link></section>
</section>
