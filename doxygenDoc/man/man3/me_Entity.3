.TH "me::Entity" 3 "Mon Apr 3 2023" "Version 0.2.1" "MotorEngine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
me::Entity
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Entity\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBEntity\fP (\fBScene\fP *scn, const \fBSceneName\fP name)"
.br
.ti -1c
.RI "\fBEntity\fP (const \fBSceneName\fP name)"
.br
.ti -1c
.RI "virtual \fB~Entity\fP ()"
.br
.ti -1c
.RI "\fBComponent\fP * \fBaddComponent\fP (const \fBComponentName\fP &componentName, \fBParameters\fP &params)"
.br
.ti -1c
.RI "template<typename T > T * \fBaddComponent\fP (const \fBComponentName\fP &componentName)"
.br
.ti -1c
.RI "template<typename T > bool \fBremoveComponent\fP (\fBComponentName\fP &component)"
.br
.ti -1c
.RI "template<typename T > T * \fBgetComponent\fP (const \fBComponentName\fP &component)"
.br
.ti -1c
.RI "bool \fBhasComponent\fP (const \fBComponentName\fP &component)"
.br
.ti -1c
.RI "bool \fBisActive\fP () const"
.br
.ti -1c
.RI "void \fBdestroy\fP ()"
.br
.ti -1c
.RI "\fBEntityName\fP \fBgetName\fP () const"
.br
.ti -1c
.RI "void \fBsetName\fP (const \fBEntityName\fP name)"
.br
.ti -1c
.RI "\fBScene\fP * \fBgetScene\fP () const"
.br
.ti -1c
.RI "void \fBsetScene\fP (\fBScene\fP *scn)"
.br
.ti -1c
.RI "void \fBstart\fP ()"
.br
.ti -1c
.RI "void \fBupdate\fP ()"
.br
.ti -1c
.RI "void \fBlateUpdate\fP ()"
.br
.ti -1c
.RI "void \fBOnCollisionEnter\fP (\fBEntity\fP *other)"
.br
.ti -1c
.RI "void \fBOnCollisionStay\fP (\fBEntity\fP *other)"
.br
.ti -1c
.RI "void \fBOnCollisionExit\fP (\fBEntity\fP *other)"
.br
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "me::Entity::Entity (\fBScene\fP * scn, const \fBSceneName\fP name)"
Build the foundation of the \fBEntity\fP\&. 
.PP
\fBParameters\fP
.RS 4
\fI\fBScene\fP\fP to which it belongs\&. 
.br
\fIString\fP name to identify it\&. 
.RE
.PP

.SS "me::Entity::Entity (const \fBSceneName\fP name)"
Build the foundation of the \fBEntity\fP\&. 
.PP
\fBParameters\fP
.RS 4
\fIString\fP name to identify it\&. 
.RE
.PP

.SS "me::Entity::~Entity ()\fC [virtual]\fP"
Delete all the components added to the entity\&. 
.SH "Member Function Documentation"
.PP 
.SS "template<typename T > T * me::Entity::addComponent (const \fBComponentName\fP & componentName)"

.SS "\fBComponent\fP * me::Entity::addComponent (const \fBComponentName\fP & componentName, \fBParameters\fP & params)"
Add a new component\&. If the component already exists, write a cout in debug mode 
.PP
\fBParameters\fP
.RS 4
\fIcomponent\fP the key of the component in the map 
.br
\fIVariable\fP number of arguments of any type\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Reference to the new component\&. 
.RE
.PP

.SS "void me::Entity::destroy ()\fC [inline]\fP"
Set the entity activity to false\&. This will cause to be safely delete by the scene\&. 
.SS "template<typename T > T * me::Entity::getComponent (const \fBComponentName\fP & component)\fC [inline]\fP"
Get the reference a suggested component\&. 
.PP
\fBParameters\fP
.RS 4
\fIkey\fP name in the map 
.RE
.PP
\fBReturns\fP
.RS 4
Reference to the component\&. 
.RE
.PP

.SS "\fBEntityName\fP me::Entity::getName () const\fC [inline]\fP"
Get the entity name\&. 
.PP
\fBReturns\fP
.RS 4
String name\&. 
.RE
.PP

.SS "\fBScene\fP * me::Entity::getScene () const\fC [inline]\fP"
Get the associated scene of the entity\&. 
.PP
\fBReturns\fP
.RS 4
\fBScene\fP to which it belongs\&. 
.RE
.PP

.SS "bool me::Entity::hasComponent (const \fBComponentName\fP & component)\fC [inline]\fP"
Check if the component has already been added\&. 
.PP
\fBParameters\fP
.RS 4
\fIkey\fP name in the map 
.RE
.PP
\fBReturns\fP
.RS 4
Boolean confirmation\&. 
.RE
.PP

.SS "bool me::Entity::isActive () const\fC [inline]\fP"
Check if the entity is active\&. 
.PP
\fBReturns\fP
.RS 4
Boolean confirmation\&. 
.RE
.PP

.SS "void me::Entity::lateUpdate ()"
Run all the added components lateUpdate method\&. 
.SS "void me::Entity::OnCollisionEnter (\fBEntity\fP * other)"
This function is called when the object collides with another object 
.SS "void me::Entity::OnCollisionExit (\fBEntity\fP * other)"
This function is called when the object stops colliding with another object 
.SS "void me::Entity::OnCollisionStay (\fBEntity\fP * other)"
This function is called every frame while the object is colliding with another object 
.SS "template<typename T > bool me::Entity::removeComponent (\fBComponentName\fP & component)\fC [inline]\fP"
Remove completely a typed component\&. 
.SS "void me::Entity::setName (const \fBEntityName\fP name)\fC [inline]\fP"
Set the entity name to the new one\&. 
.PP
\fBParameters\fP
.RS 4
\fIString\fP name\&. 
.RE
.PP

.SS "void me::Entity::setScene (\fBScene\fP * scn)\fC [inline]\fP"
Set the associated scene for the entity\&. 
.PP
\fBParameters\fP
.RS 4
\fI\fBScene\fP\fP to which it belongs\&. 
.RE
.PP

.SS "void me::Entity::start ()"

.SS "void me::Entity::update ()"
Run all the added components update method\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for MotorEngine from the source code\&.
