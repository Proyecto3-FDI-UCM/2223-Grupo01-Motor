.TH "me::Scene" 3 "Mon Apr 3 2023" "Version 0.2.1" "MotorEngine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
me::Scene
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Scene\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBScene\fP (const \fBSceneName\fP name)"
.br
.ti -1c
.RI "virtual \fB~Scene\fP ()"
.br
.ti -1c
.RI "std::shared_ptr< \fBEntity\fP > \fBaddEntity\fP (const \fBEntityName\fP name)"
.br
.ti -1c
.RI "void \fBremoveEntity\fP (const \fBEntityName\fP &name)"
.br
.ti -1c
.RI "std::vector< std::shared_ptr< \fBEntity\fP > > \fBgetEntities\fP () const"
.br
.ti -1c
.RI "std::shared_ptr< \fBEntity\fP > \fBfindEntity\fP (const \fBEntityName\fP &name) const"
.br
.ti -1c
.RI "const \fBEntityName\fP \fBgetName\fP () const"
.br
.ti -1c
.RI "void \fBsetName\fP (const \fBSceneName\fP name)"
.br
.ti -1c
.RI "void \fBrenameEntity\fP (const \fBEntityName\fP &oldName, const \fBEntityName\fP &newName)"
.br
.ti -1c
.RI "virtual void \fBstart\fP ()"
.br
.ti -1c
.RI "void \fBupdate\fP ()"
.br
.ti -1c
.RI "void \fBlateUpdate\fP ()"
.br
.ti -1c
.RI "void \fBrefresh\fP ()"
.br
.ti -1c
.RI "void \fBprocessNewEntities\fP ()"
.br
.ti -1c
.RI "void \fBpushEntities\fP (\fBInfoScene\fP &entitiesMap)"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBSceneName\fP \fBmName\fP"
.br
.ti -1c
.RI "std::vector< std::shared_ptr< \fBEntity\fP > > \fBmNewEntities\fP"
.br
.ti -1c
.RI "std::unordered_map< \fBEntityName\fP, std::shared_ptr< \fBEntity\fP > > \fBmEntities\fP"
.br
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "me::Scene::Scene (const \fBSceneName\fP name)"
Build the foundation of the \fBScene\fP\&. 
.PP
\fBParameters\fP
.RS 4
\fIString\fP name to identify it\&. 
.RE
.PP

.SS "me::Scene::~Scene ()\fC [virtual]\fP"
This method is meant to be the definition of the dynamic memory that has to be safely delete\&. 
.SH "Member Function Documentation"
.PP 
.SS "std::shared_ptr< \fBEntity\fP > me::Scene::addEntity (const \fBEntityName\fP name)"
Prepares a new entity to be safely add to the scene\&. This assumes that the name is a unique identifier\&. 
.PP
\fBParameters\fP
.RS 4
\fIString\fP name to identify the new entity\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Created new entity\&. 
.RE
.PP

.SS "std::shared_ptr< \fBEntity\fP > me::Scene::findEntity (const \fBEntityName\fP & name) const"
Finds and returns an entity in the scene with the given name\&. If no entity with the given name is found or if it's deactivated, returns nullptr\&. This assumes that the name is a unique identifier, it there is more than one entity with that name then the first found entity will be return\&. 
.PP
\fBParameters\fP
.RS 4
\fIString\fP name of the entity to be found\&. 
.RE
.PP
\fBReturns\fP
.RS 4
\fBEntity\fP with the given name, or nullptr if not found\&. 
.RE
.PP

.SS "std::vector< std::shared_ptr< \fBEntity\fP > > me::Scene::getEntities () const"
Get a vector of all entities in the scene\&. 
.PP
\fBReturns\fP
.RS 4
Vector of \fBEntity\fP pointers\&. 
.RE
.PP

.SS "const \fBEntityName\fP me::Scene::getName () const\fC [inline]\fP"
Get the scene name\&. 
.PP
\fBReturns\fP
.RS 4
String name\&. 
.RE
.PP

.SS "void me::Scene::lateUpdate ()"
This method is meant to be the definition of those updates that has to be processed at the end of the game cycle\&.
.PP
For example: render and collisions\&. 
.SS "void me::Scene::processNewEntities ()"
Safely adds the new entities from map, by deferring the addition of the new entity to the mEntities map until after the loop has completed\&. 
.SS "void me::Scene::pushEntities (\fBInfoScene\fP & entitiesMap)"
Safely adds the new entities from unordered_map passed by the sceneManager 
.PP
\fBParameters\fP
.RS 4
\fIentitiesMap\fP is the unordered_map that contains all the information about the entity and its components\&. 
.RE
.PP

.SS "void me::Scene::refresh ()"
Safely deletes dead entities from map, this means the ones who are deactivate\&. Fact: std::erase_if() was added to the C++ Standard Library in C++20\&. 
.SS "void me::Scene::removeEntity (const \fBEntityName\fP & name)"
Prepares an entity to be safely remove from the scene\&. This assumes that the name is a unique identifier\&. 
.PP
\fBParameters\fP
.RS 4
\fIString\fP name to identify the entity to be remove\&. 
.RE
.PP

.SS "void me::Scene::renameEntity (const \fBEntityName\fP & oldName, const \fBEntityName\fP & newName)"
Rename an entity name to the new one\&. 
.PP
\fBParameters\fP
.RS 4
\fIString\fP oldName to be change\&. 
.br
\fIString\fP newName to be set\&. 
.RE
.PP

.SS "void me::Scene::setName (const \fBSceneName\fP name)\fC [inline]\fP"
Set the scene name to the new one\&. 
.PP
\fBParameters\fP
.RS 4
\fIString\fP name\&. 
.RE
.PP

.SS "void me::Scene::start ()\fC [virtual]\fP"
This method is only ever called once\&. This must be called at the instantiation of the script\&. 
.SS "void me::Scene::update ()"
This method is meant to be the definition of those updates that has to be processed at the begining of the game cycle\&.
.PP
Almost all the logic updates\&. 
.SH "Member Data Documentation"
.PP 
.SS "std::unordered_map<\fBEntityName\fP, std::shared_ptr<\fBEntity\fP> > me::Scene::mEntities\fC [protected]\fP"

.SS "\fBSceneName\fP me::Scene::mName\fC [protected]\fP"

.SS "std::vector<std::shared_ptr<\fBEntity\fP> > me::Scene::mNewEntities\fC [protected]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for MotorEngine from the source code\&.
