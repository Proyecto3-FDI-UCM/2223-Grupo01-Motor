.TH "me::Vector3" 3 "Mon Apr 3 2023" "Version 0.2.1" "MotorEngine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
me::Vector3
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Vector3\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBVector3\fP ()"
.br
.ti -1c
.RI "\fBVector3\fP (float a, float b, float c)"
.br
.ti -1c
.RI "\fBVector3\fP (const \fBVector3\fP &v)"
.br
.ti -1c
.RI "\fBVector3\fP \fBoperator\-\fP (const \fBVector3\fP &v)"
.br
.ti -1c
.RI "\fBVector3\fP \fBoperator\-=\fP (const \fBVector3\fP &v)"
.br
.ti -1c
.RI "\fBVector3\fP \fBoperator+\fP (const \fBVector3\fP &v)"
.br
.ti -1c
.RI "\fBVector3\fP \fBoperator+=\fP (const \fBVector3\fP &v)"
.br
.ti -1c
.RI "\fBVector3\fP \fBoperator*\fP (const float &s)"
.br
.ti -1c
.RI "\fBVector3\fP \fBoperator*=\fP (const float &s)"
.br
.ti -1c
.RI "void \fBoperator=\fP (const \fBVector3\fP &v)"
.br
.ti -1c
.RI "void \fBoperator=\fP (const \fBVector3\fP *v)"
.br
.ti -1c
.RI "void \fBoperator=\fP (const btVector3 &v)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBVector3\fP &v)"
.br
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBVector3\fP &v)"
.br
.ti -1c
.RI "\fBVector3\fP \fBlerp\fP (const \fBVector3\fP &a, const \fBVector3\fP &b, float f)"
.br
.ti -1c
.RI "float \fBmagnitude\fP ()"
.br
.ti -1c
.RI "void \fBnormalize\fP ()"
.br
.ti -1c
.RI "float \fBdot\fP (const \fBVector3\fP &v)"
.br
.ti -1c
.RI "\fBVector3\fP \fBcross\fP (const \fBVector3\fP &v)"
.br
.ti -1c
.RI "\fBVector3\fP \fBzero\fP ()"
.br
.ti -1c
.RI "\fBVector3\fP \fBup\fP ()"
.br
.ti -1c
.RI "\fBVector3\fP \fBdown\fP ()"
.br
.ti -1c
.RI "\fBVector3\fP \fBleft\fP ()"
.br
.ti -1c
.RI "\fBVector3\fP \fBright\fP ()"
.br
.ti -1c
.RI "\fBVector3\fP \fBback\fP ()"
.br
.ti -1c
.RI "\fBVector3\fP \fBforward\fP ()"
.br
.ti -1c
.RI "float \fBdistance\fP (const \fBVector3\fP &v)"
.br
.ti -1c
.RI "float \fBangle\fP (const \fBVector3\fP &v)"
.br
.ti -1c
.RI "\fBOgre::Vector3f\fP \fBv3ToOgreV3\fP ()"
.br
.ti -1c
.RI "btVector3 \fBv3ToBulletV3\fP ()"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "float \fBx\fP"
.br
.ti -1c
.RI "float \fBy\fP"
.br
.ti -1c
.RI "float \fBz\fP"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "\fBstd::ostream\fP & \fBoperator<<\fP (\fBstd::ostream\fP &os, const \fBVector3\fP &v)"
.br
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "me::Vector3::Vector3 ()\fC [inline]\fP"

.SS "me::Vector3::Vector3 (float a, float b, float c)\fC [inline]\fP"

.SS "me::Vector3::Vector3 (const \fBVector3\fP & v)\fC [inline]\fP"

.SH "Member Function Documentation"
.PP 
.SS "float Vector3::angle (const \fBVector3\fP & v)"
Returns the angle between this vector and another vector 'v'
.PP
\fBParameters\fP
.RS 4
\fIv\fP The other vector 
.RE
.PP
\fBReturns\fP
.RS 4
The angle between the two vectors in degrees 
.RE
.PP

.SS "\fBVector3\fP Vector3::back ()"
Returns a unit vector pointing backwards along the z-axis 
.SS "\fBVector3\fP Vector3::cross (const \fBVector3\fP & v)"
Calculate the cross product between this vector and another vector 'v'
.PP
\fBParameters\fP
.RS 4
\fIv\fP The other vector to calculate the cross product with 
.RE
.PP
\fBReturns\fP
.RS 4
The cross product of the two vectors 
.RE
.PP

.SS "float Vector3::distance (const \fBVector3\fP & v)"
Returns the distance between this vector and another vector 'v'
.PP
\fBParameters\fP
.RS 4
\fIv\fP The other vector 
.RE
.PP
\fBReturns\fP
.RS 4
The distance between the two vectors 
.RE
.PP

.SS "float Vector3::dot (const \fBVector3\fP & v)"
Calculate the dot product between this vector and another vector 'v'
.PP
\fBParameters\fP
.RS 4
\fIv\fP The other vector to calculate the dot product with 
.RE
.PP
\fBReturns\fP
.RS 4
The dot product of the two vectors 
.RE
.PP

.SS "\fBVector3\fP Vector3::down ()"
Returns a unit vector pointing downwards along the y-axis 
.SS "\fBVector3\fP Vector3::forward ()"
Returns a unit vector pointing forwards along the z-axis 
.SS "\fBVector3\fP Vector3::left ()"
Returns a unit vector pointing to the left along the x-axis 
.SS "\fBVector3\fP Vector3::lerp (const \fBVector3\fP & a, const \fBVector3\fP & b, float f)"
Returns the linear interpolation between 'a' and 'b' by a factor of 'f'
.PP
\fBParameters\fP
.RS 4
\fIa\fP The starting vector to interpolate from 
.br
\fIb\fP The ending vector to interpolate to 
.br
\fIf\fP The interpolation factor, a value between 0 and 1 
.RE
.PP

.SS "float Vector3::magnitude ()"
Calculate the magnitude (length) of the vector
.PP
\fBReturns\fP
.RS 4
The magnitude of the vector 
.RE
.PP

.SS "void Vector3::normalize ()"
Normalize the vector to have a magnitude of 1 
.SS "bool Vector3::operator!= (const \fBVector3\fP & v)"
Check if this vector is not equal to another vector 'v'
.PP
\fBParameters\fP
.RS 4
\fIv\fP The other vector to check inequality with 
.RE
.PP
\fBReturns\fP
.RS 4
True if the two vectors are not equal, false otherwise 
.RE
.PP

.SS "\fBVector3\fP Vector3::operator* (const float & s)"
Returns the product of this vector and a scalar
.PP
\fBParameters\fP
.RS 4
\fIs\fP The scalar to multiply this vector by 
.RE
.PP
\fBReturns\fP
.RS 4
The product of this vector and the scalar 
.RE
.PP

.SS "\fBVector3\fP Vector3::operator*= (const float & s)"
Returns the product of this vector and a scalar
.PP
\fBParameters\fP
.RS 4
\fIs\fP The scalar to multiply this vector by 
.RE
.PP
\fBReturns\fP
.RS 4
The product of this vector and the scalar 
.RE
.PP

.SS "\fBVector3\fP Vector3::operator+ (const \fBVector3\fP & v)"
Returns the sum of this vector and another vector
.PP
\fBParameters\fP
.RS 4
\fIv\fP The other vector to add to this vector 
.RE
.PP
\fBReturns\fP
.RS 4
The sum of this vector and the other vector 
.RE
.PP

.SS "\fBVector3\fP Vector3::operator+= (const \fBVector3\fP & v)"
Returns the sum of this vector and another vector
.PP
\fBParameters\fP
.RS 4
\fIv\fP The other vector to add to this vector 
.RE
.PP
\fBReturns\fP
.RS 4
The sum of this vector and the other vector 
.RE
.PP

.SS "\fBVector3\fP Vector3::operator\- (const \fBVector3\fP & v)"
Returns the difference between this vector and another vector
.PP
\fBParameters\fP
.RS 4
\fIv\fP The other vector to subtract from this vector 
.RE
.PP
\fBReturns\fP
.RS 4
The difference between this vector and the other vector 
.RE
.PP

.SS "\fBVector3\fP Vector3::operator\-= (const \fBVector3\fP & v)"
Returns the difference between this vector and another vector
.PP
\fBParameters\fP
.RS 4
\fIv\fP The other vector to subtract from this vector 
.RE
.PP
\fBReturns\fP
.RS 4
The difference between this vector and the other vector 
.RE
.PP

.SS "void Vector3::operator= (const btVector3 & v)"

.SS "void Vector3::operator= (const \fBVector3\fP & v)"

.SS "void Vector3::operator= (const \fBVector3\fP * v)"

.SS "bool Vector3::operator== (const \fBVector3\fP & v)"
Check if this vector is equal to another vector 'v'
.PP
\fBParameters\fP
.RS 4
\fIv\fP The other vector to check equality with 
.RE
.PP
\fBReturns\fP
.RS 4
True if the two vectors are equal, false otherwise 
.RE
.PP

.SS "\fBVector3\fP Vector3::right ()"
Returns a unit vector pointing to the right along the x-axis 
.SS "\fBVector3\fP Vector3::up ()"
Returns a unit vector pointing upwards along the y-axis 
.SS "btVector3 me::Vector3::v3ToBulletV3 ()"
Returns the conversion of a \fBVector3\fP to an btVector3 
.SS "\fBOgre::Vector3f\fP me::Vector3::v3ToOgreV3 ()"
Returns the conversion of a \fBVector3\fP to an \fBOgre::Vector3f\fP 
.SS "\fBVector3\fP Vector3::zero ()"
Returns the linear interpolation between 'a' and 'b' by a factor of 'f' 
.SH "Friends And Related Function Documentation"
.PP 
.SS "\fBstd::ostream\fP & operator<< (\fBstd::ostream\fP & os, const \fBVector3\fP & v)\fC [friend]\fP"
Returns a formatted string representation of the vector
.PP
\fBParameters\fP
.RS 4
\fIos\fP The output stream to write to 
.br
\fIv\fP The vector to format 
.RE
.PP
\fBReturns\fP
.RS 4
The output stream with the formatted string 
.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "float me::Vector3::x"

.SS "float me::Vector3::y"

.SS "float me::Vector3::z"


.SH "Author"
.PP 
Generated automatically by Doxygen for MotorEngine from the source code\&.
