.TH "me::RigidBody" 3 "Mon Apr 3 2023" "Version 0.2.1" "MotorEngine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
me::RigidBody
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <RigidBody\&.h>\fP
.PP
Inherits \fBme::Component\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBRigidBody\fP ()"
.br
.ti -1c
.RI "\fB~RigidBody\fP ()"
.br
.ti -1c
.RI "void \fBstart\fP () override"
.br
.ti -1c
.RI "void \fBupdate\fP () override"
.br
.ti -1c
.RI "void \fBlateUpdate\fP () override"
.br
.ti -1c
.RI "void \fBsetTrigger\fP (bool isTrigger)"
.br
.ti -1c
.RI "void \fBsetMass\fP (float mass)"
.br
.ti -1c
.RI "void \fBsetFriction\fP (float friction)"
.br
.ti -1c
.RI "void \fBsetRestitution\fP (float restitution)"
.br
.ti -1c
.RI "void \fBsetColShape\fP (int colShape)"
.br
.ti -1c
.RI "void \fBsetMomeventType\fP (int mvType)"
.br
.ti -1c
.RI "bool \fBgetTrigger\fP ()"
.br
.ti -1c
.RI "float \fBgetMass\fP ()"
.br
.ti -1c
.RI "float \fBgetFriction\fP ()"
.br
.ti -1c
.RI "float \fBgetRestitution\fP ()"
.br
.ti -1c
.RI "int \fBgetColShape\fP ()"
.br
.ti -1c
.RI "int \fBgetMovementType\fP ()"
.br
.ti -1c
.RI "void \fBaddForce\fP (\fBVector3\fP force, \fBVector3\fP relativePos)"
.br
.ti -1c
.RI "void \fBaddImpulse\fP (\fBVector3\fP impulse, \fBVector3\fP relativePos)"
.br
.in -1c

Public Member Functions inherited from \fBme::Component\fP
.in +1c
.ti -1c
.RI "\fBComponent\fP ()"
.br
.ti -1c
.RI "virtual \fB~Component\fP ()"
.br
.ti -1c
.RI "void \fBsetEntity\fP (\fBEntity\fP *e)"
.br
.ti -1c
.RI "\fBEntity\fP * \fBgetEntity\fP ()"
.br
.ti -1c
.RI "virtual void \fBstart\fP ()"
.br
.ti -1c
.RI "virtual void \fBupdate\fP ()"
.br
.ti -1c
.RI "virtual void \fBlateUpdate\fP ()"
.br
.ti -1c
.RI "virtual void \fBOnCollisionEnter\fP (\fBEntity\fP *other)"
.br
.ti -1c
.RI "virtual void \fBOnCollisionStay\fP (\fBEntity\fP *other)"
.br
.ti -1c
.RI "virtual void \fBOnCollisionExit\fP (\fBEntity\fP *other)"
.br
.in -1c
.SS "Additional Inherited Members"


Public Attributes inherited from \fBme::Component\fP
.in +1c
.ti -1c
.RI "bool \fBenabled\fP = true"
.br
.in -1c

Protected Attributes inherited from \fBme::Component\fP
.in +1c
.ti -1c
.RI "\fBEntity\fP * \fBmEntity\fP"
.br
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "me::RigidBody::RigidBody ()"

.SS "me::RigidBody::~RigidBody ()"

.SH "Member Function Documentation"
.PP 
.SS "void me::RigidBody::addForce (\fBVector3\fP force, \fBVector3\fP relativePos)"
Apply a force to the rigidBody
.PP
\fBParameters\fP
.RS 4
\fIforce\fP is the vector of the force to apply 
.br
\fIrelativePos\fP is the local pos of the rigidBody 
.RE
.PP

.SS "void me::RigidBody::addImpulse (\fBVector3\fP impulse, \fBVector3\fP relativePos)"
Apply a impulse to the rigidBody
.PP
\fBParameters\fP
.RS 4
\fIimpulse\fP is the vector of the impulse to apply 
.br
\fIrelativePos\fP is the local pos of the rigidBody 
.RE
.PP

.SS "int me::RigidBody::getColShape ()"

.SS "float me::RigidBody::getFriction ()"

.SS "float me::RigidBody::getMass ()"

.SS "int me::RigidBody::getMovementType ()"

.SS "float me::RigidBody::getRestitution ()"

.SS "bool me::RigidBody::getTrigger ()"

.SS "void me::RigidBody::lateUpdate ()\fC [override]\fP, \fC [virtual]\fP"
This method is meant to be the definition of those updates that has to be processed at the end of the game cycle\&.
.PP
For example: render and collisions\&. 
.PP
Reimplemented from \fBme::Component\fP\&.
.SS "void me::RigidBody::setColShape (int colShape)"

.SS "void me::RigidBody::setFriction (float friction)"

.SS "void me::RigidBody::setMass (float mass)"

.SS "void me::RigidBody::setMomeventType (int mvType)"

.SS "void me::RigidBody::setRestitution (float restitution)"

.SS "void me::RigidBody::setTrigger (bool isTrigger)"

.SS "void me::RigidBody::start ()\fC [override]\fP, \fC [virtual]\fP"
This method is only ever called once\&. This must be called at the instantiation of the script\&. 
.PP
Reimplemented from \fBme::Component\fP\&.
.SS "void me::RigidBody::update ()\fC [override]\fP, \fC [virtual]\fP"
This method is meant to be the definition of those updates that has to be processed at the begining of the game cycle\&.
.PP
Almost all the logic updates\&. 
.PP
Reimplemented from \fBme::Component\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for MotorEngine from the source code\&.
