.TH "me" 3 "Mon Apr 3 2023" "Version 0.2.1" "MotorEngine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
me
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBAnimator\fP"
.br
.ti -1c
.RI "class \fBAudioListener\fP"
.br
.ti -1c
.RI "class \fBAudioSource\fP"
.br
.ti -1c
.RI "struct \fBAxis\fP"
.br
.ti -1c
.RI "struct \fBAxisInfo\fP"
.br
.ti -1c
.RI "struct \fBAxisInput\fP"
.br
.ti -1c
.RI "struct \fBButton\fP"
.br
.ti -1c
.RI "class \fBCamera\fP"
.br
.ti -1c
.RI "class \fBCollider\fP"
.br
.ti -1c
.RI "class \fBComponent\fP"
.br
.ti -1c
.RI "class \fBComponentsFactory\fP"
.br
.ti -1c
.RI "class \fBDebugDrawer\fP"
.br
.ti -1c
.RI "class \fBEntity\fP"
.br
.ti -1c
.RI "class \fBFactoryAnimator\fP"
.br
.ti -1c
.RI "class \fBFactoryAudioListener\fP"
.br
.ti -1c
.RI "class \fBFactoryAudioSource\fP"
.br
.ti -1c
.RI "class \fBFactoryCamera\fP"
.br
.ti -1c
.RI "class \fBFactoryCollider\fP"
.br
.ti -1c
.RI "class \fBFactoryComponent\fP"
.br
.ti -1c
.RI "class \fBFactoryMeshRenderer\fP"
.br
.ti -1c
.RI "class \fBFactoryParticleSystem\fP"
.br
.ti -1c
.RI "class \fBFactoryRigidBody\fP"
.br
.ti -1c
.RI "class \fBFactoryTransform\fP"
.br
.ti -1c
.RI "struct \fBInput\fP"
.br
.ti -1c
.RI "struct \fBInputHasher\fP"
.br
.ti -1c
.RI "class \fBInputManager\fP"
.br
.ti -1c
.RI "class \fBMeshRenderer\fP"
.br
.ti -1c
.RI "class \fBMotorEngine\fP"
.br
.ti -1c
.RI "struct \fBOnButtonPressedInfo\fP"
.br
.ti -1c
.RI "class \fBParticleSystem\fP"
.br
.ti -1c
.RI "class \fBPhysicsManager\fP"
.br
.ti -1c
.RI "class \fBRenderCamera\fP"
.br
.ti -1c
.RI "class \fBRenderManager\fP"
.br
.ti -1c
.RI "class \fBRenderMesh\fP"
.br
.ti -1c
.RI "class \fBRenderParticleSystem\fP"
.br
.ti -1c
.RI "class \fBRenderWindow\fP"
.br
.ti -1c
.RI "class \fBRigidBody\fP"
.br
.ti -1c
.RI "class \fBScene\fP"
.br
.ti -1c
.RI "class \fBSceneManager\fP"
.br
.ti -1c
.RI "class \fBSGTechniqueResolverListener\fP"
.br
.ti -1c
.RI "class \fBSingleton\fP"
.br
.ti -1c
.RI "class \fBSoundManager\fP"
.br
.ti -1c
.RI "class \fBTransform\fP"
.br
.ti -1c
.RI "class \fBUIButton\fP"
.br
.ti -1c
.RI "class \fBUIContainer\fP"
.br
.ti -1c
.RI "class \fBUIElement\fP"
.br
.ti -1c
.RI "class \fBUIText\fP"
.br
.ti -1c
.RI "class \fBVector3\fP"
.br
.ti -1c
.RI "class \fBVector4\fP"
.br
.ti -1c
.RI "class \fBWindow\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef std::string \fBSceneName\fP"
.br
.ti -1c
.RI "typedef std::string \fBEntityName\fP"
.br
.ti -1c
.RI "typedef std::string \fBComponentName\fP"
.br
.ti -1c
.RI "typedef std::string \fBParameterName\fP"
.br
.ti -1c
.RI "typedef std::string \fBParameterValue\fP"
.br
.ti -1c
.RI "typedef std::unordered_map< \fBParameterName\fP, \fBParameterValue\fP > \fBParameters\fP"
.br
.ti -1c
.RI "typedef std::unordered_map< \fBComponentName\fP, \fBParameters\fP > \fBInfoEntity\fP"
.br
.ti -1c
.RI "typedef std::unordered_map< \fBEntityName\fP, \fBInfoEntity\fP > \fBInfoScene\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBSoundManager\fP & \fBsoundManager\fP ()"
.br
.ti -1c
.RI "\fBComponentsFactory\fP & \fBcomponentsFactory\fP ()"
.br
.ti -1c
.RI "\fBSceneManager\fP & \fBsceneManager\fP ()"
.br
.ti -1c
.RI "\fBInputManager\fP & \fBinputManager\fP ()"
.br
.ti -1c
.RI "\fBPhysicsManager\fP & \fBphysicsManager\fP ()"
.br
.ti -1c
.RI "\fBRenderManager\fP & \fBrenderManager\fP ()"
.br
.ti -1c
.RI "\fBWindow\fP & \fBwindow\fP ()"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "const int \fBMAX_CHANNELS\fP = 36"
.br
.ti -1c
.RI "const float \fBDOPPLER_SCALE\fP = 1"
.br
.ti -1c
.RI "const float \fBDISTANCE_FACTOR\fP = 1"
.br
.ti -1c
.RI "const float \fBROLLOFF_SCALE\fP = 1"
.br
.in -1c
.SH "Typedef Documentation"
.PP 
.SS "typedef std::string \fBme::ComponentName\fP"

.SS "typedef std::string \fBme::EntityName\fP"

.SS "typedef std::unordered_map<\fBComponentName\fP, \fBParameters\fP> \fBme::InfoEntity\fP"

.SS "typedef std::unordered_map<\fBEntityName\fP, \fBInfoEntity\fP> \fBme::InfoScene\fP"

.SS "typedef std::string \fBme::ParameterName\fP"

.SS "typedef std::unordered_map<\fBParameterName\fP, \fBParameterValue\fP> \fBme::Parameters\fP"

.SS "typedef std::string \fBme::ParameterValue\fP"

.SS "typedef std::string \fBme::SceneName\fP"

.SH "Function Documentation"
.PP 
.SS "\fBComponentsFactory\fP & me::componentsFactory ()\fC [inline]\fP"
This macro defines a compact way for using the singleton InputHandler, instead of writing InputHandler::instance()->method() we write ih()\&.method() 
.SS "\fBInputManager\fP & me::inputManager ()\fC [inline]\fP"
This macro defines a compact way for using the singleton InputHandler, instead of writing InputHandler::instance()->method() we write ih()\&.method() 
.SS "\fBPhysicsManager\fP & me::physicsManager ()\fC [inline]\fP"
This macro defines a compact way for using the singleton \fBPhysicsManager\fP, instead of writing InputHandler::instance()->method() we write ih()\&.method() 
.SS "\fBRenderManager\fP & me::renderManager ()\fC [inline]\fP"
This macro defines a compact way for using the singleton OgreManager, instead of writing OgreManager::instance()->method() we write om()\&.method() 
.SS "\fBSceneManager\fP & me::sceneManager ()\fC [inline]\fP"
This macro defines a compact way for using the singleton \fBSceneManager\fP, instead of writing \fBSceneManager::instance()\fP->method() we write sm()\&.method() 
.SS "\fBSoundManager\fP & me::soundManager ()\fC [inline]\fP"
This macro defines a compact way for using the singleton \fBPhysicsManager\fP, instead of writing \fBSoundManager::instance()\fP->method() we write sm()\&.method() 
.SS "\fBWindow\fP & me::window ()\fC [inline]\fP"
This macro defines a compact way for using the singleton \fBWindow\fP, instead of writing \fBWindow::instance()\fP->method() we write win()\&.method() 
.SH "Variable Documentation"
.PP 
.SS "const float me::DISTANCE_FACTOR = 1"

.SS "const float me::DOPPLER_SCALE = 1"

.SS "const int me::MAX_CHANNELS = 36"

.SS "const float me::ROLLOFF_SCALE = 1"

.SH "Author"
.PP 
Generated automatically by Doxygen for MotorEngine from the source code\&.
