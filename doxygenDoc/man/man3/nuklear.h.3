.TH "Src/GUI/nuklear.h" 3 "Mon Apr 3 2023" "Version 0.2.1" "MotorEngine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Src/GUI/nuklear.h
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBnk_color\fP"
.br
.ti -1c
.RI "struct \fBnk_colorf\fP"
.br
.ti -1c
.RI "struct \fBnk_vec2\fP"
.br
.ti -1c
.RI "struct \fBnk_vec2i\fP"
.br
.ti -1c
.RI "struct \fBnk_rect\fP"
.br
.ti -1c
.RI "struct \fBnk_recti\fP"
.br
.ti -1c
.RI "union \fBnk_handle\fP"
.br
.ti -1c
.RI "struct \fBnk_image\fP"
.br
.ti -1c
.RI "struct \fBnk_nine_slice\fP"
.br
.ti -1c
.RI "struct \fBnk_cursor\fP"
.br
.ti -1c
.RI "struct \fBnk_scroll\fP"
.br
.ti -1c
.RI "struct \fBnk_allocator\fP"
.br
.ti -1c
.RI "struct \fBnk_draw_null_texture\fP"
.br
.ti -1c
.RI "struct \fBnk_convert_config\fP"
.br
.ti -1c
.RI "struct \fBnk_list_view\fP"
.br
.ti -1c
.RI "struct \fBnk_user_font\fP"
.br
.ti -1c
.RI "struct \fBnk_memory_status\fP"
.br
.ti -1c
.RI "struct \fBnk_buffer_marker\fP"
.br
.ti -1c
.RI "struct \fBnk_memory\fP"
.br
.ti -1c
.RI "struct \fBnk_buffer\fP"
.br
.ti -1c
.RI "struct \fBnk_str\fP"
.br
.ti -1c
.RI "struct \fBnk_clipboard\fP"
.br
.ti -1c
.RI "struct \fBnk_text_undo_record\fP"
.br
.ti -1c
.RI "struct \fBnk_text_undo_state\fP"
.br
.ti -1c
.RI "struct \fBnk_text_edit\fP"
.br
.ti -1c
.RI "struct \fBnk_command\fP"
.br
.ti -1c
.RI "struct \fBnk_command_scissor\fP"
.br
.ti -1c
.RI "struct \fBnk_command_line\fP"
.br
.ti -1c
.RI "struct \fBnk_command_curve\fP"
.br
.ti -1c
.RI "struct \fBnk_command_rect\fP"
.br
.ti -1c
.RI "struct \fBnk_command_rect_filled\fP"
.br
.ti -1c
.RI "struct \fBnk_command_rect_multi_color\fP"
.br
.ti -1c
.RI "struct \fBnk_command_triangle\fP"
.br
.ti -1c
.RI "struct \fBnk_command_triangle_filled\fP"
.br
.ti -1c
.RI "struct \fBnk_command_circle\fP"
.br
.ti -1c
.RI "struct \fBnk_command_circle_filled\fP"
.br
.ti -1c
.RI "struct \fBnk_command_arc\fP"
.br
.ti -1c
.RI "struct \fBnk_command_arc_filled\fP"
.br
.ti -1c
.RI "struct \fBnk_command_polygon\fP"
.br
.ti -1c
.RI "struct \fBnk_command_polygon_filled\fP"
.br
.ti -1c
.RI "struct \fBnk_command_polyline\fP"
.br
.ti -1c
.RI "struct \fBnk_command_image\fP"
.br
.ti -1c
.RI "struct \fBnk_command_custom\fP"
.br
.ti -1c
.RI "struct \fBnk_command_text\fP"
.br
.ti -1c
.RI "struct \fBnk_command_buffer\fP"
.br
.ti -1c
.RI "struct \fBnk_mouse_button\fP"
.br
.ti -1c
.RI "struct \fBnk_mouse\fP"
.br
.ti -1c
.RI "struct \fBnk_key\fP"
.br
.ti -1c
.RI "struct \fBnk_keyboard\fP"
.br
.ti -1c
.RI "struct \fBnk_input\fP"
.br
.ti -1c
.RI "union \fBnk_style_item_data\fP"
.br
.ti -1c
.RI "struct \fBnk_style_item\fP"
.br
.ti -1c
.RI "struct \fBnk_style_text\fP"
.br
.ti -1c
.RI "struct \fBnk_style_button\fP"
.br
.ti -1c
.RI "struct \fBnk_style_toggle\fP"
.br
.ti -1c
.RI "struct \fBnk_style_selectable\fP"
.br
.ti -1c
.RI "struct \fBnk_style_slider\fP"
.br
.ti -1c
.RI "struct \fBnk_style_progress\fP"
.br
.ti -1c
.RI "struct \fBnk_style_scrollbar\fP"
.br
.ti -1c
.RI "struct \fBnk_style_edit\fP"
.br
.ti -1c
.RI "struct \fBnk_style_property\fP"
.br
.ti -1c
.RI "struct \fBnk_style_chart\fP"
.br
.ti -1c
.RI "struct \fBnk_style_combo\fP"
.br
.ti -1c
.RI "struct \fBnk_style_tab\fP"
.br
.ti -1c
.RI "struct \fBnk_style_window_header\fP"
.br
.ti -1c
.RI "struct \fBnk_style_window\fP"
.br
.ti -1c
.RI "struct \fBnk_style\fP"
.br
.ti -1c
.RI "struct \fBnk_chart_slot\fP"
.br
.ti -1c
.RI "struct \fBnk_chart\fP"
.br
.ti -1c
.RI "struct \fBnk_row_layout\fP"
.br
.ti -1c
.RI "struct \fBnk_popup_buffer\fP"
.br
.ti -1c
.RI "struct \fBnk_menu_state\fP"
.br
.ti -1c
.RI "struct \fBnk_panel\fP"
.br
.ti -1c
.RI "struct \fBnk_popup_state\fP"
.br
.ti -1c
.RI "struct \fBnk_edit_state\fP"
.br
.ti -1c
.RI "struct \fBnk_property_state\fP"
.br
.ti -1c
.RI "struct \fBnk_window\fP"
.br
.ti -1c
.RI "struct \fBnk_configuration_stacks\fP"
.br
.ti -1c
.RI "struct \fBnk_table\fP"
.br
.ti -1c
.RI "union \fBnk_page_data\fP"
.br
.ti -1c
.RI "struct \fBnk_page_element\fP"
.br
.ti -1c
.RI "struct \fBnk_page\fP"
.br
.ti -1c
.RI "struct \fBnk_pool\fP"
.br
.ti -1c
.RI "struct \fBnk_context\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBNK_UNDEFINED\fP   (\-1\&.0f)"
.br
.ti -1c
.RI "#define \fBNK_UTF_INVALID\fP   0xFFFD /* internal invalid utf8 rune */"
.br
.ti -1c
.RI "#define \fBNK_UTF_SIZE\fP   4 /* describes the number of bytes a glyph consists of*/"
.br
.ti -1c
.RI "#define \fBNK_INPUT_MAX\fP   16"
.br
.ti -1c
.RI "#define \fBNK_MAX_NUMBER_BUFFER\fP   64"
.br
.ti -1c
.RI "#define \fBNK_SCROLLBAR_HIDING_TIMEOUT\fP   4\&.0f"
.br
.ti -1c
.RI "#define \fBNK_API\fP   extern"
.br
.ti -1c
.RI "#define \fBNK_LIB\fP   extern"
.br
.ti -1c
.RI "#define \fBNK_INTERN\fP   static"
.br
.ti -1c
.RI "#define \fBNK_STORAGE\fP   static"
.br
.ti -1c
.RI "#define \fBNK_GLOBAL\fP   static"
.br
.ti -1c
.RI "#define \fBNK_FLAG\fP(x)   (1 << (x))"
.br
.ti -1c
.RI "#define \fBNK_STRINGIFY\fP(x)   #x"
.br
.ti -1c
.RI "#define \fBNK_MACRO_STRINGIFY\fP(x)   \fBNK_STRINGIFY\fP(x)"
.br
.ti -1c
.RI "#define \fBNK_STRING_JOIN_IMMEDIATE\fP(arg1,  arg2)   arg1 ## arg2"
.br
.ti -1c
.RI "#define \fBNK_STRING_JOIN_DELAY\fP(arg1,  arg2)   \fBNK_STRING_JOIN_IMMEDIATE\fP(arg1, arg2)"
.br
.ti -1c
.RI "#define \fBNK_STRING_JOIN\fP(arg1,  arg2)   \fBNK_STRING_JOIN_DELAY\fP(arg1, arg2)"
.br
.ti -1c
.RI "#define \fBNK_UNIQUE_NAME\fP(name)   \fBNK_STRING_JOIN\fP(name,__LINE__)"
.br
.ti -1c
.RI "#define \fBNK_STATIC_ASSERT\fP(exp)   typedef char \fBNK_UNIQUE_NAME\fP(_dummy_array)[(exp)?1:\-1]"
.br
.ti -1c
.RI "#define \fBNK_FILE_LINE\fP   __FILE__ ':' \fBNK_MACRO_STRINGIFY\fP(__LINE__)"
.br
.ti -1c
.RI "#define \fBNK_MIN\fP(a,  b)   ((a) < (b) ? (a) : (b))"
.br
.ti -1c
.RI "#define \fBNK_MAX\fP(a,  b)   ((a) < (b) ? (b) : (a))"
.br
.ti -1c
.RI "#define \fBNK_CLAMP\fP(i,  v,  x)   (\fBNK_MAX\fP(\fBNK_MIN\fP(v,x), i))"
.br
.ti -1c
.RI "#define \fBNK_INT8\fP   signed char"
.br
.ti -1c
.RI "#define \fBNK_UINT8\fP   unsigned char"
.br
.ti -1c
.RI "#define \fBNK_INT16\fP   signed short"
.br
.ti -1c
.RI "#define \fBNK_UINT16\fP   unsigned short"
.br
.ti -1c
.RI "#define \fBNK_INT32\fP   signed int"
.br
.ti -1c
.RI "#define \fBNK_UINT32\fP   unsigned int"
.br
.ti -1c
.RI "#define \fBNK_SIZE_TYPE\fP   unsigned long"
.br
.ti -1c
.RI "#define \fBNK_POINTER_TYPE\fP   unsigned long"
.br
.ti -1c
.RI "#define \fBNK_BOOL\fP   int /* could be char, use int for drop\-in replacement backwards compatibility */"
.br
.ti -1c
.RI "#define \fBnk_foreach\fP(c,  ctx)   for((c) = \fBnk__begin\fP(ctx); (c) != 0; (c) = \fBnk__next\fP(ctx,c))"
.br
.ti -1c
.RI "#define \fBnk_tree_push\fP(ctx,  type,  title,  state)   \fBnk_tree_push_hashed\fP(ctx, type, title, state, \fBNK_FILE_LINE\fP,\fBnk_strlen\fP(\fBNK_FILE_LINE\fP),__LINE__)"
.br
.ti -1c
.RI "#define \fBnk_tree_push_id\fP(ctx,  type,  title,  state,  id)   \fBnk_tree_push_hashed\fP(ctx, type, title, state, \fBNK_FILE_LINE\fP,\fBnk_strlen\fP(\fBNK_FILE_LINE\fP),id)"
.br
.ti -1c
.RI "#define \fBnk_tree_image_push\fP(ctx,  type,  img,  title,  state)   \fBnk_tree_image_push_hashed\fP(ctx, type, img, title, state, \fBNK_FILE_LINE\fP,\fBnk_strlen\fP(\fBNK_FILE_LINE\fP),__LINE__)"
.br
.ti -1c
.RI "#define \fBnk_tree_image_push_id\fP(ctx,  type,  img,  title,  state,  id)   \fBnk_tree_image_push_hashed\fP(ctx, type, img, title, state, \fBNK_FILE_LINE\fP,\fBnk_strlen\fP(\fBNK_FILE_LINE\fP),id)"
.br
.ti -1c
.RI "#define \fBnk_tree_element_push\fP(ctx,  type,  title,  state,  sel)   \fBnk_tree_element_push_hashed\fP(ctx, type, title, state, sel, \fBNK_FILE_LINE\fP,\fBnk_strlen\fP(\fBNK_FILE_LINE\fP),__LINE__)"
.br
.ti -1c
.RI "#define \fBnk_tree_element_push_id\fP(ctx,  type,  title,  state,  sel,  id)   \fBnk_tree_element_push_hashed\fP(ctx, type, title, state, sel, \fBNK_FILE_LINE\fP,\fBnk_strlen\fP(\fBNK_FILE_LINE\fP),id)"
.br
.ti -1c
.RI "#define \fBNK_STRTOD\fP   \fBnk_strtod\fP"
.br
.ti -1c
.RI "#define \fBNK_TEXTEDIT_UNDOSTATECOUNT\fP   99"
.br
.ti -1c
.RI "#define \fBNK_TEXTEDIT_UNDOCHARCOUNT\fP   999"
.br
.ti -1c
.RI "#define \fBNK_MAX_LAYOUT_ROW_TEMPLATE_COLUMNS\fP   16"
.br
.ti -1c
.RI "#define \fBNK_CHART_MAX_SLOT\fP   4"
.br
.ti -1c
.RI "#define \fBNK_WINDOW_MAX_NAME\fP   64"
.br
.ti -1c
.RI "#define \fBNK_BUTTON_BEHAVIOR_STACK_SIZE\fP   8"
.br
.ti -1c
.RI "#define \fBNK_FONT_STACK_SIZE\fP   8"
.br
.ti -1c
.RI "#define \fBNK_STYLE_ITEM_STACK_SIZE\fP   16"
.br
.ti -1c
.RI "#define \fBNK_FLOAT_STACK_SIZE\fP   32"
.br
.ti -1c
.RI "#define \fBNK_VECTOR_STACK_SIZE\fP   16"
.br
.ti -1c
.RI "#define \fBNK_FLAGS_STACK_SIZE\fP   32"
.br
.ti -1c
.RI "#define \fBNK_COLOR_STACK_SIZE\fP   32"
.br
.ti -1c
.RI "#define \fBNK_CONFIGURATION_STACK_TYPE\fP(prefix,  name,  type)"
.br
.ti -1c
.RI "#define \fBNK_CONFIG_STACK\fP(type,  size)"
.br
.ti -1c
.RI "#define \fBnk_float\fP   float"
.br
.ti -1c
.RI "#define \fBNK_VALUE_PAGE_CAPACITY\fP       (((\fBNK_MAX\fP(sizeof(struct \fBnk_window\fP),sizeof(struct \fBnk_panel\fP)) / sizeof(\fBnk_uint\fP))) / 2)"
.br
.ti -1c
.RI "#define \fBNK_PI\fP   3\&.141592654f"
.br
.ti -1c
.RI "#define \fBNK_UTF_INVALID\fP   0xFFFD"
.br
.ti -1c
.RI "#define \fBNK_MAX_FLOAT_PRECISION\fP   2"
.br
.ti -1c
.RI "#define \fBNK_UNUSED\fP(x)   ((void)(x))"
.br
.ti -1c
.RI "#define \fBNK_SATURATE\fP(x)   (\fBNK_MAX\fP(0, \fBNK_MIN\fP(1\&.0f, x)))"
.br
.ti -1c
.RI "#define \fBNK_LEN\fP(a)   (sizeof(a)/sizeof(a)[0])"
.br
.ti -1c
.RI "#define \fBNK_ABS\fP(a)   (((a) < 0) ? \-(a) : (a))"
.br
.ti -1c
.RI "#define \fBNK_BETWEEN\fP(x,  a,  b)   ((a) <= (x) && (x) < (b))"
.br
.ti -1c
.RI "#define \fBNK_INBOX\fP(px,  py,  x,  y,  w,  h)       (\fBNK_BETWEEN\fP(px,x,x+w) && \fBNK_BETWEEN\fP(py,y,y+h))"
.br
.ti -1c
.RI "#define \fBNK_INTERSECT\fP(x0,  y0,  w0,  h0,  x1,  y1,  w1,  h1)"
.br
.ti -1c
.RI "#define \fBNK_CONTAINS\fP(x,  y,  w,  h,  bx,  by,  bw,  bh)       (\fBNK_INBOX\fP(x,y, bx, by, bw, bh) && \fBNK_INBOX\fP(x+w,y+h, bx, by, bw, bh))"
.br
.ti -1c
.RI "#define \fBnk_vec2_sub\fP(a,  b)   \fBnk_vec2\fP((a)\&.x \- (b)\&.x, (a)\&.y \- (b)\&.y)"
.br
.ti -1c
.RI "#define \fBnk_vec2_add\fP(a,  b)   \fBnk_vec2\fP((a)\&.x + (b)\&.x, (a)\&.y + (b)\&.y)"
.br
.ti -1c
.RI "#define \fBnk_vec2_len_sqr\fP(a)   ((a)\&.x*(a)\&.x+(a)\&.y*(a)\&.y)"
.br
.ti -1c
.RI "#define \fBnk_vec2_muls\fP(a,  t)   \fBnk_vec2\fP((a)\&.x * (t), (a)\&.y * (t))"
.br
.ti -1c
.RI "#define \fBnk_ptr_add\fP(t,  p,  i)   ((t*)((void*)((\fBnk_byte\fP*)(p) + (i))))"
.br
.ti -1c
.RI "#define \fBnk_ptr_add_const\fP(t,  p,  i)   ((const t*)((const void*)((const \fBnk_byte\fP*)(p) + (i))))"
.br
.ti -1c
.RI "#define \fBnk_zero_struct\fP(s)   nk_zero(&s, sizeof(s))"
.br
.ti -1c
.RI "#define \fBNK_UINT_TO_PTR\fP(x)   ((void*)&((char*)0)[x])"
.br
.ti -1c
.RI "#define \fBNK_PTR_TO_UINT\fP(x)   ((\fBnk_size\fP)(((char*)x)\-(char*)0))"
.br
.ti -1c
.RI "#define \fBNK_ALIGN_PTR\fP(x,  mask)       (\fBNK_UINT_TO_PTR\fP((\fBNK_PTR_TO_UINT\fP((\fBnk_byte\fP*)(x) + (mask\-1)) & ~(mask\-1))))"
.br
.ti -1c
.RI "#define \fBNK_ALIGN_PTR_BACK\fP(x,  mask)       (\fBNK_UINT_TO_PTR\fP((\fBNK_PTR_TO_UINT\fP((\fBnk_byte\fP*)(x)) & ~(mask\-1))))"
.br
.ti -1c
.RI "#define \fBNK_OFFSETOF\fP(st,  m)   ((\fBnk_ptr\fP)&(((st*)0)\->m))"
.br
.ti -1c
.RI "#define \fBNK_ALIGNOF\fP(t)   \fBNK_OFFSETOF\fP(struct {char c; t _h;}, _h)"
.br
.ti -1c
.RI "#define \fBNK_CONTAINER_OF\fP(ptr,  type,  member)       (type*)((void*)((char*)(1 ? (ptr): &((type*)0)\->member) \- \fBNK_OFFSETOF\fP(type, member)))"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef \fBNK_INT8\fP \fBnk_char\fP"
.br
.ti -1c
.RI "typedef \fBNK_UINT8\fP \fBnk_uchar\fP"
.br
.ti -1c
.RI "typedef \fBNK_UINT8\fP \fBnk_byte\fP"
.br
.ti -1c
.RI "typedef \fBNK_INT16\fP \fBnk_short\fP"
.br
.ti -1c
.RI "typedef \fBNK_UINT16\fP \fBnk_ushort\fP"
.br
.ti -1c
.RI "typedef \fBNK_INT32\fP \fBnk_int\fP"
.br
.ti -1c
.RI "typedef \fBNK_UINT32\fP \fBnk_uint\fP"
.br
.ti -1c
.RI "typedef \fBNK_SIZE_TYPE\fP \fBnk_size\fP"
.br
.ti -1c
.RI "typedef \fBNK_POINTER_TYPE\fP \fBnk_ptr\fP"
.br
.ti -1c
.RI "typedef \fBNK_BOOL\fP \fBnk_bool\fP"
.br
.ti -1c
.RI "typedef \fBnk_uint\fP \fBnk_hash\fP"
.br
.ti -1c
.RI "typedef \fBnk_uint\fP \fBnk_flags\fP"
.br
.ti -1c
.RI "typedef \fBnk_uint\fP \fBnk_rune\fP"
.br
.ti -1c
.RI "typedef char \fBnk_glyph\fP[\fBNK_UTF_SIZE\fP]"
.br
.ti -1c
.RI "typedef void *(* \fBnk_plugin_alloc\fP) (\fBnk_handle\fP, void *old, \fBnk_size\fP)"
.br
.ti -1c
.RI "typedef void(* \fBnk_plugin_free\fP) (\fBnk_handle\fP, void *old)"
.br
.ti -1c
.RI "typedef \fBnk_bool\fP(* \fBnk_plugin_filter\fP) (const struct \fBnk_text_edit\fP *, \fBnk_rune\fP unicode)"
.br
.ti -1c
.RI "typedef void(* \fBnk_plugin_paste\fP) (\fBnk_handle\fP, struct \fBnk_text_edit\fP *)"
.br
.ti -1c
.RI "typedef void(* \fBnk_plugin_copy\fP) (\fBnk_handle\fP, const char *, int len)"
.br
.ti -1c
.RI "typedef float(* \fBnk_text_width_f\fP) (\fBnk_handle\fP, float h, const char *, int len)"
.br
.ti -1c
.RI "typedef void(* \fBnk_query_font_glyph_f\fP) (\fBnk_handle\fP handle, float font_height, struct nk_user_font_glyph *glyph, \fBnk_rune\fP codepoint, \fBnk_rune\fP next_codepoint)"
.br
.ti -1c
.RI "typedef void(* \fBnk_command_custom_callback\fP) (void *canvas, short x, short y, unsigned short w, unsigned short h, \fBnk_handle\fP callback_data)"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum { \fBnk_false\fP, \fBnk_true\fP }"
.br
.ti -1c
.RI "enum \fBnk_heading\fP { \fBNK_UP\fP, \fBNK_RIGHT\fP, \fBNK_DOWN\fP, \fBNK_LEFT\fP }"
.br
.ti -1c
.RI "enum \fBnk_button_behavior\fP { \fBNK_BUTTON_DEFAULT\fP, \fBNK_BUTTON_REPEATER\fP }"
.br
.ti -1c
.RI "enum \fBnk_modify\fP { \fBNK_FIXED\fP = nk_false, \fBNK_MODIFIABLE\fP = nk_true }"
.br
.ti -1c
.RI "enum \fBnk_orientation\fP { \fBNK_VERTICAL\fP, \fBNK_HORIZONTAL\fP }"
.br
.ti -1c
.RI "enum \fBnk_collapse_states\fP { \fBNK_MINIMIZED\fP = nk_false, \fBNK_MAXIMIZED\fP = nk_true }"
.br
.ti -1c
.RI "enum \fBnk_show_states\fP { \fBNK_HIDDEN\fP = nk_false, \fBNK_SHOWN\fP = nk_true }"
.br
.ti -1c
.RI "enum \fBnk_chart_type\fP { \fBNK_CHART_LINES\fP, \fBNK_CHART_COLUMN\fP, \fBNK_CHART_MAX\fP }"
.br
.ti -1c
.RI "enum \fBnk_chart_event\fP { \fBNK_CHART_HOVERING\fP = 0x01, \fBNK_CHART_CLICKED\fP = 0x02 }"
.br
.ti -1c
.RI "enum \fBnk_color_format\fP { \fBNK_RGB\fP, \fBNK_RGBA\fP }"
.br
.ti -1c
.RI "enum \fBnk_popup_type\fP { \fBNK_POPUP_STATIC\fP, \fBNK_POPUP_DYNAMIC\fP }"
.br
.ti -1c
.RI "enum \fBnk_layout_format\fP { \fBNK_DYNAMIC\fP, \fBNK_STATIC\fP }"
.br
.ti -1c
.RI "enum \fBnk_tree_type\fP { \fBNK_TREE_NODE\fP, \fBNK_TREE_TAB\fP }"
.br
.ti -1c
.RI "enum \fBnk_symbol_type\fP { \fBNK_SYMBOL_NONE\fP, \fBNK_SYMBOL_X\fP, \fBNK_SYMBOL_UNDERSCORE\fP, \fBNK_SYMBOL_CIRCLE_SOLID\fP, \fBNK_SYMBOL_CIRCLE_OUTLINE\fP, \fBNK_SYMBOL_RECT_SOLID\fP, \fBNK_SYMBOL_RECT_OUTLINE\fP, \fBNK_SYMBOL_TRIANGLE_UP\fP, \fBNK_SYMBOL_TRIANGLE_DOWN\fP, \fBNK_SYMBOL_TRIANGLE_LEFT\fP, \fBNK_SYMBOL_TRIANGLE_RIGHT\fP, \fBNK_SYMBOL_PLUS\fP, \fBNK_SYMBOL_MINUS\fP, \fBNK_SYMBOL_MAX\fP }"
.br
.ti -1c
.RI "enum \fBnk_keys\fP { \fBNK_KEY_NONE\fP, \fBNK_KEY_SHIFT\fP, \fBNK_KEY_CTRL\fP, \fBNK_KEY_DEL\fP, \fBNK_KEY_ENTER\fP, \fBNK_KEY_TAB\fP, \fBNK_KEY_BACKSPACE\fP, \fBNK_KEY_COPY\fP, \fBNK_KEY_CUT\fP, \fBNK_KEY_PASTE\fP, \fBNK_KEY_UP\fP, \fBNK_KEY_DOWN\fP, \fBNK_KEY_LEFT\fP, \fBNK_KEY_RIGHT\fP, \fBNK_KEY_TEXT_INSERT_MODE\fP, \fBNK_KEY_TEXT_REPLACE_MODE\fP, \fBNK_KEY_TEXT_RESET_MODE\fP, \fBNK_KEY_TEXT_LINE_START\fP, \fBNK_KEY_TEXT_LINE_END\fP, \fBNK_KEY_TEXT_START\fP, \fBNK_KEY_TEXT_END\fP, \fBNK_KEY_TEXT_UNDO\fP, \fBNK_KEY_TEXT_REDO\fP, \fBNK_KEY_TEXT_SELECT_ALL\fP, \fBNK_KEY_TEXT_WORD_LEFT\fP, \fBNK_KEY_TEXT_WORD_RIGHT\fP, \fBNK_KEY_SCROLL_START\fP, \fBNK_KEY_SCROLL_END\fP, \fBNK_KEY_SCROLL_DOWN\fP, \fBNK_KEY_SCROLL_UP\fP, \fBNK_KEY_MAX\fP }"
.br
.ti -1c
.RI "enum \fBnk_buttons\fP { \fBNK_BUTTON_LEFT\fP, \fBNK_BUTTON_MIDDLE\fP, \fBNK_BUTTON_RIGHT\fP, \fBNK_BUTTON_DOUBLE\fP, \fBNK_BUTTON_MAX\fP }"
.br
.ti -1c
.RI "enum \fBnk_anti_aliasing\fP { \fBNK_ANTI_ALIASING_OFF\fP, \fBNK_ANTI_ALIASING_ON\fP }"
.br
.ti -1c
.RI "enum \fBnk_convert_result\fP { \fBNK_CONVERT_SUCCESS\fP = 0, \fBNK_CONVERT_INVALID_PARAM\fP = 1, \fBNK_CONVERT_COMMAND_BUFFER_FULL\fP = NK_FLAG(1), \fBNK_CONVERT_VERTEX_BUFFER_FULL\fP = NK_FLAG(2), \fBNK_CONVERT_ELEMENT_BUFFER_FULL\fP = NK_FLAG(3) }"
.br
.ti -1c
.RI "enum \fBnk_panel_flags\fP { \fBNK_WINDOW_BORDER\fP = NK_FLAG(0), \fBNK_WINDOW_MOVABLE\fP = NK_FLAG(1), \fBNK_WINDOW_SCALABLE\fP = NK_FLAG(2), \fBNK_WINDOW_CLOSABLE\fP = NK_FLAG(3), \fBNK_WINDOW_MINIMIZABLE\fP = NK_FLAG(4), \fBNK_WINDOW_NO_SCROLLBAR\fP = NK_FLAG(5), \fBNK_WINDOW_TITLE\fP = NK_FLAG(6), \fBNK_WINDOW_SCROLL_AUTO_HIDE\fP = NK_FLAG(7), \fBNK_WINDOW_BACKGROUND\fP = NK_FLAG(8), \fBNK_WINDOW_SCALE_LEFT\fP = NK_FLAG(9), \fBNK_WINDOW_NO_INPUT\fP = NK_FLAG(10) }"
.br
.ti -1c
.RI "enum \fBnk_widget_layout_states\fP { \fBNK_WIDGET_INVALID\fP, \fBNK_WIDGET_VALID\fP, \fBNK_WIDGET_ROM\fP }"
.br
.ti -1c
.RI "enum \fBnk_widget_states\fP { \fBNK_WIDGET_STATE_MODIFIED\fP = NK_FLAG(1), \fBNK_WIDGET_STATE_INACTIVE\fP = NK_FLAG(2), \fBNK_WIDGET_STATE_ENTERED\fP = NK_FLAG(3), \fBNK_WIDGET_STATE_HOVER\fP = NK_FLAG(4), \fBNK_WIDGET_STATE_ACTIVED\fP = NK_FLAG(5), \fBNK_WIDGET_STATE_LEFT\fP = NK_FLAG(6), \fBNK_WIDGET_STATE_HOVERED\fP = NK_WIDGET_STATE_HOVER|NK_WIDGET_STATE_MODIFIED, \fBNK_WIDGET_STATE_ACTIVE\fP = NK_WIDGET_STATE_ACTIVED|NK_WIDGET_STATE_MODIFIED }"
.br
.ti -1c
.RI "enum \fBnk_text_align\fP { \fBNK_TEXT_ALIGN_LEFT\fP = 0x01, \fBNK_TEXT_ALIGN_CENTERED\fP = 0x02, \fBNK_TEXT_ALIGN_RIGHT\fP = 0x04, \fBNK_TEXT_ALIGN_TOP\fP = 0x08, \fBNK_TEXT_ALIGN_MIDDLE\fP = 0x10, \fBNK_TEXT_ALIGN_BOTTOM\fP = 0x20 }"
.br
.ti -1c
.RI "enum \fBnk_text_alignment\fP { \fBNK_TEXT_LEFT\fP = NK_TEXT_ALIGN_MIDDLE|NK_TEXT_ALIGN_LEFT, \fBNK_TEXT_CENTERED\fP = NK_TEXT_ALIGN_MIDDLE|NK_TEXT_ALIGN_CENTERED, \fBNK_TEXT_RIGHT\fP = NK_TEXT_ALIGN_MIDDLE|NK_TEXT_ALIGN_RIGHT }"
.br
.ti -1c
.RI "enum \fBnk_edit_flags\fP { \fBNK_EDIT_DEFAULT\fP = 0, \fBNK_EDIT_READ_ONLY\fP = NK_FLAG(0), \fBNK_EDIT_AUTO_SELECT\fP = NK_FLAG(1), \fBNK_EDIT_SIG_ENTER\fP = NK_FLAG(2), \fBNK_EDIT_ALLOW_TAB\fP = NK_FLAG(3), \fBNK_EDIT_NO_CURSOR\fP = NK_FLAG(4), \fBNK_EDIT_SELECTABLE\fP = NK_FLAG(5), \fBNK_EDIT_CLIPBOARD\fP = NK_FLAG(6), \fBNK_EDIT_CTRL_ENTER_NEWLINE\fP = NK_FLAG(7), \fBNK_EDIT_NO_HORIZONTAL_SCROLL\fP = NK_FLAG(8), \fBNK_EDIT_ALWAYS_INSERT_MODE\fP = NK_FLAG(9), \fBNK_EDIT_MULTILINE\fP = NK_FLAG(10), \fBNK_EDIT_GOTO_END_ON_ACTIVATE\fP = NK_FLAG(11) }"
.br
.ti -1c
.RI "enum \fBnk_edit_types\fP { \fBNK_EDIT_SIMPLE\fP = NK_EDIT_ALWAYS_INSERT_MODE, \fBNK_EDIT_FIELD\fP = NK_EDIT_SIMPLE|NK_EDIT_SELECTABLE|NK_EDIT_CLIPBOARD, \fBNK_EDIT_BOX\fP = NK_EDIT_ALWAYS_INSERT_MODE| NK_EDIT_SELECTABLE| NK_EDIT_MULTILINE|NK_EDIT_ALLOW_TAB|NK_EDIT_CLIPBOARD, \fBNK_EDIT_EDITOR\fP = NK_EDIT_SELECTABLE|NK_EDIT_MULTILINE|NK_EDIT_ALLOW_TAB| NK_EDIT_CLIPBOARD }"
.br
.ti -1c
.RI "enum \fBnk_edit_events\fP { \fBNK_EDIT_ACTIVE\fP = NK_FLAG(0), \fBNK_EDIT_INACTIVE\fP = NK_FLAG(1), \fBNK_EDIT_ACTIVATED\fP = NK_FLAG(2), \fBNK_EDIT_DEACTIVATED\fP = NK_FLAG(3), \fBNK_EDIT_COMMITED\fP = NK_FLAG(4) }"
.br
.ti -1c
.RI "enum \fBnk_style_colors\fP { \fBNK_COLOR_TEXT\fP, \fBNK_COLOR_WINDOW\fP, \fBNK_COLOR_HEADER\fP, \fBNK_COLOR_BORDER\fP, \fBNK_COLOR_BUTTON\fP, \fBNK_COLOR_BUTTON_HOVER\fP, \fBNK_COLOR_BUTTON_ACTIVE\fP, \fBNK_COLOR_TOGGLE\fP, \fBNK_COLOR_TOGGLE_HOVER\fP, \fBNK_COLOR_TOGGLE_CURSOR\fP, \fBNK_COLOR_SELECT\fP, \fBNK_COLOR_SELECT_ACTIVE\fP, \fBNK_COLOR_SLIDER\fP, \fBNK_COLOR_SLIDER_CURSOR\fP, \fBNK_COLOR_SLIDER_CURSOR_HOVER\fP, \fBNK_COLOR_SLIDER_CURSOR_ACTIVE\fP, \fBNK_COLOR_PROPERTY\fP, \fBNK_COLOR_EDIT\fP, \fBNK_COLOR_EDIT_CURSOR\fP, \fBNK_COLOR_COMBO\fP, \fBNK_COLOR_CHART\fP, \fBNK_COLOR_CHART_COLOR\fP, \fBNK_COLOR_CHART_COLOR_HIGHLIGHT\fP, \fBNK_COLOR_SCROLLBAR\fP, \fBNK_COLOR_SCROLLBAR_CURSOR\fP, \fBNK_COLOR_SCROLLBAR_CURSOR_HOVER\fP, \fBNK_COLOR_SCROLLBAR_CURSOR_ACTIVE\fP, \fBNK_COLOR_TAB_HEADER\fP, \fBNK_COLOR_COUNT\fP }"
.br
.ti -1c
.RI "enum \fBnk_style_cursor\fP { \fBNK_CURSOR_ARROW\fP, \fBNK_CURSOR_TEXT\fP, \fBNK_CURSOR_MOVE\fP, \fBNK_CURSOR_RESIZE_VERTICAL\fP, \fBNK_CURSOR_RESIZE_HORIZONTAL\fP, \fBNK_CURSOR_RESIZE_TOP_LEFT_DOWN_RIGHT\fP, \fBNK_CURSOR_RESIZE_TOP_RIGHT_DOWN_LEFT\fP, \fBNK_CURSOR_COUNT\fP }"
.br
.ti -1c
.RI "enum \fBnk_allocation_type\fP { \fBNK_BUFFER_FIXED\fP, \fBNK_BUFFER_DYNAMIC\fP }"
.br
.ti -1c
.RI "enum \fBnk_buffer_allocation_type\fP { \fBNK_BUFFER_FRONT\fP, \fBNK_BUFFER_BACK\fP, \fBNK_BUFFER_MAX\fP }"
.br
.ti -1c
.RI "enum \fBnk_text_edit_type\fP { \fBNK_TEXT_EDIT_SINGLE_LINE\fP, \fBNK_TEXT_EDIT_MULTI_LINE\fP }"
.br
.ti -1c
.RI "enum \fBnk_text_edit_mode\fP { \fBNK_TEXT_EDIT_MODE_VIEW\fP, \fBNK_TEXT_EDIT_MODE_INSERT\fP, \fBNK_TEXT_EDIT_MODE_REPLACE\fP }"
.br
.ti -1c
.RI "enum \fBnk_command_type\fP { \fBNK_COMMAND_NOP\fP, \fBNK_COMMAND_SCISSOR\fP, \fBNK_COMMAND_LINE\fP, \fBNK_COMMAND_CURVE\fP, \fBNK_COMMAND_RECT\fP, \fBNK_COMMAND_RECT_FILLED\fP, \fBNK_COMMAND_RECT_MULTI_COLOR\fP, \fBNK_COMMAND_CIRCLE\fP, \fBNK_COMMAND_CIRCLE_FILLED\fP, \fBNK_COMMAND_ARC\fP, \fBNK_COMMAND_ARC_FILLED\fP, \fBNK_COMMAND_TRIANGLE\fP, \fBNK_COMMAND_TRIANGLE_FILLED\fP, \fBNK_COMMAND_POLYGON\fP, \fBNK_COMMAND_POLYGON_FILLED\fP, \fBNK_COMMAND_POLYLINE\fP, \fBNK_COMMAND_TEXT\fP, \fBNK_COMMAND_IMAGE\fP, \fBNK_COMMAND_CUSTOM\fP }"
.br
.ti -1c
.RI "enum \fBnk_command_clipping\fP { \fBNK_CLIPPING_OFF\fP = nk_false, \fBNK_CLIPPING_ON\fP = nk_true }"
.br
.ti -1c
.RI "enum \fBnk_style_item_type\fP { \fBNK_STYLE_ITEM_COLOR\fP, \fBNK_STYLE_ITEM_IMAGE\fP, \fBNK_STYLE_ITEM_NINE_SLICE\fP }"
.br
.ti -1c
.RI "enum \fBnk_style_header_align\fP { \fBNK_HEADER_LEFT\fP, \fBNK_HEADER_RIGHT\fP }"
.br
.ti -1c
.RI "enum \fBnk_panel_type\fP { \fBNK_PANEL_NONE\fP = 0, \fBNK_PANEL_WINDOW\fP = NK_FLAG(0), \fBNK_PANEL_GROUP\fP = NK_FLAG(1), \fBNK_PANEL_POPUP\fP = NK_FLAG(2), \fBNK_PANEL_CONTEXTUAL\fP = NK_FLAG(4), \fBNK_PANEL_COMBO\fP = NK_FLAG(5), \fBNK_PANEL_MENU\fP = NK_FLAG(6), \fBNK_PANEL_TOOLTIP\fP = NK_FLAG(7) }"
.br
.ti -1c
.RI "enum \fBnk_panel_set\fP { \fBNK_PANEL_SET_NONBLOCK\fP = NK_PANEL_CONTEXTUAL|NK_PANEL_COMBO|NK_PANEL_MENU|NK_PANEL_TOOLTIP, \fBNK_PANEL_SET_POPUP\fP = NK_PANEL_SET_NONBLOCK|NK_PANEL_POPUP, \fBNK_PANEL_SET_SUB\fP = NK_PANEL_SET_POPUP|NK_PANEL_GROUP }"
.br
.ti -1c
.RI "enum \fBnk_panel_row_layout_type\fP { \fBNK_LAYOUT_DYNAMIC_FIXED\fP = 0, \fBNK_LAYOUT_DYNAMIC_ROW\fP, \fBNK_LAYOUT_DYNAMIC_FREE\fP, \fBNK_LAYOUT_DYNAMIC\fP, \fBNK_LAYOUT_STATIC_FIXED\fP, \fBNK_LAYOUT_STATIC_ROW\fP, \fBNK_LAYOUT_STATIC_FREE\fP, \fBNK_LAYOUT_STATIC\fP, \fBNK_LAYOUT_TEMPLATE\fP, \fBNK_LAYOUT_COUNT\fP }"
.br
.ti -1c
.RI "enum \fBnk_window_flags\fP { \fBNK_WINDOW_PRIVATE\fP = NK_FLAG(11), \fBNK_WINDOW_DYNAMIC\fP = NK_WINDOW_PRIVATE, \fBNK_WINDOW_ROM\fP = NK_FLAG(12), \fBNK_WINDOW_NOT_INTERACTIVE\fP = NK_WINDOW_ROM|NK_WINDOW_NO_INPUT, \fBNK_WINDOW_HIDDEN\fP = NK_FLAG(13), \fBNK_WINDOW_CLOSED\fP = NK_FLAG(14), \fBNK_WINDOW_MINIMIZED\fP = NK_FLAG(15), \fBNK_WINDOW_REMOVE_ROM\fP = NK_FLAG(16) }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBNK_STATIC_ASSERT\fP (sizeof(\fBnk_short\fP)==2)"
.br
.ti -1c
.RI "\fBNK_STATIC_ASSERT\fP (sizeof(\fBnk_ushort\fP)==2)"
.br
.ti -1c
.RI "\fBNK_STATIC_ASSERT\fP (sizeof(\fBnk_uint\fP)==4)"
.br
.ti -1c
.RI "\fBNK_STATIC_ASSERT\fP (sizeof(\fBnk_int\fP)==4)"
.br
.ti -1c
.RI "\fBNK_STATIC_ASSERT\fP (sizeof(\fBnk_byte\fP)==1)"
.br
.ti -1c
.RI "\fBNK_STATIC_ASSERT\fP (sizeof(\fBnk_flags\fP) >=4)"
.br
.ti -1c
.RI "\fBNK_STATIC_ASSERT\fP (sizeof(\fBnk_size\fP) >=sizeof(void *))"
.br
.ti -1c
.RI "\fBNK_STATIC_ASSERT\fP (sizeof(\fBnk_ptr\fP) >=sizeof(void *))"
.br
.ti -1c
.RI "\fBNK_STATIC_ASSERT\fP (sizeof(\fBnk_bool\fP) >=2)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_init_fixed\fP (struct \fBnk_context\fP *, void *memory, \fBnk_size\fP size, const struct \fBnk_user_font\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_init\fP (struct \fBnk_context\fP *, struct \fBnk_allocator\fP *, const struct \fBnk_user_font\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_init_custom\fP (struct \fBnk_context\fP *, struct \fBnk_buffer\fP *cmds, struct \fBnk_buffer\fP *pool, const struct \fBnk_user_font\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_clear\fP (struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_free\fP (struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_input_begin\fP (struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_input_motion\fP (struct \fBnk_context\fP *, int x, int y)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_input_key\fP (struct \fBnk_context\fP *, enum \fBnk_keys\fP, \fBnk_bool\fP down)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_input_button\fP (struct \fBnk_context\fP *, enum \fBnk_buttons\fP, int x, int y, \fBnk_bool\fP down)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_input_scroll\fP (struct \fBnk_context\fP *, struct \fBnk_vec2\fP val)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_input_char\fP (struct \fBnk_context\fP *, char)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_input_glyph\fP (struct \fBnk_context\fP *, const \fBnk_glyph\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_input_unicode\fP (struct \fBnk_context\fP *, \fBnk_rune\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_input_end\fP (struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP const struct \fBnk_command\fP * \fBnk__begin\fP (struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP const struct \fBnk_command\fP * \fBnk__next\fP (struct \fBnk_context\fP *, const struct \fBnk_command\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_begin\fP (struct \fBnk_context\fP *ctx, const char *title, struct \fBnk_rect\fP bounds, \fBnk_flags\fP flags)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_begin_titled\fP (struct \fBnk_context\fP *ctx, const char *name, const char *title, struct \fBnk_rect\fP bounds, \fBnk_flags\fP flags)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_end\fP (struct \fBnk_context\fP *ctx)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_window\fP * \fBnk_window_find\fP (struct \fBnk_context\fP *ctx, const char *name)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_rect\fP \fBnk_window_get_bounds\fP (const struct \fBnk_context\fP *ctx)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_vec2\fP \fBnk_window_get_position\fP (const struct \fBnk_context\fP *ctx)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_vec2\fP \fBnk_window_get_size\fP (const struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP float \fBnk_window_get_width\fP (const struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP float \fBnk_window_get_height\fP (const struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_panel\fP * \fBnk_window_get_panel\fP (struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_rect\fP \fBnk_window_get_content_region\fP (struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_vec2\fP \fBnk_window_get_content_region_min\fP (struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_vec2\fP \fBnk_window_get_content_region_max\fP (struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_vec2\fP \fBnk_window_get_content_region_size\fP (struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_command_buffer\fP * \fBnk_window_get_canvas\fP (struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_window_get_scroll\fP (struct \fBnk_context\fP *, \fBnk_uint\fP *offset_x, \fBnk_uint\fP *offset_y)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_window_has_focus\fP (const struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_window_is_hovered\fP (struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_window_is_collapsed\fP (struct \fBnk_context\fP *ctx, const char *name)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_window_is_closed\fP (struct \fBnk_context\fP *, const char *)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_window_is_hidden\fP (struct \fBnk_context\fP *, const char *)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_window_is_active\fP (struct \fBnk_context\fP *, const char *)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_window_is_any_hovered\fP (struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_item_is_any_active\fP (struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_window_set_bounds\fP (struct \fBnk_context\fP *, const char *name, struct \fBnk_rect\fP bounds)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_window_set_position\fP (struct \fBnk_context\fP *, const char *name, struct \fBnk_vec2\fP pos)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_window_set_size\fP (struct \fBnk_context\fP *, const char *name, struct \fBnk_vec2\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_window_set_focus\fP (struct \fBnk_context\fP *, const char *name)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_window_set_scroll\fP (struct \fBnk_context\fP *, \fBnk_uint\fP offset_x, \fBnk_uint\fP offset_y)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_window_close\fP (struct \fBnk_context\fP *ctx, const char *name)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_window_collapse\fP (struct \fBnk_context\fP *, const char *name, enum \fBnk_collapse_states\fP state)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_window_collapse_if\fP (struct \fBnk_context\fP *, const char *name, enum \fBnk_collapse_states\fP, int cond)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_window_show\fP (struct \fBnk_context\fP *, const char *name, enum \fBnk_show_states\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_window_show_if\fP (struct \fBnk_context\fP *, const char *name, enum \fBnk_show_states\fP, int cond)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_layout_set_min_row_height\fP (struct \fBnk_context\fP *, float height)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_layout_reset_min_row_height\fP (struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_rect\fP \fBnk_layout_widget_bounds\fP (struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP float \fBnk_layout_ratio_from_pixel\fP (struct \fBnk_context\fP *, float pixel_width)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_layout_row_dynamic\fP (struct \fBnk_context\fP *ctx, float height, int cols)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_layout_row_static\fP (struct \fBnk_context\fP *ctx, float height, int item_width, int cols)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_layout_row_begin\fP (struct \fBnk_context\fP *ctx, enum \fBnk_layout_format\fP fmt, float row_height, int cols)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_layout_row_push\fP (struct \fBnk_context\fP *, float value)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_layout_row_end\fP (struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_layout_row\fP (struct \fBnk_context\fP *, enum \fBnk_layout_format\fP, float height, int cols, const float *ratio)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_layout_row_template_begin\fP (struct \fBnk_context\fP *, float row_height)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_layout_row_template_push_dynamic\fP (struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_layout_row_template_push_variable\fP (struct \fBnk_context\fP *, float min_width)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_layout_row_template_push_static\fP (struct \fBnk_context\fP *, float width)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_layout_row_template_end\fP (struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_layout_space_begin\fP (struct \fBnk_context\fP *, enum \fBnk_layout_format\fP, float height, int widget_count)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_layout_space_push\fP (struct \fBnk_context\fP *, struct \fBnk_rect\fP bounds)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_layout_space_end\fP (struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_rect\fP \fBnk_layout_space_bounds\fP (struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_vec2\fP \fBnk_layout_space_to_screen\fP (struct \fBnk_context\fP *, struct \fBnk_vec2\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_vec2\fP \fBnk_layout_space_to_local\fP (struct \fBnk_context\fP *, struct \fBnk_vec2\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_rect\fP \fBnk_layout_space_rect_to_screen\fP (struct \fBnk_context\fP *, struct \fBnk_rect\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_rect\fP \fBnk_layout_space_rect_to_local\fP (struct \fBnk_context\fP *, struct \fBnk_rect\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_spacer\fP (struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_group_begin\fP (struct \fBnk_context\fP *, const char *title, \fBnk_flags\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_group_begin_titled\fP (struct \fBnk_context\fP *, const char *name, const char *title, \fBnk_flags\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_group_end\fP (struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_group_scrolled_offset_begin\fP (struct \fBnk_context\fP *, \fBnk_uint\fP *x_offset, \fBnk_uint\fP *y_offset, const char *title, \fBnk_flags\fP flags)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_group_scrolled_begin\fP (struct \fBnk_context\fP *, struct \fBnk_scroll\fP *off, const char *title, \fBnk_flags\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_group_scrolled_end\fP (struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_group_get_scroll\fP (struct \fBnk_context\fP *, const char *id, \fBnk_uint\fP *x_offset, \fBnk_uint\fP *y_offset)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_group_set_scroll\fP (struct \fBnk_context\fP *, const char *id, \fBnk_uint\fP x_offset, \fBnk_uint\fP y_offset)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_tree_push_hashed\fP (struct \fBnk_context\fP *, enum \fBnk_tree_type\fP, const char *title, enum \fBnk_collapse_states\fP initial_state, const char *hash, int len, int seed)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_tree_image_push_hashed\fP (struct \fBnk_context\fP *, enum \fBnk_tree_type\fP, struct \fBnk_image\fP, const char *title, enum \fBnk_collapse_states\fP initial_state, const char *hash, int len, int seed)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_tree_pop\fP (struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_tree_state_push\fP (struct \fBnk_context\fP *, enum \fBnk_tree_type\fP, const char *title, enum \fBnk_collapse_states\fP *state)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_tree_state_image_push\fP (struct \fBnk_context\fP *, enum \fBnk_tree_type\fP, struct \fBnk_image\fP, const char *title, enum \fBnk_collapse_states\fP *state)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_tree_state_pop\fP (struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_tree_element_push_hashed\fP (struct \fBnk_context\fP *, enum \fBnk_tree_type\fP, const char *title, enum \fBnk_collapse_states\fP initial_state, \fBnk_bool\fP *selected, const char *hash, int len, int seed)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_tree_element_image_push_hashed\fP (struct \fBnk_context\fP *, enum \fBnk_tree_type\fP, struct \fBnk_image\fP, const char *title, enum \fBnk_collapse_states\fP initial_state, \fBnk_bool\fP *selected, const char *hash, int len, int seed)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_tree_element_pop\fP (struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_list_view_begin\fP (struct \fBnk_context\fP *, struct \fBnk_list_view\fP *out, const char *id, \fBnk_flags\fP, int row_height, int row_count)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_list_view_end\fP (struct \fBnk_list_view\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP enum \fBnk_widget_layout_states\fP \fBnk_widget\fP (struct \fBnk_rect\fP *, const struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP enum \fBnk_widget_layout_states\fP \fBnk_widget_fitting\fP (struct \fBnk_rect\fP *, struct \fBnk_context\fP *, struct \fBnk_vec2\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_rect\fP \fBnk_widget_bounds\fP (struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_vec2\fP \fBnk_widget_position\fP (struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_vec2\fP \fBnk_widget_size\fP (struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP float \fBnk_widget_width\fP (struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP float \fBnk_widget_height\fP (struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_widget_is_hovered\fP (struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_widget_is_mouse_clicked\fP (struct \fBnk_context\fP *, enum \fBnk_buttons\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_widget_has_mouse_click_down\fP (struct \fBnk_context\fP *, enum \fBnk_buttons\fP, \fBnk_bool\fP down)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_spacing\fP (struct \fBnk_context\fP *, int cols)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_text\fP (struct \fBnk_context\fP *, const char *, int, \fBnk_flags\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_text_colored\fP (struct \fBnk_context\fP *, const char *, int, \fBnk_flags\fP, struct \fBnk_color\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_text_wrap\fP (struct \fBnk_context\fP *, const char *, int)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_text_wrap_colored\fP (struct \fBnk_context\fP *, const char *, int, struct \fBnk_color\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_label\fP (struct \fBnk_context\fP *, const char *, \fBnk_flags\fP align)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_label_colored\fP (struct \fBnk_context\fP *, const char *, \fBnk_flags\fP align, struct \fBnk_color\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_label_wrap\fP (struct \fBnk_context\fP *, const char *)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_label_colored_wrap\fP (struct \fBnk_context\fP *, const char *, struct \fBnk_color\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_image\fP (struct \fBnk_context\fP *, struct \fBnk_image\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_image_color\fP (struct \fBnk_context\fP *, struct \fBnk_image\fP, struct \fBnk_color\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_button_text\fP (struct \fBnk_context\fP *, const char *title, int len)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_button_label\fP (struct \fBnk_context\fP *, const char *title)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_button_color\fP (struct \fBnk_context\fP *, struct \fBnk_color\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_button_symbol\fP (struct \fBnk_context\fP *, enum \fBnk_symbol_type\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_button_image\fP (struct \fBnk_context\fP *, struct \fBnk_image\fP img)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_button_symbol_label\fP (struct \fBnk_context\fP *, enum \fBnk_symbol_type\fP, const char *, \fBnk_flags\fP text_alignment)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_button_symbol_text\fP (struct \fBnk_context\fP *, enum \fBnk_symbol_type\fP, const char *, int, \fBnk_flags\fP alignment)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_button_image_label\fP (struct \fBnk_context\fP *, struct \fBnk_image\fP img, const char *, \fBnk_flags\fP text_alignment)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_button_image_text\fP (struct \fBnk_context\fP *, struct \fBnk_image\fP img, const char *, int, \fBnk_flags\fP alignment)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_button_text_styled\fP (struct \fBnk_context\fP *, const struct \fBnk_style_button\fP *, const char *title, int len)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_button_label_styled\fP (struct \fBnk_context\fP *, const struct \fBnk_style_button\fP *, const char *title)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_button_symbol_styled\fP (struct \fBnk_context\fP *, const struct \fBnk_style_button\fP *, enum \fBnk_symbol_type\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_button_image_styled\fP (struct \fBnk_context\fP *, const struct \fBnk_style_button\fP *, struct \fBnk_image\fP img)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_button_symbol_text_styled\fP (struct \fBnk_context\fP *, const struct \fBnk_style_button\fP *, enum \fBnk_symbol_type\fP, const char *, int, \fBnk_flags\fP alignment)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_button_symbol_label_styled\fP (struct \fBnk_context\fP *ctx, const struct \fBnk_style_button\fP *style, enum \fBnk_symbol_type\fP symbol, const char *title, \fBnk_flags\fP align)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_button_image_label_styled\fP (struct \fBnk_context\fP *, const struct \fBnk_style_button\fP *, struct \fBnk_image\fP img, const char *, \fBnk_flags\fP text_alignment)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_button_image_text_styled\fP (struct \fBnk_context\fP *, const struct \fBnk_style_button\fP *, struct \fBnk_image\fP img, const char *, int, \fBnk_flags\fP alignment)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_button_set_behavior\fP (struct \fBnk_context\fP *, enum \fBnk_button_behavior\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_button_push_behavior\fP (struct \fBnk_context\fP *, enum \fBnk_button_behavior\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_button_pop_behavior\fP (struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_check_label\fP (struct \fBnk_context\fP *, const char *, \fBnk_bool\fP active)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_check_text\fP (struct \fBnk_context\fP *, const char *, int, \fBnk_bool\fP active)"
.br
.ti -1c
.RI "\fBNK_API\fP unsigned \fBnk_check_flags_label\fP (struct \fBnk_context\fP *, const char *, unsigned int flags, unsigned int value)"
.br
.ti -1c
.RI "\fBNK_API\fP unsigned \fBnk_check_flags_text\fP (struct \fBnk_context\fP *, const char *, int, unsigned int flags, unsigned int value)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_checkbox_label\fP (struct \fBnk_context\fP *, const char *, \fBnk_bool\fP *active)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_checkbox_text\fP (struct \fBnk_context\fP *, const char *, int, \fBnk_bool\fP *active)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_checkbox_flags_label\fP (struct \fBnk_context\fP *, const char *, unsigned int *flags, unsigned int value)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_checkbox_flags_text\fP (struct \fBnk_context\fP *, const char *, int, unsigned int *flags, unsigned int value)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_radio_label\fP (struct \fBnk_context\fP *, const char *, \fBnk_bool\fP *active)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_radio_text\fP (struct \fBnk_context\fP *, const char *, int, \fBnk_bool\fP *active)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_option_label\fP (struct \fBnk_context\fP *, const char *, \fBnk_bool\fP active)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_option_text\fP (struct \fBnk_context\fP *, const char *, int, \fBnk_bool\fP active)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_selectable_label\fP (struct \fBnk_context\fP *, const char *, \fBnk_flags\fP align, \fBnk_bool\fP *value)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_selectable_text\fP (struct \fBnk_context\fP *, const char *, int, \fBnk_flags\fP align, \fBnk_bool\fP *value)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_selectable_image_label\fP (struct \fBnk_context\fP *, struct \fBnk_image\fP, const char *, \fBnk_flags\fP align, \fBnk_bool\fP *value)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_selectable_image_text\fP (struct \fBnk_context\fP *, struct \fBnk_image\fP, const char *, int, \fBnk_flags\fP align, \fBnk_bool\fP *value)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_selectable_symbol_label\fP (struct \fBnk_context\fP *, enum \fBnk_symbol_type\fP, const char *, \fBnk_flags\fP align, \fBnk_bool\fP *value)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_selectable_symbol_text\fP (struct \fBnk_context\fP *, enum \fBnk_symbol_type\fP, const char *, int, \fBnk_flags\fP align, \fBnk_bool\fP *value)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_select_label\fP (struct \fBnk_context\fP *, const char *, \fBnk_flags\fP align, \fBnk_bool\fP value)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_select_text\fP (struct \fBnk_context\fP *, const char *, int, \fBnk_flags\fP align, \fBnk_bool\fP value)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_select_image_label\fP (struct \fBnk_context\fP *, struct \fBnk_image\fP, const char *, \fBnk_flags\fP align, \fBnk_bool\fP value)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_select_image_text\fP (struct \fBnk_context\fP *, struct \fBnk_image\fP, const char *, int, \fBnk_flags\fP align, \fBnk_bool\fP value)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_select_symbol_label\fP (struct \fBnk_context\fP *, enum \fBnk_symbol_type\fP, const char *, \fBnk_flags\fP align, \fBnk_bool\fP value)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_select_symbol_text\fP (struct \fBnk_context\fP *, enum \fBnk_symbol_type\fP, const char *, int, \fBnk_flags\fP align, \fBnk_bool\fP value)"
.br
.ti -1c
.RI "\fBNK_API\fP float \fBnk_slide_float\fP (struct \fBnk_context\fP *, float min, float val, float max, float step)"
.br
.ti -1c
.RI "\fBNK_API\fP int \fBnk_slide_int\fP (struct \fBnk_context\fP *, int min, int val, int max, int step)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_slider_float\fP (struct \fBnk_context\fP *, float min, float *val, float max, float step)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_slider_int\fP (struct \fBnk_context\fP *, int min, int *val, int max, int step)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_progress\fP (struct \fBnk_context\fP *, \fBnk_size\fP *cur, \fBnk_size\fP max, \fBnk_bool\fP modifyable)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_size\fP \fBnk_prog\fP (struct \fBnk_context\fP *, \fBnk_size\fP cur, \fBnk_size\fP max, \fBnk_bool\fP modifyable)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_colorf\fP \fBnk_color_picker\fP (struct \fBnk_context\fP *, struct \fBnk_colorf\fP, enum \fBnk_color_format\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_color_pick\fP (struct \fBnk_context\fP *, struct \fBnk_colorf\fP *, enum \fBnk_color_format\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_property_int\fP (struct \fBnk_context\fP *, const char *name, int min, int *val, int max, int step, float inc_per_pixel)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_property_float\fP (struct \fBnk_context\fP *, const char *name, float min, float *val, float max, float step, float inc_per_pixel)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_property_double\fP (struct \fBnk_context\fP *, const char *name, double min, double *val, double max, double step, float inc_per_pixel)"
.br
.ti -1c
.RI "\fBNK_API\fP int \fBnk_propertyi\fP (struct \fBnk_context\fP *, const char *name, int min, int val, int max, int step, float inc_per_pixel)"
.br
.ti -1c
.RI "\fBNK_API\fP float \fBnk_propertyf\fP (struct \fBnk_context\fP *, const char *name, float min, float val, float max, float step, float inc_per_pixel)"
.br
.ti -1c
.RI "\fBNK_API\fP double \fBnk_propertyd\fP (struct \fBnk_context\fP *, const char *name, double min, double val, double max, double step, float inc_per_pixel)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_flags\fP \fBnk_edit_string\fP (struct \fBnk_context\fP *, \fBnk_flags\fP, char *buffer, int *len, int max, \fBnk_plugin_filter\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_flags\fP \fBnk_edit_string_zero_terminated\fP (struct \fBnk_context\fP *, \fBnk_flags\fP, char *buffer, int max, \fBnk_plugin_filter\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_flags\fP \fBnk_edit_buffer\fP (struct \fBnk_context\fP *, \fBnk_flags\fP, struct \fBnk_text_edit\fP *, \fBnk_plugin_filter\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_edit_focus\fP (struct \fBnk_context\fP *, \fBnk_flags\fP flags)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_edit_unfocus\fP (struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_chart_begin\fP (struct \fBnk_context\fP *, enum \fBnk_chart_type\fP, int num, float min, float max)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_chart_begin_colored\fP (struct \fBnk_context\fP *, enum \fBnk_chart_type\fP, struct \fBnk_color\fP, struct \fBnk_color\fP active, int num, float min, float max)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_chart_add_slot\fP (struct \fBnk_context\fP *ctx, const enum \fBnk_chart_type\fP, int count, float min_value, float max_value)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_chart_add_slot_colored\fP (struct \fBnk_context\fP *ctx, const enum \fBnk_chart_type\fP, struct \fBnk_color\fP, struct \fBnk_color\fP active, int count, float min_value, float max_value)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_flags\fP \fBnk_chart_push\fP (struct \fBnk_context\fP *, float)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_flags\fP \fBnk_chart_push_slot\fP (struct \fBnk_context\fP *, float, int)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_chart_end\fP (struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_plot\fP (struct \fBnk_context\fP *, enum \fBnk_chart_type\fP, const float *values, int count, int offset)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_plot_function\fP (struct \fBnk_context\fP *, enum \fBnk_chart_type\fP, void *userdata, float(*value_getter)(void *user, int index), int count, int offset)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_popup_begin\fP (struct \fBnk_context\fP *, enum \fBnk_popup_type\fP, const char *, \fBnk_flags\fP, struct \fBnk_rect\fP bounds)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_popup_close\fP (struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_popup_end\fP (struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_popup_get_scroll\fP (struct \fBnk_context\fP *, \fBnk_uint\fP *offset_x, \fBnk_uint\fP *offset_y)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_popup_set_scroll\fP (struct \fBnk_context\fP *, \fBnk_uint\fP offset_x, \fBnk_uint\fP offset_y)"
.br
.ti -1c
.RI "\fBNK_API\fP int \fBnk_combo\fP (struct \fBnk_context\fP *, const char **items, int count, int selected, int item_height, struct \fBnk_vec2\fP size)"
.br
.ti -1c
.RI "\fBNK_API\fP int \fBnk_combo_separator\fP (struct \fBnk_context\fP *, const char *items_separated_by_separator, int separator, int selected, int count, int item_height, struct \fBnk_vec2\fP size)"
.br
.ti -1c
.RI "\fBNK_API\fP int \fBnk_combo_string\fP (struct \fBnk_context\fP *, const char *items_separated_by_zeros, int selected, int count, int item_height, struct \fBnk_vec2\fP size)"
.br
.ti -1c
.RI "\fBNK_API\fP int \fBnk_combo_callback\fP (struct \fBnk_context\fP *, void(*item_getter)(void *, int, const char **), void *userdata, int selected, int count, int item_height, struct \fBnk_vec2\fP size)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_combobox\fP (struct \fBnk_context\fP *, const char **items, int count, int *selected, int item_height, struct \fBnk_vec2\fP size)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_combobox_string\fP (struct \fBnk_context\fP *, const char *items_separated_by_zeros, int *selected, int count, int item_height, struct \fBnk_vec2\fP size)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_combobox_separator\fP (struct \fBnk_context\fP *, const char *items_separated_by_separator, int separator, int *selected, int count, int item_height, struct \fBnk_vec2\fP size)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_combobox_callback\fP (struct \fBnk_context\fP *, void(*item_getter)(void *, int, const char **), void *, int *selected, int count, int item_height, struct \fBnk_vec2\fP size)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_combo_begin_text\fP (struct \fBnk_context\fP *, const char *selected, int, struct \fBnk_vec2\fP size)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_combo_begin_label\fP (struct \fBnk_context\fP *, const char *selected, struct \fBnk_vec2\fP size)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_combo_begin_color\fP (struct \fBnk_context\fP *, struct \fBnk_color\fP color, struct \fBnk_vec2\fP size)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_combo_begin_symbol\fP (struct \fBnk_context\fP *, enum \fBnk_symbol_type\fP, struct \fBnk_vec2\fP size)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_combo_begin_symbol_label\fP (struct \fBnk_context\fP *, const char *selected, enum \fBnk_symbol_type\fP, struct \fBnk_vec2\fP size)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_combo_begin_symbol_text\fP (struct \fBnk_context\fP *, const char *selected, int, enum \fBnk_symbol_type\fP, struct \fBnk_vec2\fP size)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_combo_begin_image\fP (struct \fBnk_context\fP *, struct \fBnk_image\fP img, struct \fBnk_vec2\fP size)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_combo_begin_image_label\fP (struct \fBnk_context\fP *, const char *selected, struct \fBnk_image\fP, struct \fBnk_vec2\fP size)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_combo_begin_image_text\fP (struct \fBnk_context\fP *, const char *selected, int, struct \fBnk_image\fP, struct \fBnk_vec2\fP size)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_combo_item_label\fP (struct \fBnk_context\fP *, const char *, \fBnk_flags\fP alignment)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_combo_item_text\fP (struct \fBnk_context\fP *, const char *, int, \fBnk_flags\fP alignment)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_combo_item_image_label\fP (struct \fBnk_context\fP *, struct \fBnk_image\fP, const char *, \fBnk_flags\fP alignment)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_combo_item_image_text\fP (struct \fBnk_context\fP *, struct \fBnk_image\fP, const char *, int, \fBnk_flags\fP alignment)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_combo_item_symbol_label\fP (struct \fBnk_context\fP *, enum \fBnk_symbol_type\fP, const char *, \fBnk_flags\fP alignment)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_combo_item_symbol_text\fP (struct \fBnk_context\fP *, enum \fBnk_symbol_type\fP, const char *, int, \fBnk_flags\fP alignment)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_combo_close\fP (struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_combo_end\fP (struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_contextual_begin\fP (struct \fBnk_context\fP *, \fBnk_flags\fP, struct \fBnk_vec2\fP, struct \fBnk_rect\fP trigger_bounds)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_contextual_item_text\fP (struct \fBnk_context\fP *, const char *, int, \fBnk_flags\fP align)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_contextual_item_label\fP (struct \fBnk_context\fP *, const char *, \fBnk_flags\fP align)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_contextual_item_image_label\fP (struct \fBnk_context\fP *, struct \fBnk_image\fP, const char *, \fBnk_flags\fP alignment)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_contextual_item_image_text\fP (struct \fBnk_context\fP *, struct \fBnk_image\fP, const char *, int len, \fBnk_flags\fP alignment)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_contextual_item_symbol_label\fP (struct \fBnk_context\fP *, enum \fBnk_symbol_type\fP, const char *, \fBnk_flags\fP alignment)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_contextual_item_symbol_text\fP (struct \fBnk_context\fP *, enum \fBnk_symbol_type\fP, const char *, int, \fBnk_flags\fP alignment)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_contextual_close\fP (struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_contextual_end\fP (struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_tooltip\fP (struct \fBnk_context\fP *, const char *)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_tooltip_begin\fP (struct \fBnk_context\fP *, float width)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_tooltip_end\fP (struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_menubar_begin\fP (struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_menubar_end\fP (struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_menu_begin_text\fP (struct \fBnk_context\fP *, const char *title, int title_len, \fBnk_flags\fP align, struct \fBnk_vec2\fP size)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_menu_begin_label\fP (struct \fBnk_context\fP *, const char *, \fBnk_flags\fP align, struct \fBnk_vec2\fP size)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_menu_begin_image\fP (struct \fBnk_context\fP *, const char *, struct \fBnk_image\fP, struct \fBnk_vec2\fP size)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_menu_begin_image_text\fP (struct \fBnk_context\fP *, const char *, int, \fBnk_flags\fP align, struct \fBnk_image\fP, struct \fBnk_vec2\fP size)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_menu_begin_image_label\fP (struct \fBnk_context\fP *, const char *, \fBnk_flags\fP align, struct \fBnk_image\fP, struct \fBnk_vec2\fP size)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_menu_begin_symbol\fP (struct \fBnk_context\fP *, const char *, enum \fBnk_symbol_type\fP, struct \fBnk_vec2\fP size)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_menu_begin_symbol_text\fP (struct \fBnk_context\fP *, const char *, int, \fBnk_flags\fP align, enum \fBnk_symbol_type\fP, struct \fBnk_vec2\fP size)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_menu_begin_symbol_label\fP (struct \fBnk_context\fP *, const char *, \fBnk_flags\fP align, enum \fBnk_symbol_type\fP, struct \fBnk_vec2\fP size)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_menu_item_text\fP (struct \fBnk_context\fP *, const char *, int, \fBnk_flags\fP align)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_menu_item_label\fP (struct \fBnk_context\fP *, const char *, \fBnk_flags\fP alignment)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_menu_item_image_label\fP (struct \fBnk_context\fP *, struct \fBnk_image\fP, const char *, \fBnk_flags\fP alignment)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_menu_item_image_text\fP (struct \fBnk_context\fP *, struct \fBnk_image\fP, const char *, int len, \fBnk_flags\fP alignment)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_menu_item_symbol_text\fP (struct \fBnk_context\fP *, enum \fBnk_symbol_type\fP, const char *, int, \fBnk_flags\fP alignment)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_menu_item_symbol_label\fP (struct \fBnk_context\fP *, enum \fBnk_symbol_type\fP, const char *, \fBnk_flags\fP alignment)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_menu_close\fP (struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_menu_end\fP (struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_style_default\fP (struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_style_from_table\fP (struct \fBnk_context\fP *, const struct \fBnk_color\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_style_load_cursor\fP (struct \fBnk_context\fP *, enum \fBnk_style_cursor\fP, const struct \fBnk_cursor\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_style_load_all_cursors\fP (struct \fBnk_context\fP *, struct \fBnk_cursor\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP const char * \fBnk_style_get_color_by_name\fP (enum \fBnk_style_colors\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_style_set_font\fP (struct \fBnk_context\fP *, const struct \fBnk_user_font\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_style_set_cursor\fP (struct \fBnk_context\fP *, enum \fBnk_style_cursor\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_style_show_cursor\fP (struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_style_hide_cursor\fP (struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_style_push_font\fP (struct \fBnk_context\fP *, const struct \fBnk_user_font\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_style_push_float\fP (struct \fBnk_context\fP *, float *, float)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_style_push_vec2\fP (struct \fBnk_context\fP *, struct \fBnk_vec2\fP *, struct \fBnk_vec2\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_style_push_style_item\fP (struct \fBnk_context\fP *, struct \fBnk_style_item\fP *, struct \fBnk_style_item\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_style_push_flags\fP (struct \fBnk_context\fP *, \fBnk_flags\fP *, \fBnk_flags\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_style_push_color\fP (struct \fBnk_context\fP *, struct \fBnk_color\fP *, struct \fBnk_color\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_style_pop_font\fP (struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_style_pop_float\fP (struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_style_pop_vec2\fP (struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_style_pop_style_item\fP (struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_style_pop_flags\fP (struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_style_pop_color\fP (struct \fBnk_context\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_color\fP \fBnk_rgb\fP (int r, int g, int b)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_color\fP \fBnk_rgb_iv\fP (const int *rgb)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_color\fP \fBnk_rgb_bv\fP (const \fBnk_byte\fP *rgb)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_color\fP \fBnk_rgb_f\fP (float r, float g, float b)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_color\fP \fBnk_rgb_fv\fP (const float *rgb)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_color\fP \fBnk_rgb_cf\fP (struct \fBnk_colorf\fP c)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_color\fP \fBnk_rgb_hex\fP (const char *rgb)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_color\fP \fBnk_rgba\fP (int r, int g, int b, int a)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_color\fP \fBnk_rgba_u32\fP (\fBnk_uint\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_color\fP \fBnk_rgba_iv\fP (const int *rgba)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_color\fP \fBnk_rgba_bv\fP (const \fBnk_byte\fP *rgba)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_color\fP \fBnk_rgba_f\fP (float r, float g, float b, float a)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_color\fP \fBnk_rgba_fv\fP (const float *rgba)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_color\fP \fBnk_rgba_cf\fP (struct \fBnk_colorf\fP c)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_color\fP \fBnk_rgba_hex\fP (const char *rgb)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_colorf\fP \fBnk_hsva_colorf\fP (float h, float s, float v, float a)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_colorf\fP \fBnk_hsva_colorfv\fP (float *c)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_colorf_hsva_f\fP (float *out_h, float *out_s, float *out_v, float *out_a, struct \fBnk_colorf\fP in)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_colorf_hsva_fv\fP (float *hsva, struct \fBnk_colorf\fP in)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_color\fP \fBnk_hsv\fP (int h, int s, int v)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_color\fP \fBnk_hsv_iv\fP (const int *hsv)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_color\fP \fBnk_hsv_bv\fP (const \fBnk_byte\fP *hsv)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_color\fP \fBnk_hsv_f\fP (float h, float s, float v)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_color\fP \fBnk_hsv_fv\fP (const float *hsv)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_color\fP \fBnk_hsva\fP (int h, int s, int v, int a)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_color\fP \fBnk_hsva_iv\fP (const int *hsva)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_color\fP \fBnk_hsva_bv\fP (const \fBnk_byte\fP *hsva)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_color\fP \fBnk_hsva_f\fP (float h, float s, float v, float a)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_color\fP \fBnk_hsva_fv\fP (const float *hsva)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_color_f\fP (float *r, float *g, float *b, float *a, struct \fBnk_color\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_color_fv\fP (float *rgba_out, struct \fBnk_color\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_colorf\fP \fBnk_color_cf\fP (struct \fBnk_color\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_color_d\fP (double *r, double *g, double *b, double *a, struct \fBnk_color\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_color_dv\fP (double *rgba_out, struct \fBnk_color\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_uint\fP \fBnk_color_u32\fP (struct \fBnk_color\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_color_hex_rgba\fP (char *output, struct \fBnk_color\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_color_hex_rgb\fP (char *output, struct \fBnk_color\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_color_hsv_i\fP (int *out_h, int *out_s, int *out_v, struct \fBnk_color\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_color_hsv_b\fP (\fBnk_byte\fP *out_h, \fBnk_byte\fP *out_s, \fBnk_byte\fP *out_v, struct \fBnk_color\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_color_hsv_iv\fP (int *hsv_out, struct \fBnk_color\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_color_hsv_bv\fP (\fBnk_byte\fP *hsv_out, struct \fBnk_color\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_color_hsv_f\fP (float *out_h, float *out_s, float *out_v, struct \fBnk_color\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_color_hsv_fv\fP (float *hsv_out, struct \fBnk_color\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_color_hsva_i\fP (int *h, int *s, int *v, int *a, struct \fBnk_color\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_color_hsva_b\fP (\fBnk_byte\fP *h, \fBnk_byte\fP *s, \fBnk_byte\fP *v, \fBnk_byte\fP *a, struct \fBnk_color\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_color_hsva_iv\fP (int *hsva_out, struct \fBnk_color\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_color_hsva_bv\fP (\fBnk_byte\fP *hsva_out, struct \fBnk_color\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_color_hsva_f\fP (float *out_h, float *out_s, float *out_v, float *out_a, struct \fBnk_color\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_color_hsva_fv\fP (float *hsva_out, struct \fBnk_color\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_handle\fP \fBnk_handle_ptr\fP (void *)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_handle\fP \fBnk_handle_id\fP (int)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_image\fP \fBnk_image_handle\fP (\fBnk_handle\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_image\fP \fBnk_image_ptr\fP (void *)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_image\fP \fBnk_image_id\fP (int)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_image_is_subimage\fP (const struct \fBnk_image\fP *img)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_image\fP \fBnk_subimage_ptr\fP (void *, \fBnk_ushort\fP w, \fBnk_ushort\fP h, struct \fBnk_rect\fP sub_region)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_image\fP \fBnk_subimage_id\fP (int, \fBnk_ushort\fP w, \fBnk_ushort\fP h, struct \fBnk_rect\fP sub_region)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_image\fP \fBnk_subimage_handle\fP (\fBnk_handle\fP, \fBnk_ushort\fP w, \fBnk_ushort\fP h, struct \fBnk_rect\fP sub_region)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_nine_slice\fP \fBnk_nine_slice_handle\fP (\fBnk_handle\fP, \fBnk_ushort\fP l, \fBnk_ushort\fP t, \fBnk_ushort\fP r, \fBnk_ushort\fP b)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_nine_slice\fP \fBnk_nine_slice_ptr\fP (void *, \fBnk_ushort\fP l, \fBnk_ushort\fP t, \fBnk_ushort\fP r, \fBnk_ushort\fP b)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_nine_slice\fP \fBnk_nine_slice_id\fP (int, \fBnk_ushort\fP l, \fBnk_ushort\fP t, \fBnk_ushort\fP r, \fBnk_ushort\fP b)"
.br
.ti -1c
.RI "\fBNK_API\fP int \fBnk_nine_slice_is_sub9slice\fP (const struct \fBnk_nine_slice\fP *img)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_nine_slice\fP \fBnk_sub9slice_ptr\fP (void *, \fBnk_ushort\fP w, \fBnk_ushort\fP h, struct \fBnk_rect\fP sub_region, \fBnk_ushort\fP l, \fBnk_ushort\fP t, \fBnk_ushort\fP r, \fBnk_ushort\fP b)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_nine_slice\fP \fBnk_sub9slice_id\fP (int, \fBnk_ushort\fP w, \fBnk_ushort\fP h, struct \fBnk_rect\fP sub_region, \fBnk_ushort\fP l, \fBnk_ushort\fP t, \fBnk_ushort\fP r, \fBnk_ushort\fP b)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_nine_slice\fP \fBnk_sub9slice_handle\fP (\fBnk_handle\fP, \fBnk_ushort\fP w, \fBnk_ushort\fP h, struct \fBnk_rect\fP sub_region, \fBnk_ushort\fP l, \fBnk_ushort\fP t, \fBnk_ushort\fP r, \fBnk_ushort\fP b)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_hash\fP \fBnk_murmur_hash\fP (const void *key, int len, \fBnk_hash\fP seed)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_triangle_from_direction\fP (struct \fBnk_vec2\fP *result, struct \fBnk_rect\fP r, float pad_x, float pad_y, enum \fBnk_heading\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_vec2\fP \fBnk_vec2\fP (float x, float y)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_vec2\fP \fBnk_vec2i\fP (int x, int y)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_vec2\fP \fBnk_vec2v\fP (const float *xy)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_vec2\fP \fBnk_vec2iv\fP (const int *xy)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_rect\fP \fBnk_get_null_rect\fP (void)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_rect\fP \fBnk_rect\fP (float x, float y, float w, float h)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_rect\fP \fBnk_recti\fP (int x, int y, int w, int h)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_rect\fP \fBnk_recta\fP (struct \fBnk_vec2\fP pos, struct \fBnk_vec2\fP size)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_rect\fP \fBnk_rectv\fP (const float *xywh)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_rect\fP \fBnk_rectiv\fP (const int *xywh)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_vec2\fP \fBnk_rect_pos\fP (struct \fBnk_rect\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_vec2\fP \fBnk_rect_size\fP (struct \fBnk_rect\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP int \fBnk_strlen\fP (const char *str)"
.br
.ti -1c
.RI "\fBNK_API\fP int \fBnk_stricmp\fP (const char *s1, const char *s2)"
.br
.ti -1c
.RI "\fBNK_API\fP int \fBnk_stricmpn\fP (const char *s1, const char *s2, int n)"
.br
.ti -1c
.RI "\fBNK_API\fP int \fBnk_strtoi\fP (const char *str, const char **endptr)"
.br
.ti -1c
.RI "\fBNK_API\fP float \fBnk_strtof\fP (const char *str, const char **endptr)"
.br
.ti -1c
.RI "\fBNK_API\fP double \fBnk_strtod\fP (const char *str, const char **endptr)"
.br
.ti -1c
.RI "\fBNK_API\fP int \fBnk_strfilter\fP (const char *text, const char *regexp)"
.br
.ti -1c
.RI "\fBNK_API\fP int \fBnk_strmatch_fuzzy_string\fP (char const *str, char const *pattern, int *out_score)"
.br
.ti -1c
.RI "\fBNK_API\fP int \fBnk_strmatch_fuzzy_text\fP (const char *txt, int txt_len, const char *pattern, int *out_score)"
.br
.ti -1c
.RI "\fBNK_API\fP int \fBnk_utf_decode\fP (const char *, \fBnk_rune\fP *, int)"
.br
.ti -1c
.RI "\fBNK_API\fP int \fBnk_utf_encode\fP (\fBnk_rune\fP, char *, int)"
.br
.ti -1c
.RI "\fBNK_API\fP int \fBnk_utf_len\fP (const char *, int byte_len)"
.br
.ti -1c
.RI "\fBNK_API\fP const char * \fBnk_utf_at\fP (const char *buffer, int length, int index, \fBnk_rune\fP *unicode, int *len)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_buffer_init\fP (struct \fBnk_buffer\fP *, const struct \fBnk_allocator\fP *, \fBnk_size\fP size)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_buffer_init_fixed\fP (struct \fBnk_buffer\fP *, void *memory, \fBnk_size\fP size)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_buffer_info\fP (struct \fBnk_memory_status\fP *, struct \fBnk_buffer\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_buffer_push\fP (struct \fBnk_buffer\fP *, enum \fBnk_buffer_allocation_type\fP type, const void *memory, \fBnk_size\fP size, \fBnk_size\fP align)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_buffer_mark\fP (struct \fBnk_buffer\fP *, enum \fBnk_buffer_allocation_type\fP type)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_buffer_reset\fP (struct \fBnk_buffer\fP *, enum \fBnk_buffer_allocation_type\fP type)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_buffer_clear\fP (struct \fBnk_buffer\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_buffer_free\fP (struct \fBnk_buffer\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP void * \fBnk_buffer_memory\fP (struct \fBnk_buffer\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP const void * \fBnk_buffer_memory_const\fP (const struct \fBnk_buffer\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_size\fP \fBnk_buffer_total\fP (struct \fBnk_buffer\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_str_init\fP (struct \fBnk_str\fP *, const struct \fBnk_allocator\fP *, \fBnk_size\fP size)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_str_init_fixed\fP (struct \fBnk_str\fP *, void *memory, \fBnk_size\fP size)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_str_clear\fP (struct \fBnk_str\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_str_free\fP (struct \fBnk_str\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP int \fBnk_str_append_text_char\fP (struct \fBnk_str\fP *, const char *, int)"
.br
.ti -1c
.RI "\fBNK_API\fP int \fBnk_str_append_str_char\fP (struct \fBnk_str\fP *, const char *)"
.br
.ti -1c
.RI "\fBNK_API\fP int \fBnk_str_append_text_utf8\fP (struct \fBnk_str\fP *, const char *, int)"
.br
.ti -1c
.RI "\fBNK_API\fP int \fBnk_str_append_str_utf8\fP (struct \fBnk_str\fP *, const char *)"
.br
.ti -1c
.RI "\fBNK_API\fP int \fBnk_str_append_text_runes\fP (struct \fBnk_str\fP *, const \fBnk_rune\fP *, int)"
.br
.ti -1c
.RI "\fBNK_API\fP int \fBnk_str_append_str_runes\fP (struct \fBnk_str\fP *, const \fBnk_rune\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP int \fBnk_str_insert_at_char\fP (struct \fBnk_str\fP *, int pos, const char *, int)"
.br
.ti -1c
.RI "\fBNK_API\fP int \fBnk_str_insert_at_rune\fP (struct \fBnk_str\fP *, int pos, const char *, int)"
.br
.ti -1c
.RI "\fBNK_API\fP int \fBnk_str_insert_text_char\fP (struct \fBnk_str\fP *, int pos, const char *, int)"
.br
.ti -1c
.RI "\fBNK_API\fP int \fBnk_str_insert_str_char\fP (struct \fBnk_str\fP *, int pos, const char *)"
.br
.ti -1c
.RI "\fBNK_API\fP int \fBnk_str_insert_text_utf8\fP (struct \fBnk_str\fP *, int pos, const char *, int)"
.br
.ti -1c
.RI "\fBNK_API\fP int \fBnk_str_insert_str_utf8\fP (struct \fBnk_str\fP *, int pos, const char *)"
.br
.ti -1c
.RI "\fBNK_API\fP int \fBnk_str_insert_text_runes\fP (struct \fBnk_str\fP *, int pos, const \fBnk_rune\fP *, int)"
.br
.ti -1c
.RI "\fBNK_API\fP int \fBnk_str_insert_str_runes\fP (struct \fBnk_str\fP *, int pos, const \fBnk_rune\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_str_remove_chars\fP (struct \fBnk_str\fP *, int len)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_str_remove_runes\fP (struct \fBnk_str\fP *str, int len)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_str_delete_chars\fP (struct \fBnk_str\fP *, int pos, int len)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_str_delete_runes\fP (struct \fBnk_str\fP *, int pos, int len)"
.br
.ti -1c
.RI "\fBNK_API\fP char * \fBnk_str_at_char\fP (struct \fBnk_str\fP *, int pos)"
.br
.ti -1c
.RI "\fBNK_API\fP char * \fBnk_str_at_rune\fP (struct \fBnk_str\fP *, int pos, \fBnk_rune\fP *unicode, int *len)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_rune\fP \fBnk_str_rune_at\fP (const struct \fBnk_str\fP *, int pos)"
.br
.ti -1c
.RI "\fBNK_API\fP const char * \fBnk_str_at_char_const\fP (const struct \fBnk_str\fP *, int pos)"
.br
.ti -1c
.RI "\fBNK_API\fP const char * \fBnk_str_at_const\fP (const struct \fBnk_str\fP *, int pos, \fBnk_rune\fP *unicode, int *len)"
.br
.ti -1c
.RI "\fBNK_API\fP char * \fBnk_str_get\fP (struct \fBnk_str\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP const char * \fBnk_str_get_const\fP (const struct \fBnk_str\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP int \fBnk_str_len\fP (struct \fBnk_str\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP int \fBnk_str_len_char\fP (struct \fBnk_str\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_filter_default\fP (const struct \fBnk_text_edit\fP *, \fBnk_rune\fP unicode)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_filter_ascii\fP (const struct \fBnk_text_edit\fP *, \fBnk_rune\fP unicode)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_filter_float\fP (const struct \fBnk_text_edit\fP *, \fBnk_rune\fP unicode)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_filter_decimal\fP (const struct \fBnk_text_edit\fP *, \fBnk_rune\fP unicode)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_filter_hex\fP (const struct \fBnk_text_edit\fP *, \fBnk_rune\fP unicode)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_filter_oct\fP (const struct \fBnk_text_edit\fP *, \fBnk_rune\fP unicode)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_filter_binary\fP (const struct \fBnk_text_edit\fP *, \fBnk_rune\fP unicode)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_textedit_init\fP (struct \fBnk_text_edit\fP *, struct \fBnk_allocator\fP *, \fBnk_size\fP size)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_textedit_init_fixed\fP (struct \fBnk_text_edit\fP *, void *memory, \fBnk_size\fP size)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_textedit_free\fP (struct \fBnk_text_edit\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_textedit_text\fP (struct \fBnk_text_edit\fP *, const char *, int total_len)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_textedit_delete\fP (struct \fBnk_text_edit\fP *, int where, int len)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_textedit_delete_selection\fP (struct \fBnk_text_edit\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_textedit_select_all\fP (struct \fBnk_text_edit\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_textedit_cut\fP (struct \fBnk_text_edit\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_textedit_paste\fP (struct \fBnk_text_edit\fP *, char const *, int len)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_textedit_undo\fP (struct \fBnk_text_edit\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_textedit_redo\fP (struct \fBnk_text_edit\fP *)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_stroke_line\fP (struct \fBnk_command_buffer\fP *b, float x0, float y0, float x1, float y1, float line_thickness, struct \fBnk_color\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_stroke_curve\fP (struct \fBnk_command_buffer\fP *, float, float, float, float, float, float, float, float, float line_thickness, struct \fBnk_color\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_stroke_rect\fP (struct \fBnk_command_buffer\fP *, struct \fBnk_rect\fP, float rounding, float line_thickness, struct \fBnk_color\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_stroke_circle\fP (struct \fBnk_command_buffer\fP *, struct \fBnk_rect\fP, float line_thickness, struct \fBnk_color\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_stroke_arc\fP (struct \fBnk_command_buffer\fP *, float cx, float cy, float radius, float a_min, float a_max, float line_thickness, struct \fBnk_color\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_stroke_triangle\fP (struct \fBnk_command_buffer\fP *, float, float, float, float, float, float, float line_thichness, struct \fBnk_color\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_stroke_polyline\fP (struct \fBnk_command_buffer\fP *, float *points, int point_count, float line_thickness, struct \fBnk_color\fP col)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_stroke_polygon\fP (struct \fBnk_command_buffer\fP *, float *, int point_count, float line_thickness, struct \fBnk_color\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_fill_rect\fP (struct \fBnk_command_buffer\fP *, struct \fBnk_rect\fP, float rounding, struct \fBnk_color\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_fill_rect_multi_color\fP (struct \fBnk_command_buffer\fP *, struct \fBnk_rect\fP, struct \fBnk_color\fP left, struct \fBnk_color\fP top, struct \fBnk_color\fP right, struct \fBnk_color\fP bottom)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_fill_circle\fP (struct \fBnk_command_buffer\fP *, struct \fBnk_rect\fP, struct \fBnk_color\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_fill_arc\fP (struct \fBnk_command_buffer\fP *, float cx, float cy, float radius, float a_min, float a_max, struct \fBnk_color\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_fill_triangle\fP (struct \fBnk_command_buffer\fP *, float x0, float y0, float x1, float y1, float x2, float y2, struct \fBnk_color\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_fill_polygon\fP (struct \fBnk_command_buffer\fP *, float *, int point_count, struct \fBnk_color\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_draw_image\fP (struct \fBnk_command_buffer\fP *, struct \fBnk_rect\fP, const struct \fBnk_image\fP *, struct \fBnk_color\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_draw_nine_slice\fP (struct \fBnk_command_buffer\fP *, struct \fBnk_rect\fP, const struct \fBnk_nine_slice\fP *, struct \fBnk_color\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_draw_text\fP (struct \fBnk_command_buffer\fP *, struct \fBnk_rect\fP, const char *text, int len, const struct \fBnk_user_font\fP *, struct \fBnk_color\fP, struct \fBnk_color\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_push_scissor\fP (struct \fBnk_command_buffer\fP *, struct \fBnk_rect\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP void \fBnk_push_custom\fP (struct \fBnk_command_buffer\fP *, struct \fBnk_rect\fP, \fBnk_command_custom_callback\fP, \fBnk_handle\fP usr)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_input_has_mouse_click\fP (const struct \fBnk_input\fP *, enum \fBnk_buttons\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_input_has_mouse_click_in_rect\fP (const struct \fBnk_input\fP *, enum \fBnk_buttons\fP, struct \fBnk_rect\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_input_has_mouse_click_in_button_rect\fP (const struct \fBnk_input\fP *, enum \fBnk_buttons\fP, struct \fBnk_rect\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_input_has_mouse_click_down_in_rect\fP (const struct \fBnk_input\fP *, enum \fBnk_buttons\fP, struct \fBnk_rect\fP, \fBnk_bool\fP down)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_input_is_mouse_click_in_rect\fP (const struct \fBnk_input\fP *, enum \fBnk_buttons\fP, struct \fBnk_rect\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_input_is_mouse_click_down_in_rect\fP (const struct \fBnk_input\fP *i, enum \fBnk_buttons\fP id, struct \fBnk_rect\fP b, \fBnk_bool\fP down)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_input_any_mouse_click_in_rect\fP (const struct \fBnk_input\fP *, struct \fBnk_rect\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_input_is_mouse_prev_hovering_rect\fP (const struct \fBnk_input\fP *, struct \fBnk_rect\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_input_is_mouse_hovering_rect\fP (const struct \fBnk_input\fP *, struct \fBnk_rect\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_input_mouse_clicked\fP (const struct \fBnk_input\fP *, enum \fBnk_buttons\fP, struct \fBnk_rect\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_input_is_mouse_down\fP (const struct \fBnk_input\fP *, enum \fBnk_buttons\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_input_is_mouse_pressed\fP (const struct \fBnk_input\fP *, enum \fBnk_buttons\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_input_is_mouse_released\fP (const struct \fBnk_input\fP *, enum \fBnk_buttons\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_input_is_key_pressed\fP (const struct \fBnk_input\fP *, enum \fBnk_keys\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_input_is_key_released\fP (const struct \fBnk_input\fP *, enum \fBnk_keys\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP \fBnk_bool\fP \fBnk_input_is_key_down\fP (const struct \fBnk_input\fP *, enum \fBnk_keys\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_style_item\fP \fBnk_style_item_color\fP (struct \fBnk_color\fP)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_style_item\fP \fBnk_style_item_image\fP (struct \fBnk_image\fP img)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_style_item\fP \fBnk_style_item_nine_slice\fP (struct \fBnk_nine_slice\fP slice)"
.br
.ti -1c
.RI "\fBNK_API\fP struct \fBnk_style_item\fP \fBnk_style_item_hide\fP (void)"
.br
.ti -1c
.RI "\fBNK_CONFIGURATION_STACK_TYPE\fP (struct nk, style_item, style_item)"
.br
.ti -1c
.RI "\fBNK_CONFIGURATION_STACK_TYPE\fP (nk, float, float)"
.br
.ti -1c
.RI "\fBNK_CONFIGURATION_STACK_TYPE\fP (struct nk, vec2, vec2)"
.br
.ti -1c
.RI "\fBNK_CONFIGURATION_STACK_TYPE\fP (nk, flags, flags)"
.br
.ti -1c
.RI "\fBNK_CONFIGURATION_STACK_TYPE\fP (struct nk, color, color)"
.br
.ti -1c
.RI "\fBNK_CONFIGURATION_STACK_TYPE\fP (const struct nk, user_font, user_font *)"
.br
.ti -1c
.RI "\fBNK_CONFIGURATION_STACK_TYPE\fP (enum nk, button_behavior, button_behavior)"
.br
.ti -1c
.RI "\fBNK_CONFIG_STACK\fP (style_item, \fBNK_STYLE_ITEM_STACK_SIZE\fP)"
.br
.ti -1c
.RI "\fBNK_CONFIG_STACK\fP (float, \fBNK_FLOAT_STACK_SIZE\fP)"
.br
.ti -1c
.RI "\fBNK_CONFIG_STACK\fP (vec2, \fBNK_VECTOR_STACK_SIZE\fP)"
.br
.ti -1c
.RI "\fBNK_CONFIG_STACK\fP (flags, \fBNK_FLAGS_STACK_SIZE\fP)"
.br
.ti -1c
.RI "\fBNK_CONFIG_STACK\fP (color, \fBNK_COLOR_STACK_SIZE\fP)"
.br
.ti -1c
.RI "\fBNK_CONFIG_STACK\fP (user_font, \fBNK_FONT_STACK_SIZE\fP)"
.br
.ti -1c
.RI "\fBNK_CONFIG_STACK\fP (button_behavior, \fBNK_BUTTON_BEHAVIOR_STACK_SIZE\fP)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define NK_ABS(a)   (((a) < 0) ? \-(a) : (a))"

.SS "#define NK_ALIGN_PTR(x, mask)       (\fBNK_UINT_TO_PTR\fP((\fBNK_PTR_TO_UINT\fP((\fBnk_byte\fP*)(x) + (mask\-1)) & ~(mask\-1))))"

.SS "#define NK_ALIGN_PTR_BACK(x, mask)       (\fBNK_UINT_TO_PTR\fP((\fBNK_PTR_TO_UINT\fP((\fBnk_byte\fP*)(x)) & ~(mask\-1))))"

.SS "#define NK_ALIGNOF(t)   \fBNK_OFFSETOF\fP(struct {char c; t _h;}, _h)"

.SS "#define NK_API   extern"

.SS "#define NK_BETWEEN(x, a, b)   ((a) <= (x) && (x) < (b))"

.SS "#define NK_BOOL   int /* could be char, use int for drop\-in replacement backwards compatibility */"

.SS "#define NK_BUTTON_BEHAVIOR_STACK_SIZE   8"

.SS "#define NK_CHART_MAX_SLOT   4"

.SS "#define NK_CLAMP(i, v, x)   (\fBNK_MAX\fP(\fBNK_MIN\fP(v,x), i))"

.SS "#define NK_COLOR_STACK_SIZE   32"

.SS "#define NK_CONFIG_STACK(type, size)"
\fBValue:\fP.PP
.nf
    struct nk_config_stack_##type {\\
        int head;\\
        struct nk_config_stack_##type##_element elements[size];\\
    }
.fi

.SS "#define NK_CONFIGURATION_STACK_TYPE(prefix, name, type)"
\fBValue:\fP.PP
.nf
    struct nk_config_stack_##name##_element {\\
        prefix##_##type *address;\\
        prefix##_##type old_value;\\
    }
.fi

.SS "#define NK_CONTAINER_OF(ptr, type, member)       (type*)((void*)((char*)(1 ? (ptr): &((type*)0)\->member) \- \fBNK_OFFSETOF\fP(type, member)))"

.SS "#define NK_CONTAINS(x, y, w, h, bx, by, bw, bh)       (\fBNK_INBOX\fP(x,y, bx, by, bw, bh) && \fBNK_INBOX\fP(x+w,y+h, bx, by, bw, bh))"

.SS "#define NK_FILE_LINE   __FILE__ ':' \fBNK_MACRO_STRINGIFY\fP(__LINE__)"

.SS "#define NK_FLAG(x)   (1 << (x))"

.SS "#define NK_FLAGS_STACK_SIZE   32"

.SS "#define nk_float   float"

.SS "#define NK_FLOAT_STACK_SIZE   32"

.SS "#define NK_FONT_STACK_SIZE   8"

.SS "#define nk_foreach(c, ctx)   for((c) = \fBnk__begin\fP(ctx); (c) != 0; (c) = \fBnk__next\fP(ctx,c))"

.SS "#define NK_GLOBAL   static"

.SS "#define NK_INBOX(px, py, x, y, w, h)       (\fBNK_BETWEEN\fP(px,x,x+w) && \fBNK_BETWEEN\fP(py,y,y+h))"

.SS "#define NK_INPUT_MAX   16"

.SS "#define NK_INT16   signed short"

.SS "#define NK_INT32   signed int"

.SS "#define NK_INT8   signed char"

.SS "#define NK_INTERN   static"

.SS "#define NK_INTERSECT(x0, y0, w0, h0, x1, y1, w1, h1)"
\fBValue:\fP.PP
.nf
    ((x1 < (x0 + w0)) && (x0 < (x1 + w1)) && \\
    (y1 < (y0 + h0)) && (y0 < (y1 + h1)))
.fi

.SS "#define NK_LEN(a)   (sizeof(a)/sizeof(a)[0])"

.SS "#define NK_LIB   extern"

.SS "#define NK_MACRO_STRINGIFY(x)   \fBNK_STRINGIFY\fP(x)"

.SS "#define NK_MAX(a, b)   ((a) < (b) ? (b) : (a))"

.SS "#define NK_MAX_FLOAT_PRECISION   2"

.SS "#define NK_MAX_LAYOUT_ROW_TEMPLATE_COLUMNS   16"

.SS "#define NK_MAX_NUMBER_BUFFER   64"

.SS "#define NK_MIN(a, b)   ((a) < (b) ? (a) : (b))"

.SS "#define NK_OFFSETOF(st, m)   ((\fBnk_ptr\fP)&(((st*)0)\->m))"

.SS "#define NK_PI   3\&.141592654f"

.SS "#define NK_POINTER_TYPE   unsigned long"

.SS "#define nk_ptr_add(t, p, i)   ((t*)((void*)((\fBnk_byte\fP*)(p) + (i))))"

.SS "#define nk_ptr_add_const(t, p, i)   ((const t*)((const void*)((const \fBnk_byte\fP*)(p) + (i))))"

.SS "#define NK_PTR_TO_UINT(x)   ((\fBnk_size\fP)(((char*)x)\-(char*)0))"

.SS "#define NK_SATURATE(x)   (\fBNK_MAX\fP(0, \fBNK_MIN\fP(1\&.0f, x)))"

.SS "#define NK_SCROLLBAR_HIDING_TIMEOUT   4\&.0f"

.SS "#define NK_SIZE_TYPE   unsigned long"

.SS "#define NK_STATIC_ASSERT(exp)   typedef char \fBNK_UNIQUE_NAME\fP(_dummy_array)[(exp)?1:\-1]"

.SS "#define NK_STORAGE   static"

.SS "#define NK_STRING_JOIN(arg1, arg2)   \fBNK_STRING_JOIN_DELAY\fP(arg1, arg2)"

.SS "#define NK_STRING_JOIN_DELAY(arg1, arg2)   \fBNK_STRING_JOIN_IMMEDIATE\fP(arg1, arg2)"

.SS "#define NK_STRING_JOIN_IMMEDIATE(arg1, arg2)   arg1 ## arg2"

.SS "#define NK_STRINGIFY(x)   #x"

.SS "#define NK_STRTOD   \fBnk_strtod\fP"

.SS "#define NK_STYLE_ITEM_STACK_SIZE   16"

.SS "#define NK_TEXTEDIT_UNDOCHARCOUNT   999"

.SS "#define NK_TEXTEDIT_UNDOSTATECOUNT   99"

.SS "#define nk_tree_element_push(ctx, type, title, state, sel)   \fBnk_tree_element_push_hashed\fP(ctx, type, title, state, sel, \fBNK_FILE_LINE\fP,\fBnk_strlen\fP(\fBNK_FILE_LINE\fP),__LINE__)"

.SS "#define nk_tree_element_push_id(ctx, type, title, state, sel, id)   \fBnk_tree_element_push_hashed\fP(ctx, type, title, state, sel, \fBNK_FILE_LINE\fP,\fBnk_strlen\fP(\fBNK_FILE_LINE\fP),id)"

.SS "#define nk_tree_image_push(ctx, type, img, title, state)   \fBnk_tree_image_push_hashed\fP(ctx, type, img, title, state, \fBNK_FILE_LINE\fP,\fBnk_strlen\fP(\fBNK_FILE_LINE\fP),__LINE__)"

.SS "#define nk_tree_image_push_id(ctx, type, img, title, state, id)   \fBnk_tree_image_push_hashed\fP(ctx, type, img, title, state, \fBNK_FILE_LINE\fP,\fBnk_strlen\fP(\fBNK_FILE_LINE\fP),id)"

.SS "#define nk_tree_push(ctx, type, title, state)   \fBnk_tree_push_hashed\fP(ctx, type, title, state, \fBNK_FILE_LINE\fP,\fBnk_strlen\fP(\fBNK_FILE_LINE\fP),__LINE__)"

.SS "#define nk_tree_push_id(ctx, type, title, state, id)   \fBnk_tree_push_hashed\fP(ctx, type, title, state, \fBNK_FILE_LINE\fP,\fBnk_strlen\fP(\fBNK_FILE_LINE\fP),id)"

.SS "#define NK_UINT16   unsigned short"

.SS "#define NK_UINT32   unsigned int"

.SS "#define NK_UINT8   unsigned char"

.SS "#define NK_UINT_TO_PTR(x)   ((void*)&((char*)0)[x])"

.SS "#define NK_UNDEFINED   (\-1\&.0f)"

.SS "#define NK_UNIQUE_NAME(name)   \fBNK_STRING_JOIN\fP(name,__LINE__)"

.SS "#define NK_UNUSED(x)   ((void)(x))"

.SS "#define NK_UTF_INVALID   0xFFFD /* internal invalid utf8 rune */"

.SS "#define NK_UTF_INVALID   0xFFFD"

.SS "#define NK_UTF_SIZE   4 /* describes the number of bytes a glyph consists of*/"

.SS "#define NK_VALUE_PAGE_CAPACITY       (((\fBNK_MAX\fP(sizeof(struct \fBnk_window\fP),sizeof(struct \fBnk_panel\fP)) / sizeof(\fBnk_uint\fP))) / 2)"

.SS "#define nk_vec2_add(a, b)   \fBnk_vec2\fP((a)\&.x + (b)\&.x, (a)\&.y + (b)\&.y)"

.SS "#define nk_vec2_len_sqr(a)   ((a)\&.x*(a)\&.x+(a)\&.y*(a)\&.y)"

.SS "#define nk_vec2_muls(a, t)   \fBnk_vec2\fP((a)\&.x * (t), (a)\&.y * (t))"

.SS "#define nk_vec2_sub(a, b)   \fBnk_vec2\fP((a)\&.x \- (b)\&.x, (a)\&.y \- (b)\&.y)"

.SS "#define NK_VECTOR_STACK_SIZE   16"

.SS "#define NK_WINDOW_MAX_NAME   64"

.SS "#define nk_zero_struct(s)   nk_zero(&s, sizeof(s))"

.SH "Typedef Documentation"
.PP 
.SS "typedef \fBNK_BOOL\fP \fBnk_bool\fP"

.SS "typedef \fBNK_UINT8\fP \fBnk_byte\fP"

.SS "typedef \fBNK_INT8\fP \fBnk_char\fP"

.SS "typedef void(* nk_command_custom_callback) (void *canvas, short x, short y, unsigned short w, unsigned short h, \fBnk_handle\fP callback_data)"

.SS "typedef \fBnk_uint\fP \fBnk_flags\fP"

.SS "typedef char nk_glyph[\fBNK_UTF_SIZE\fP]"

.SS "typedef \fBnk_uint\fP \fBnk_hash\fP"

.SS "typedef \fBNK_INT32\fP \fBnk_int\fP"

.SS "typedef void *(* nk_plugin_alloc) (\fBnk_handle\fP, void *old, \fBnk_size\fP)"

.SS "typedef void(* nk_plugin_copy) (\fBnk_handle\fP, const char *, int len)"

.SS "typedef \fBnk_bool\fP(* nk_plugin_filter) (const struct \fBnk_text_edit\fP *, \fBnk_rune\fP unicode)"

.SS "typedef void(* nk_plugin_free) (\fBnk_handle\fP, void *old)"

.SS "typedef void(* nk_plugin_paste) (\fBnk_handle\fP, struct \fBnk_text_edit\fP *)"

.SS "typedef \fBNK_POINTER_TYPE\fP \fBnk_ptr\fP"

.SS "typedef void(* nk_query_font_glyph_f) (\fBnk_handle\fP handle, float font_height, struct nk_user_font_glyph *glyph, \fBnk_rune\fP codepoint, \fBnk_rune\fP next_codepoint)"

.SS "typedef \fBnk_uint\fP \fBnk_rune\fP"

.SS "typedef \fBNK_INT16\fP \fBnk_short\fP"

.SS "typedef \fBNK_SIZE_TYPE\fP \fBnk_size\fP"

.SS "typedef float(* nk_text_width_f) (\fBnk_handle\fP, float h, const char *, int len)"

.SS "typedef \fBNK_UINT8\fP \fBnk_uchar\fP"

.SS "typedef \fBNK_UINT32\fP \fBnk_uint\fP"

.SS "typedef \fBNK_UINT16\fP \fBnk_ushort\fP"

.SH "Enumeration Type Documentation"
.PP 
.SS "anonymous enum"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fInk_false \fP\fP
.TP
\fB\fInk_true \fP\fP
.SS "enum \fBnk_allocation_type\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINK_BUFFER_FIXED \fP\fP
.TP
\fB\fINK_BUFFER_DYNAMIC \fP\fP
.SS "enum \fBnk_anti_aliasing\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINK_ANTI_ALIASING_OFF \fP\fP
.TP
\fB\fINK_ANTI_ALIASING_ON \fP\fP
.SS "enum \fBnk_buffer_allocation_type\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINK_BUFFER_FRONT \fP\fP
.TP
\fB\fINK_BUFFER_BACK \fP\fP
.TP
\fB\fINK_BUFFER_MAX \fP\fP
.SS "enum \fBnk_button_behavior\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINK_BUTTON_DEFAULT \fP\fP
.TP
\fB\fINK_BUTTON_REPEATER \fP\fP
.SS "enum \fBnk_buttons\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINK_BUTTON_LEFT \fP\fP
.TP
\fB\fINK_BUTTON_MIDDLE \fP\fP
.TP
\fB\fINK_BUTTON_RIGHT \fP\fP
.TP
\fB\fINK_BUTTON_DOUBLE \fP\fP
.TP
\fB\fINK_BUTTON_MAX \fP\fP
.SS "enum \fBnk_chart_event\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINK_CHART_HOVERING \fP\fP
.TP
\fB\fINK_CHART_CLICKED \fP\fP
.SS "enum \fBnk_chart_type\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINK_CHART_LINES \fP\fP
.TP
\fB\fINK_CHART_COLUMN \fP\fP
.TP
\fB\fINK_CHART_MAX \fP\fP
.SS "enum \fBnk_collapse_states\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINK_MINIMIZED \fP\fP
.TP
\fB\fINK_MAXIMIZED \fP\fP
.SS "enum \fBnk_color_format\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINK_RGB \fP\fP
.TP
\fB\fINK_RGBA \fP\fP
.SS "enum \fBnk_command_clipping\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINK_CLIPPING_OFF \fP\fP
.TP
\fB\fINK_CLIPPING_ON \fP\fP
.SS "enum \fBnk_command_type\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINK_COMMAND_NOP \fP\fP
.TP
\fB\fINK_COMMAND_SCISSOR \fP\fP
.TP
\fB\fINK_COMMAND_LINE \fP\fP
.TP
\fB\fINK_COMMAND_CURVE \fP\fP
.TP
\fB\fINK_COMMAND_RECT \fP\fP
.TP
\fB\fINK_COMMAND_RECT_FILLED \fP\fP
.TP
\fB\fINK_COMMAND_RECT_MULTI_COLOR \fP\fP
.TP
\fB\fINK_COMMAND_CIRCLE \fP\fP
.TP
\fB\fINK_COMMAND_CIRCLE_FILLED \fP\fP
.TP
\fB\fINK_COMMAND_ARC \fP\fP
.TP
\fB\fINK_COMMAND_ARC_FILLED \fP\fP
.TP
\fB\fINK_COMMAND_TRIANGLE \fP\fP
.TP
\fB\fINK_COMMAND_TRIANGLE_FILLED \fP\fP
.TP
\fB\fINK_COMMAND_POLYGON \fP\fP
.TP
\fB\fINK_COMMAND_POLYGON_FILLED \fP\fP
.TP
\fB\fINK_COMMAND_POLYLINE \fP\fP
.TP
\fB\fINK_COMMAND_TEXT \fP\fP
.TP
\fB\fINK_COMMAND_IMAGE \fP\fP
.TP
\fB\fINK_COMMAND_CUSTOM \fP\fP
.SS "enum \fBnk_convert_result\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINK_CONVERT_SUCCESS \fP\fP
.TP
\fB\fINK_CONVERT_INVALID_PARAM \fP\fP
.TP
\fB\fINK_CONVERT_COMMAND_BUFFER_FULL \fP\fP
.TP
\fB\fINK_CONVERT_VERTEX_BUFFER_FULL \fP\fP
.TP
\fB\fINK_CONVERT_ELEMENT_BUFFER_FULL \fP\fP
.SS "enum \fBnk_edit_events\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINK_EDIT_ACTIVE \fP\fP
.TP
\fB\fINK_EDIT_INACTIVE \fP\fP
.TP
\fB\fINK_EDIT_ACTIVATED \fP\fP
.TP
\fB\fINK_EDIT_DEACTIVATED \fP\fP
.TP
\fB\fINK_EDIT_COMMITED \fP\fP
.SS "enum \fBnk_edit_flags\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINK_EDIT_DEFAULT \fP\fP
.TP
\fB\fINK_EDIT_READ_ONLY \fP\fP
.TP
\fB\fINK_EDIT_AUTO_SELECT \fP\fP
.TP
\fB\fINK_EDIT_SIG_ENTER \fP\fP
.TP
\fB\fINK_EDIT_ALLOW_TAB \fP\fP
.TP
\fB\fINK_EDIT_NO_CURSOR \fP\fP
.TP
\fB\fINK_EDIT_SELECTABLE \fP\fP
.TP
\fB\fINK_EDIT_CLIPBOARD \fP\fP
.TP
\fB\fINK_EDIT_CTRL_ENTER_NEWLINE \fP\fP
.TP
\fB\fINK_EDIT_NO_HORIZONTAL_SCROLL \fP\fP
.TP
\fB\fINK_EDIT_ALWAYS_INSERT_MODE \fP\fP
.TP
\fB\fINK_EDIT_MULTILINE \fP\fP
.TP
\fB\fINK_EDIT_GOTO_END_ON_ACTIVATE \fP\fP
.SS "enum \fBnk_edit_types\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINK_EDIT_SIMPLE \fP\fP
.TP
\fB\fINK_EDIT_FIELD \fP\fP
.TP
\fB\fINK_EDIT_BOX \fP\fP
.TP
\fB\fINK_EDIT_EDITOR \fP\fP
.SS "enum \fBnk_heading\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINK_UP \fP\fP
.TP
\fB\fINK_RIGHT \fP\fP
.TP
\fB\fINK_DOWN \fP\fP
.TP
\fB\fINK_LEFT \fP\fP
.SS "enum \fBnk_keys\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINK_KEY_NONE \fP\fP
.TP
\fB\fINK_KEY_SHIFT \fP\fP
.TP
\fB\fINK_KEY_CTRL \fP\fP
.TP
\fB\fINK_KEY_DEL \fP\fP
.TP
\fB\fINK_KEY_ENTER \fP\fP
.TP
\fB\fINK_KEY_TAB \fP\fP
.TP
\fB\fINK_KEY_BACKSPACE \fP\fP
.TP
\fB\fINK_KEY_COPY \fP\fP
.TP
\fB\fINK_KEY_CUT \fP\fP
.TP
\fB\fINK_KEY_PASTE \fP\fP
.TP
\fB\fINK_KEY_UP \fP\fP
.TP
\fB\fINK_KEY_DOWN \fP\fP
.TP
\fB\fINK_KEY_LEFT \fP\fP
.TP
\fB\fINK_KEY_RIGHT \fP\fP
.TP
\fB\fINK_KEY_TEXT_INSERT_MODE \fP\fP
.TP
\fB\fINK_KEY_TEXT_REPLACE_MODE \fP\fP
.TP
\fB\fINK_KEY_TEXT_RESET_MODE \fP\fP
.TP
\fB\fINK_KEY_TEXT_LINE_START \fP\fP
.TP
\fB\fINK_KEY_TEXT_LINE_END \fP\fP
.TP
\fB\fINK_KEY_TEXT_START \fP\fP
.TP
\fB\fINK_KEY_TEXT_END \fP\fP
.TP
\fB\fINK_KEY_TEXT_UNDO \fP\fP
.TP
\fB\fINK_KEY_TEXT_REDO \fP\fP
.TP
\fB\fINK_KEY_TEXT_SELECT_ALL \fP\fP
.TP
\fB\fINK_KEY_TEXT_WORD_LEFT \fP\fP
.TP
\fB\fINK_KEY_TEXT_WORD_RIGHT \fP\fP
.TP
\fB\fINK_KEY_SCROLL_START \fP\fP
.TP
\fB\fINK_KEY_SCROLL_END \fP\fP
.TP
\fB\fINK_KEY_SCROLL_DOWN \fP\fP
.TP
\fB\fINK_KEY_SCROLL_UP \fP\fP
.TP
\fB\fINK_KEY_MAX \fP\fP
.SS "enum \fBnk_layout_format\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINK_DYNAMIC \fP\fP
.TP
\fB\fINK_STATIC \fP\fP
.SS "enum \fBnk_modify\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINK_FIXED \fP\fP
.TP
\fB\fINK_MODIFIABLE \fP\fP
.SS "enum \fBnk_orientation\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINK_VERTICAL \fP\fP
.TP
\fB\fINK_HORIZONTAL \fP\fP
.SS "enum \fBnk_panel_flags\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINK_WINDOW_BORDER \fP\fP
.TP
\fB\fINK_WINDOW_MOVABLE \fP\fP
.TP
\fB\fINK_WINDOW_SCALABLE \fP\fP
.TP
\fB\fINK_WINDOW_CLOSABLE \fP\fP
.TP
\fB\fINK_WINDOW_MINIMIZABLE \fP\fP
.TP
\fB\fINK_WINDOW_NO_SCROLLBAR \fP\fP
.TP
\fB\fINK_WINDOW_TITLE \fP\fP
.TP
\fB\fINK_WINDOW_SCROLL_AUTO_HIDE \fP\fP
.TP
\fB\fINK_WINDOW_BACKGROUND \fP\fP
.TP
\fB\fINK_WINDOW_SCALE_LEFT \fP\fP
.TP
\fB\fINK_WINDOW_NO_INPUT \fP\fP
.SS "enum \fBnk_panel_row_layout_type\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINK_LAYOUT_DYNAMIC_FIXED \fP\fP
.TP
\fB\fINK_LAYOUT_DYNAMIC_ROW \fP\fP
.TP
\fB\fINK_LAYOUT_DYNAMIC_FREE \fP\fP
.TP
\fB\fINK_LAYOUT_DYNAMIC \fP\fP
.TP
\fB\fINK_LAYOUT_STATIC_FIXED \fP\fP
.TP
\fB\fINK_LAYOUT_STATIC_ROW \fP\fP
.TP
\fB\fINK_LAYOUT_STATIC_FREE \fP\fP
.TP
\fB\fINK_LAYOUT_STATIC \fP\fP
.TP
\fB\fINK_LAYOUT_TEMPLATE \fP\fP
.TP
\fB\fINK_LAYOUT_COUNT \fP\fP
.SS "enum \fBnk_panel_set\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINK_PANEL_SET_NONBLOCK \fP\fP
.TP
\fB\fINK_PANEL_SET_POPUP \fP\fP
.TP
\fB\fINK_PANEL_SET_SUB \fP\fP
.SS "enum \fBnk_panel_type\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINK_PANEL_NONE \fP\fP
.TP
\fB\fINK_PANEL_WINDOW \fP\fP
.TP
\fB\fINK_PANEL_GROUP \fP\fP
.TP
\fB\fINK_PANEL_POPUP \fP\fP
.TP
\fB\fINK_PANEL_CONTEXTUAL \fP\fP
.TP
\fB\fINK_PANEL_COMBO \fP\fP
.TP
\fB\fINK_PANEL_MENU \fP\fP
.TP
\fB\fINK_PANEL_TOOLTIP \fP\fP
.SS "enum \fBnk_popup_type\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINK_POPUP_STATIC \fP\fP
.TP
\fB\fINK_POPUP_DYNAMIC \fP\fP
.SS "enum \fBnk_show_states\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINK_HIDDEN \fP\fP
.TP
\fB\fINK_SHOWN \fP\fP
.SS "enum \fBnk_style_colors\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINK_COLOR_TEXT \fP\fP
.TP
\fB\fINK_COLOR_WINDOW \fP\fP
.TP
\fB\fINK_COLOR_HEADER \fP\fP
.TP
\fB\fINK_COLOR_BORDER \fP\fP
.TP
\fB\fINK_COLOR_BUTTON \fP\fP
.TP
\fB\fINK_COLOR_BUTTON_HOVER \fP\fP
.TP
\fB\fINK_COLOR_BUTTON_ACTIVE \fP\fP
.TP
\fB\fINK_COLOR_TOGGLE \fP\fP
.TP
\fB\fINK_COLOR_TOGGLE_HOVER \fP\fP
.TP
\fB\fINK_COLOR_TOGGLE_CURSOR \fP\fP
.TP
\fB\fINK_COLOR_SELECT \fP\fP
.TP
\fB\fINK_COLOR_SELECT_ACTIVE \fP\fP
.TP
\fB\fINK_COLOR_SLIDER \fP\fP
.TP
\fB\fINK_COLOR_SLIDER_CURSOR \fP\fP
.TP
\fB\fINK_COLOR_SLIDER_CURSOR_HOVER \fP\fP
.TP
\fB\fINK_COLOR_SLIDER_CURSOR_ACTIVE \fP\fP
.TP
\fB\fINK_COLOR_PROPERTY \fP\fP
.TP
\fB\fINK_COLOR_EDIT \fP\fP
.TP
\fB\fINK_COLOR_EDIT_CURSOR \fP\fP
.TP
\fB\fINK_COLOR_COMBO \fP\fP
.TP
\fB\fINK_COLOR_CHART \fP\fP
.TP
\fB\fINK_COLOR_CHART_COLOR \fP\fP
.TP
\fB\fINK_COLOR_CHART_COLOR_HIGHLIGHT \fP\fP
.TP
\fB\fINK_COLOR_SCROLLBAR \fP\fP
.TP
\fB\fINK_COLOR_SCROLLBAR_CURSOR \fP\fP
.TP
\fB\fINK_COLOR_SCROLLBAR_CURSOR_HOVER \fP\fP
.TP
\fB\fINK_COLOR_SCROLLBAR_CURSOR_ACTIVE \fP\fP
.TP
\fB\fINK_COLOR_TAB_HEADER \fP\fP
.TP
\fB\fINK_COLOR_COUNT \fP\fP
.SS "enum \fBnk_style_cursor\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINK_CURSOR_ARROW \fP\fP
.TP
\fB\fINK_CURSOR_TEXT \fP\fP
.TP
\fB\fINK_CURSOR_MOVE \fP\fP
.TP
\fB\fINK_CURSOR_RESIZE_VERTICAL \fP\fP
.TP
\fB\fINK_CURSOR_RESIZE_HORIZONTAL \fP\fP
.TP
\fB\fINK_CURSOR_RESIZE_TOP_LEFT_DOWN_RIGHT \fP\fP
.TP
\fB\fINK_CURSOR_RESIZE_TOP_RIGHT_DOWN_LEFT \fP\fP
.TP
\fB\fINK_CURSOR_COUNT \fP\fP
.SS "enum \fBnk_style_header_align\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINK_HEADER_LEFT \fP\fP
.TP
\fB\fINK_HEADER_RIGHT \fP\fP
.SS "enum \fBnk_style_item_type\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINK_STYLE_ITEM_COLOR \fP\fP
.TP
\fB\fINK_STYLE_ITEM_IMAGE \fP\fP
.TP
\fB\fINK_STYLE_ITEM_NINE_SLICE \fP\fP
.SS "enum \fBnk_symbol_type\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINK_SYMBOL_NONE \fP\fP
.TP
\fB\fINK_SYMBOL_X \fP\fP
.TP
\fB\fINK_SYMBOL_UNDERSCORE \fP\fP
.TP
\fB\fINK_SYMBOL_CIRCLE_SOLID \fP\fP
.TP
\fB\fINK_SYMBOL_CIRCLE_OUTLINE \fP\fP
.TP
\fB\fINK_SYMBOL_RECT_SOLID \fP\fP
.TP
\fB\fINK_SYMBOL_RECT_OUTLINE \fP\fP
.TP
\fB\fINK_SYMBOL_TRIANGLE_UP \fP\fP
.TP
\fB\fINK_SYMBOL_TRIANGLE_DOWN \fP\fP
.TP
\fB\fINK_SYMBOL_TRIANGLE_LEFT \fP\fP
.TP
\fB\fINK_SYMBOL_TRIANGLE_RIGHT \fP\fP
.TP
\fB\fINK_SYMBOL_PLUS \fP\fP
.TP
\fB\fINK_SYMBOL_MINUS \fP\fP
.TP
\fB\fINK_SYMBOL_MAX \fP\fP
.SS "enum \fBnk_text_align\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINK_TEXT_ALIGN_LEFT \fP\fP
.TP
\fB\fINK_TEXT_ALIGN_CENTERED \fP\fP
.TP
\fB\fINK_TEXT_ALIGN_RIGHT \fP\fP
.TP
\fB\fINK_TEXT_ALIGN_TOP \fP\fP
.TP
\fB\fINK_TEXT_ALIGN_MIDDLE \fP\fP
.TP
\fB\fINK_TEXT_ALIGN_BOTTOM \fP\fP
.SS "enum \fBnk_text_alignment\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINK_TEXT_LEFT \fP\fP
.TP
\fB\fINK_TEXT_CENTERED \fP\fP
.TP
\fB\fINK_TEXT_RIGHT \fP\fP
.SS "enum \fBnk_text_edit_mode\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINK_TEXT_EDIT_MODE_VIEW \fP\fP
.TP
\fB\fINK_TEXT_EDIT_MODE_INSERT \fP\fP
.TP
\fB\fINK_TEXT_EDIT_MODE_REPLACE \fP\fP
.SS "enum \fBnk_text_edit_type\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINK_TEXT_EDIT_SINGLE_LINE \fP\fP
.TP
\fB\fINK_TEXT_EDIT_MULTI_LINE \fP\fP
.SS "enum \fBnk_tree_type\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINK_TREE_NODE \fP\fP
.TP
\fB\fINK_TREE_TAB \fP\fP
.SS "enum \fBnk_widget_layout_states\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINK_WIDGET_INVALID \fP\fP
.TP
\fB\fINK_WIDGET_VALID \fP\fP
.TP
\fB\fINK_WIDGET_ROM \fP\fP
.SS "enum \fBnk_widget_states\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINK_WIDGET_STATE_MODIFIED \fP\fP
.TP
\fB\fINK_WIDGET_STATE_INACTIVE \fP\fP
.TP
\fB\fINK_WIDGET_STATE_ENTERED \fP\fP
.TP
\fB\fINK_WIDGET_STATE_HOVER \fP\fP
.TP
\fB\fINK_WIDGET_STATE_ACTIVED \fP\fP
.TP
\fB\fINK_WIDGET_STATE_LEFT \fP\fP
.TP
\fB\fINK_WIDGET_STATE_HOVERED \fP\fP
.TP
\fB\fINK_WIDGET_STATE_ACTIVE \fP\fP
.SS "enum \fBnk_window_flags\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINK_WINDOW_PRIVATE \fP\fP
.TP
\fB\fINK_WINDOW_DYNAMIC \fP\fP
.TP
\fB\fINK_WINDOW_ROM \fP\fP
.TP
\fB\fINK_WINDOW_NOT_INTERACTIVE \fP\fP
.TP
\fB\fINK_WINDOW_HIDDEN \fP\fP
.TP
\fB\fINK_WINDOW_CLOSED \fP\fP
.TP
\fB\fINK_WINDOW_MINIMIZED \fP\fP
.TP
\fB\fINK_WINDOW_REMOVE_ROM \fP\fP
.SH "Function Documentation"
.PP 
.SS "\fBNK_API\fP const struct \fBnk_command\fP * nk__begin (struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP const struct \fBnk_command\fP * nk__next (struct \fBnk_context\fP *, const struct \fBnk_command\fP *)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_begin (struct \fBnk_context\fP * ctx, const char * title, struct \fBnk_rect\fP bounds, \fBnk_flags\fP flags)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_begin_titled (struct \fBnk_context\fP * ctx, const char * name, const char * title, struct \fBnk_rect\fP bounds, \fBnk_flags\fP flags)"

.SS "\fBNK_API\fP void nk_buffer_clear (struct \fBnk_buffer\fP *)"

.SS "\fBNK_API\fP void nk_buffer_free (struct \fBnk_buffer\fP *)"

.SS "\fBNK_API\fP void nk_buffer_info (struct \fBnk_memory_status\fP *, struct \fBnk_buffer\fP *)"

.SS "\fBNK_API\fP void nk_buffer_init (struct \fBnk_buffer\fP *, const struct \fBnk_allocator\fP *, \fBnk_size\fP size)"

.SS "\fBNK_API\fP void nk_buffer_init_fixed (struct \fBnk_buffer\fP *, void * memory, \fBnk_size\fP size)"

.SS "\fBNK_API\fP void nk_buffer_mark (struct \fBnk_buffer\fP *, enum \fBnk_buffer_allocation_type\fP type)"

.SS "\fBNK_API\fP void * nk_buffer_memory (struct \fBnk_buffer\fP *)"

.SS "\fBNK_API\fP const void * nk_buffer_memory_const (const struct \fBnk_buffer\fP *)"

.SS "\fBNK_API\fP void nk_buffer_push (struct \fBnk_buffer\fP *, enum \fBnk_buffer_allocation_type\fP type, const void * memory, \fBnk_size\fP size, \fBnk_size\fP align)"

.SS "\fBNK_API\fP void nk_buffer_reset (struct \fBnk_buffer\fP *, enum \fBnk_buffer_allocation_type\fP type)"

.SS "\fBNK_API\fP \fBnk_size\fP nk_buffer_total (struct \fBnk_buffer\fP *)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_button_color (struct \fBnk_context\fP *, struct \fBnk_color\fP)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_button_image (struct \fBnk_context\fP *, struct \fBnk_image\fP img)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_button_image_label (struct \fBnk_context\fP *, struct \fBnk_image\fP img, const char *, \fBnk_flags\fP text_alignment)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_button_image_label_styled (struct \fBnk_context\fP *, const struct \fBnk_style_button\fP *, struct \fBnk_image\fP img, const char *, \fBnk_flags\fP text_alignment)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_button_image_styled (struct \fBnk_context\fP *, const struct \fBnk_style_button\fP *, struct \fBnk_image\fP img)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_button_image_text (struct \fBnk_context\fP *, struct \fBnk_image\fP img, const char *, int, \fBnk_flags\fP alignment)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_button_image_text_styled (struct \fBnk_context\fP *, const struct \fBnk_style_button\fP *, struct \fBnk_image\fP img, const char *, int, \fBnk_flags\fP alignment)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_button_label (struct \fBnk_context\fP *, const char * title)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_button_label_styled (struct \fBnk_context\fP *, const struct \fBnk_style_button\fP *, const char * title)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_button_pop_behavior (struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_button_push_behavior (struct \fBnk_context\fP *, enum nk_button_behavior)"

.SS "\fBNK_API\fP void nk_button_set_behavior (struct \fBnk_context\fP *, enum nk_button_behavior)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_button_symbol (struct \fBnk_context\fP *, enum nk_symbol_type)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_button_symbol_label (struct \fBnk_context\fP *, enum nk_symbol_type, const char *, \fBnk_flags\fP text_alignment)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_button_symbol_label_styled (struct \fBnk_context\fP * ctx, const struct \fBnk_style_button\fP * style, enum \fBnk_symbol_type\fP symbol, const char * title, \fBnk_flags\fP align)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_button_symbol_styled (struct \fBnk_context\fP *, const struct \fBnk_style_button\fP *, enum nk_symbol_type)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_button_symbol_text (struct \fBnk_context\fP *, enum nk_symbol_type, const char *, int, \fBnk_flags\fP alignment)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_button_symbol_text_styled (struct \fBnk_context\fP *, const struct \fBnk_style_button\fP *, enum nk_symbol_type, const char *, int, \fBnk_flags\fP alignment)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_button_text (struct \fBnk_context\fP *, const char * title, int len)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_button_text_styled (struct \fBnk_context\fP *, const struct \fBnk_style_button\fP *, const char * title, int len)"

.SS "\fBNK_API\fP void nk_chart_add_slot (struct \fBnk_context\fP * ctx, const enum nk_chart_type, int count, float min_value, float max_value)"

.SS "\fBNK_API\fP void nk_chart_add_slot_colored (struct \fBnk_context\fP * ctx, const enum nk_chart_type, struct \fBnk_color\fP, struct \fBnk_color\fP active, int count, float min_value, float max_value)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_chart_begin (struct \fBnk_context\fP *, enum nk_chart_type, int num, float min, float max)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_chart_begin_colored (struct \fBnk_context\fP *, enum nk_chart_type, struct \fBnk_color\fP, struct \fBnk_color\fP active, int num, float min, float max)"

.SS "\fBNK_API\fP void nk_chart_end (struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP \fBnk_flags\fP nk_chart_push (struct \fBnk_context\fP *, float)"

.SS "\fBNK_API\fP \fBnk_flags\fP nk_chart_push_slot (struct \fBnk_context\fP *, float, int)"

.SS "\fBNK_API\fP unsigned nk_check_flags_label (struct \fBnk_context\fP *, const char *, unsigned int flags, unsigned int value)"

.SS "\fBNK_API\fP unsigned nk_check_flags_text (struct \fBnk_context\fP *, const char *, int, unsigned int flags, unsigned int value)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_check_label (struct \fBnk_context\fP *, const char *, \fBnk_bool\fP active)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_check_text (struct \fBnk_context\fP *, const char *, int, \fBnk_bool\fP active)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_checkbox_flags_label (struct \fBnk_context\fP *, const char *, unsigned int * flags, unsigned int value)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_checkbox_flags_text (struct \fBnk_context\fP *, const char *, int, unsigned int * flags, unsigned int value)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_checkbox_label (struct \fBnk_context\fP *, const char *, \fBnk_bool\fP * active)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_checkbox_text (struct \fBnk_context\fP *, const char *, int, \fBnk_bool\fP * active)"

.SS "\fBNK_API\fP void nk_clear (struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP struct \fBnk_colorf\fP nk_color_cf (struct \fBnk_color\fP)"

.SS "\fBNK_API\fP void nk_color_d (double * r, double * g, double * b, double * a, struct \fBnk_color\fP)"

.SS "\fBNK_API\fP void nk_color_dv (double * rgba_out, struct \fBnk_color\fP)"

.SS "\fBNK_API\fP void nk_color_f (float * r, float * g, float * b, float * a, struct \fBnk_color\fP)"

.SS "\fBNK_API\fP void nk_color_fv (float * rgba_out, struct \fBnk_color\fP)"

.SS "\fBNK_API\fP void nk_color_hex_rgb (char * output, struct \fBnk_color\fP)"

.SS "\fBNK_API\fP void nk_color_hex_rgba (char * output, struct \fBnk_color\fP)"

.SS "\fBNK_API\fP void nk_color_hsv_b (\fBnk_byte\fP * out_h, \fBnk_byte\fP * out_s, \fBnk_byte\fP * out_v, struct \fBnk_color\fP)"

.SS "\fBNK_API\fP void nk_color_hsv_bv (\fBnk_byte\fP * hsv_out, struct \fBnk_color\fP)"

.SS "\fBNK_API\fP void nk_color_hsv_f (float * out_h, float * out_s, float * out_v, struct \fBnk_color\fP)"

.SS "\fBNK_API\fP void nk_color_hsv_fv (float * hsv_out, struct \fBnk_color\fP)"

.SS "\fBNK_API\fP void nk_color_hsv_i (int * out_h, int * out_s, int * out_v, struct \fBnk_color\fP)"

.SS "\fBNK_API\fP void nk_color_hsv_iv (int * hsv_out, struct \fBnk_color\fP)"

.SS "\fBNK_API\fP void nk_color_hsva_b (\fBnk_byte\fP * h, \fBnk_byte\fP * s, \fBnk_byte\fP * v, \fBnk_byte\fP * a, struct \fBnk_color\fP)"

.SS "\fBNK_API\fP void nk_color_hsva_bv (\fBnk_byte\fP * hsva_out, struct \fBnk_color\fP)"

.SS "\fBNK_API\fP void nk_color_hsva_f (float * out_h, float * out_s, float * out_v, float * out_a, struct \fBnk_color\fP)"

.SS "\fBNK_API\fP void nk_color_hsva_fv (float * hsva_out, struct \fBnk_color\fP)"

.SS "\fBNK_API\fP void nk_color_hsva_i (int * h, int * s, int * v, int * a, struct \fBnk_color\fP)"

.SS "\fBNK_API\fP void nk_color_hsva_iv (int * hsva_out, struct \fBnk_color\fP)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_color_pick (struct \fBnk_context\fP *, struct \fBnk_colorf\fP *, enum nk_color_format)"

.SS "\fBNK_API\fP struct \fBnk_colorf\fP nk_color_picker (struct \fBnk_context\fP *, struct \fBnk_colorf\fP, enum nk_color_format)"

.SS "\fBNK_API\fP \fBnk_uint\fP nk_color_u32 (struct \fBnk_color\fP)"

.SS "\fBNK_API\fP void nk_colorf_hsva_f (float * out_h, float * out_s, float * out_v, float * out_a, struct \fBnk_colorf\fP in)"

.SS "\fBNK_API\fP void nk_colorf_hsva_fv (float * hsva, struct \fBnk_colorf\fP in)"

.SS "\fBNK_API\fP int nk_combo (struct \fBnk_context\fP *, const char ** items, int count, int selected, int item_height, struct \fBnk_vec2\fP size)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_combo_begin_color (struct \fBnk_context\fP *, struct \fBnk_color\fP color, struct \fBnk_vec2\fP size)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_combo_begin_image (struct \fBnk_context\fP *, struct \fBnk_image\fP img, struct \fBnk_vec2\fP size)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_combo_begin_image_label (struct \fBnk_context\fP *, const char * selected, struct \fBnk_image\fP, struct \fBnk_vec2\fP size)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_combo_begin_image_text (struct \fBnk_context\fP *, const char * selected, int, struct \fBnk_image\fP, struct \fBnk_vec2\fP size)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_combo_begin_label (struct \fBnk_context\fP *, const char * selected, struct \fBnk_vec2\fP size)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_combo_begin_symbol (struct \fBnk_context\fP *, enum nk_symbol_type, struct \fBnk_vec2\fP size)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_combo_begin_symbol_label (struct \fBnk_context\fP *, const char * selected, enum nk_symbol_type, struct \fBnk_vec2\fP size)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_combo_begin_symbol_text (struct \fBnk_context\fP *, const char * selected, int, enum nk_symbol_type, struct \fBnk_vec2\fP size)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_combo_begin_text (struct \fBnk_context\fP *, const char * selected, int, struct \fBnk_vec2\fP size)"

.SS "\fBNK_API\fP int nk_combo_callback (struct \fBnk_context\fP *, void(*)(void *, int, const char **) item_getter, void * userdata, int selected, int count, int item_height, struct \fBnk_vec2\fP size)"

.SS "\fBNK_API\fP void nk_combo_close (struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP void nk_combo_end (struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_combo_item_image_label (struct \fBnk_context\fP *, struct \fBnk_image\fP, const char *, \fBnk_flags\fP alignment)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_combo_item_image_text (struct \fBnk_context\fP *, struct \fBnk_image\fP, const char *, int, \fBnk_flags\fP alignment)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_combo_item_label (struct \fBnk_context\fP *, const char *, \fBnk_flags\fP alignment)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_combo_item_symbol_label (struct \fBnk_context\fP *, enum nk_symbol_type, const char *, \fBnk_flags\fP alignment)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_combo_item_symbol_text (struct \fBnk_context\fP *, enum nk_symbol_type, const char *, int, \fBnk_flags\fP alignment)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_combo_item_text (struct \fBnk_context\fP *, const char *, int, \fBnk_flags\fP alignment)"

.SS "\fBNK_API\fP int nk_combo_separator (struct \fBnk_context\fP *, const char * items_separated_by_separator, int separator, int selected, int count, int item_height, struct \fBnk_vec2\fP size)"

.SS "\fBNK_API\fP int nk_combo_string (struct \fBnk_context\fP *, const char * items_separated_by_zeros, int selected, int count, int item_height, struct \fBnk_vec2\fP size)"

.SS "\fBNK_API\fP void nk_combobox (struct \fBnk_context\fP *, const char ** items, int count, int * selected, int item_height, struct \fBnk_vec2\fP size)"

.SS "\fBNK_API\fP void nk_combobox_callback (struct \fBnk_context\fP *, void(*)(void *, int, const char **) item_getter, void *, int * selected, int count, int item_height, struct \fBnk_vec2\fP size)"

.SS "\fBNK_API\fP void nk_combobox_separator (struct \fBnk_context\fP *, const char * items_separated_by_separator, int separator, int * selected, int count, int item_height, struct \fBnk_vec2\fP size)"

.SS "\fBNK_API\fP void nk_combobox_string (struct \fBnk_context\fP *, const char * items_separated_by_zeros, int * selected, int count, int item_height, struct \fBnk_vec2\fP size)"

.SS "NK_CONFIG_STACK (button_behavior, \fBNK_BUTTON_BEHAVIOR_STACK_SIZE\fP)"

.SS "NK_CONFIG_STACK (color, \fBNK_COLOR_STACK_SIZE\fP)"

.SS "NK_CONFIG_STACK (flags, \fBNK_FLAGS_STACK_SIZE\fP)"

.SS "NK_CONFIG_STACK (float, \fBNK_FLOAT_STACK_SIZE\fP)"

.SS "NK_CONFIG_STACK (style_item, \fBNK_STYLE_ITEM_STACK_SIZE\fP)"

.SS "NK_CONFIG_STACK (user_font, \fBNK_FONT_STACK_SIZE\fP)"

.SS "NK_CONFIG_STACK (vec2, \fBNK_VECTOR_STACK_SIZE\fP)"

.SS "NK_CONFIGURATION_STACK_TYPE (const struct nk, user_font, user_font *)"

.SS "NK_CONFIGURATION_STACK_TYPE (enum nk, button_behavior, button_behavior)"

.SS "NK_CONFIGURATION_STACK_TYPE (nk, flags, flags)"

.SS "NK_CONFIGURATION_STACK_TYPE (nk, float, float)"

.SS "NK_CONFIGURATION_STACK_TYPE (struct nk, color, color)"

.SS "NK_CONFIGURATION_STACK_TYPE (struct nk, style_item, style_item)"

.SS "NK_CONFIGURATION_STACK_TYPE (struct nk, vec2, vec2)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_contextual_begin (struct \fBnk_context\fP *, \fBnk_flags\fP, struct \fBnk_vec2\fP, struct \fBnk_rect\fP trigger_bounds)"

.SS "\fBNK_API\fP void nk_contextual_close (struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP void nk_contextual_end (struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_contextual_item_image_label (struct \fBnk_context\fP *, struct \fBnk_image\fP, const char *, \fBnk_flags\fP alignment)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_contextual_item_image_text (struct \fBnk_context\fP *, struct \fBnk_image\fP, const char *, int len, \fBnk_flags\fP alignment)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_contextual_item_label (struct \fBnk_context\fP *, const char *, \fBnk_flags\fP align)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_contextual_item_symbol_label (struct \fBnk_context\fP *, enum nk_symbol_type, const char *, \fBnk_flags\fP alignment)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_contextual_item_symbol_text (struct \fBnk_context\fP *, enum nk_symbol_type, const char *, int, \fBnk_flags\fP alignment)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_contextual_item_text (struct \fBnk_context\fP *, const char *, int, \fBnk_flags\fP align)"

.SS "\fBNK_API\fP void nk_draw_image (struct \fBnk_command_buffer\fP *, struct \fBnk_rect\fP, const struct \fBnk_image\fP *, struct \fBnk_color\fP)"

.SS "\fBNK_API\fP void nk_draw_nine_slice (struct \fBnk_command_buffer\fP *, struct \fBnk_rect\fP, const struct \fBnk_nine_slice\fP *, struct \fBnk_color\fP)"

.SS "\fBNK_API\fP void nk_draw_text (struct \fBnk_command_buffer\fP *, struct \fBnk_rect\fP, const char * text, int len, const struct \fBnk_user_font\fP *, struct \fBnk_color\fP, struct \fBnk_color\fP)"

.SS "\fBNK_API\fP \fBnk_flags\fP nk_edit_buffer (struct \fBnk_context\fP *, \fBnk_flags\fP, struct \fBnk_text_edit\fP *, \fBnk_plugin_filter\fP)"

.SS "\fBNK_API\fP void nk_edit_focus (struct \fBnk_context\fP *, \fBnk_flags\fP flags)"

.SS "\fBNK_API\fP \fBnk_flags\fP nk_edit_string (struct \fBnk_context\fP *, \fBnk_flags\fP, char * buffer, int * len, int max, \fBnk_plugin_filter\fP)"

.SS "\fBNK_API\fP \fBnk_flags\fP nk_edit_string_zero_terminated (struct \fBnk_context\fP *, \fBnk_flags\fP, char * buffer, int max, \fBnk_plugin_filter\fP)"

.SS "\fBNK_API\fP void nk_edit_unfocus (struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP void nk_end (struct \fBnk_context\fP * ctx)"

.SS "\fBNK_API\fP void nk_fill_arc (struct \fBnk_command_buffer\fP *, float cx, float cy, float radius, float a_min, float a_max, struct \fBnk_color\fP)"

.SS "\fBNK_API\fP void nk_fill_circle (struct \fBnk_command_buffer\fP *, struct \fBnk_rect\fP, struct \fBnk_color\fP)"

.SS "\fBNK_API\fP void nk_fill_polygon (struct \fBnk_command_buffer\fP *, float *, int point_count, struct \fBnk_color\fP)"

.SS "\fBNK_API\fP void nk_fill_rect (struct \fBnk_command_buffer\fP *, struct \fBnk_rect\fP, float rounding, struct \fBnk_color\fP)"

.SS "\fBNK_API\fP void nk_fill_rect_multi_color (struct \fBnk_command_buffer\fP *, struct \fBnk_rect\fP, struct \fBnk_color\fP left, struct \fBnk_color\fP top, struct \fBnk_color\fP right, struct \fBnk_color\fP bottom)"

.SS "\fBNK_API\fP void nk_fill_triangle (struct \fBnk_command_buffer\fP *, float x0, float y0, float x1, float y1, float x2, float y2, struct \fBnk_color\fP)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_filter_ascii (const struct \fBnk_text_edit\fP *, \fBnk_rune\fP unicode)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_filter_binary (const struct \fBnk_text_edit\fP *, \fBnk_rune\fP unicode)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_filter_decimal (const struct \fBnk_text_edit\fP *, \fBnk_rune\fP unicode)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_filter_default (const struct \fBnk_text_edit\fP *, \fBnk_rune\fP unicode)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_filter_float (const struct \fBnk_text_edit\fP *, \fBnk_rune\fP unicode)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_filter_hex (const struct \fBnk_text_edit\fP *, \fBnk_rune\fP unicode)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_filter_oct (const struct \fBnk_text_edit\fP *, \fBnk_rune\fP unicode)"

.SS "\fBNK_API\fP void nk_free (struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP struct \fBnk_rect\fP nk_get_null_rect (void)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_group_begin (struct \fBnk_context\fP *, const char * title, \fBnk_flags\fP)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_group_begin_titled (struct \fBnk_context\fP *, const char * name, const char * title, \fBnk_flags\fP)"

.SS "\fBNK_API\fP void nk_group_end (struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP void nk_group_get_scroll (struct \fBnk_context\fP *, const char * id, \fBnk_uint\fP * x_offset, \fBnk_uint\fP * y_offset)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_group_scrolled_begin (struct \fBnk_context\fP *, struct \fBnk_scroll\fP * off, const char * title, \fBnk_flags\fP)"

.SS "\fBNK_API\fP void nk_group_scrolled_end (struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_group_scrolled_offset_begin (struct \fBnk_context\fP *, \fBnk_uint\fP * x_offset, \fBnk_uint\fP * y_offset, const char * title, \fBnk_flags\fP flags)"

.SS "\fBNK_API\fP void nk_group_set_scroll (struct \fBnk_context\fP *, const char * id, \fBnk_uint\fP x_offset, \fBnk_uint\fP y_offset)"

.SS "\fBNK_API\fP \fBnk_handle\fP nk_handle_id (int)"

.SS "\fBNK_API\fP \fBnk_handle\fP nk_handle_ptr (void *)"

.SS "\fBNK_API\fP struct \fBnk_color\fP nk_hsv (int h, int s, int v)"

.SS "\fBNK_API\fP struct \fBnk_color\fP nk_hsv_bv (const \fBnk_byte\fP * hsv)"

.SS "\fBNK_API\fP struct \fBnk_color\fP nk_hsv_f (float h, float s, float v)"

.SS "\fBNK_API\fP struct \fBnk_color\fP nk_hsv_fv (const float * hsv)"

.SS "\fBNK_API\fP struct \fBnk_color\fP nk_hsv_iv (const int * hsv)"

.SS "\fBNK_API\fP struct \fBnk_color\fP nk_hsva (int h, int s, int v, int a)"

.SS "\fBNK_API\fP struct \fBnk_color\fP nk_hsva_bv (const \fBnk_byte\fP * hsva)"

.SS "\fBNK_API\fP struct \fBnk_colorf\fP nk_hsva_colorf (float h, float s, float v, float a)"

.SS "\fBNK_API\fP struct \fBnk_colorf\fP nk_hsva_colorfv (float * c)"

.SS "\fBNK_API\fP struct \fBnk_color\fP nk_hsva_f (float h, float s, float v, float a)"

.SS "\fBNK_API\fP struct \fBnk_color\fP nk_hsva_fv (const float * hsva)"

.SS "\fBNK_API\fP struct \fBnk_color\fP nk_hsva_iv (const int * hsva)"

.SS "\fBNK_API\fP void \fBnk_image\fP (struct \fBnk_context\fP *, struct \fBnk_image\fP)"

.SS "\fBNK_API\fP void nk_image_color (struct \fBnk_context\fP *, struct \fBnk_image\fP, struct \fBnk_color\fP)"

.SS "\fBNK_API\fP struct \fBnk_image\fP nk_image_handle (\fBnk_handle\fP)"

.SS "\fBNK_API\fP struct \fBnk_image\fP nk_image_id (int)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_image_is_subimage (const struct \fBnk_image\fP * img)"

.SS "\fBNK_API\fP struct \fBnk_image\fP nk_image_ptr (void *)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_init (struct \fBnk_context\fP *, struct \fBnk_allocator\fP *, const struct \fBnk_user_font\fP *)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_init_custom (struct \fBnk_context\fP *, struct \fBnk_buffer\fP * cmds, struct \fBnk_buffer\fP * pool, const struct \fBnk_user_font\fP *)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_init_fixed (struct \fBnk_context\fP *, void * memory, \fBnk_size\fP size, const struct \fBnk_user_font\fP *)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_input_any_mouse_click_in_rect (const struct \fBnk_input\fP *, struct \fBnk_rect\fP)"

.SS "\fBNK_API\fP void nk_input_begin (struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP void nk_input_button (struct \fBnk_context\fP *, enum nk_buttons, int x, int y, \fBnk_bool\fP down)"

.SS "\fBNK_API\fP void nk_input_char (struct \fBnk_context\fP *, char)"

.SS "\fBNK_API\fP void nk_input_end (struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP void nk_input_glyph (struct \fBnk_context\fP *, const nk_glyph)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_input_has_mouse_click (const struct \fBnk_input\fP *, enum nk_buttons)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_input_has_mouse_click_down_in_rect (const struct \fBnk_input\fP *, enum nk_buttons, struct \fBnk_rect\fP, \fBnk_bool\fP down)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_input_has_mouse_click_in_button_rect (const struct \fBnk_input\fP *, enum nk_buttons, struct \fBnk_rect\fP)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_input_has_mouse_click_in_rect (const struct \fBnk_input\fP *, enum nk_buttons, struct \fBnk_rect\fP)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_input_is_key_down (const struct \fBnk_input\fP *, enum nk_keys)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_input_is_key_pressed (const struct \fBnk_input\fP *, enum nk_keys)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_input_is_key_released (const struct \fBnk_input\fP *, enum nk_keys)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_input_is_mouse_click_down_in_rect (const struct \fBnk_input\fP * i, enum \fBnk_buttons\fP id, struct \fBnk_rect\fP b, \fBnk_bool\fP down)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_input_is_mouse_click_in_rect (const struct \fBnk_input\fP *, enum nk_buttons, struct \fBnk_rect\fP)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_input_is_mouse_down (const struct \fBnk_input\fP *, enum nk_buttons)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_input_is_mouse_hovering_rect (const struct \fBnk_input\fP *, struct \fBnk_rect\fP)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_input_is_mouse_pressed (const struct \fBnk_input\fP *, enum nk_buttons)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_input_is_mouse_prev_hovering_rect (const struct \fBnk_input\fP *, struct \fBnk_rect\fP)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_input_is_mouse_released (const struct \fBnk_input\fP *, enum nk_buttons)"

.SS "\fBNK_API\fP void nk_input_key (struct \fBnk_context\fP *, enum nk_keys, \fBnk_bool\fP down)"

.SS "\fBNK_API\fP void nk_input_motion (struct \fBnk_context\fP *, int x, int y)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_input_mouse_clicked (const struct \fBnk_input\fP *, enum nk_buttons, struct \fBnk_rect\fP)"

.SS "\fBNK_API\fP void nk_input_scroll (struct \fBnk_context\fP *, struct \fBnk_vec2\fP val)"

.SS "\fBNK_API\fP void nk_input_unicode (struct \fBnk_context\fP *, \fBnk_rune\fP)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_item_is_any_active (struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP void nk_label (struct \fBnk_context\fP *, const char *, \fBnk_flags\fP align)"

.SS "\fBNK_API\fP void nk_label_colored (struct \fBnk_context\fP *, const char *, \fBnk_flags\fP align, struct \fBnk_color\fP)"

.SS "\fBNK_API\fP void nk_label_colored_wrap (struct \fBnk_context\fP *, const char *, struct \fBnk_color\fP)"

.SS "\fBNK_API\fP void nk_label_wrap (struct \fBnk_context\fP *, const char *)"

.SS "\fBNK_API\fP float nk_layout_ratio_from_pixel (struct \fBnk_context\fP *, float pixel_width)"

.SS "\fBNK_API\fP void nk_layout_reset_min_row_height (struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP void nk_layout_row (struct \fBnk_context\fP *, enum nk_layout_format, float height, int cols, const float * ratio)"

.SS "\fBNK_API\fP void nk_layout_row_begin (struct \fBnk_context\fP * ctx, enum \fBnk_layout_format\fP fmt, float row_height, int cols)"

.SS "\fBNK_API\fP void nk_layout_row_dynamic (struct \fBnk_context\fP * ctx, float height, int cols)"

.SS "\fBNK_API\fP void nk_layout_row_end (struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP void nk_layout_row_push (struct \fBnk_context\fP *, float value)"

.SS "\fBNK_API\fP void nk_layout_row_static (struct \fBnk_context\fP * ctx, float height, int item_width, int cols)"

.SS "\fBNK_API\fP void nk_layout_row_template_begin (struct \fBnk_context\fP *, float row_height)"

.SS "\fBNK_API\fP void nk_layout_row_template_end (struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP void nk_layout_row_template_push_dynamic (struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP void nk_layout_row_template_push_static (struct \fBnk_context\fP *, float width)"

.SS "\fBNK_API\fP void nk_layout_row_template_push_variable (struct \fBnk_context\fP *, float min_width)"

.SS "\fBNK_API\fP void nk_layout_set_min_row_height (struct \fBnk_context\fP *, float height)"

.SS "\fBNK_API\fP void nk_layout_space_begin (struct \fBnk_context\fP *, enum nk_layout_format, float height, int widget_count)"

.SS "\fBNK_API\fP struct \fBnk_rect\fP nk_layout_space_bounds (struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP void nk_layout_space_end (struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP void nk_layout_space_push (struct \fBnk_context\fP *, struct \fBnk_rect\fP bounds)"

.SS "\fBNK_API\fP struct \fBnk_rect\fP nk_layout_space_rect_to_local (struct \fBnk_context\fP *, struct \fBnk_rect\fP)"

.SS "\fBNK_API\fP struct \fBnk_rect\fP nk_layout_space_rect_to_screen (struct \fBnk_context\fP *, struct \fBnk_rect\fP)"

.SS "\fBNK_API\fP struct \fBnk_vec2\fP nk_layout_space_to_local (struct \fBnk_context\fP *, struct \fBnk_vec2\fP)"

.SS "\fBNK_API\fP struct \fBnk_vec2\fP nk_layout_space_to_screen (struct \fBnk_context\fP *, struct \fBnk_vec2\fP)"

.SS "\fBNK_API\fP struct \fBnk_rect\fP nk_layout_widget_bounds (struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_list_view_begin (struct \fBnk_context\fP *, struct \fBnk_list_view\fP * out, const char * id, \fBnk_flags\fP, int row_height, int row_count)"

.SS "\fBNK_API\fP void nk_list_view_end (struct \fBnk_list_view\fP *)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_menu_begin_image (struct \fBnk_context\fP *, const char *, struct \fBnk_image\fP, struct \fBnk_vec2\fP size)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_menu_begin_image_label (struct \fBnk_context\fP *, const char *, \fBnk_flags\fP align, struct \fBnk_image\fP, struct \fBnk_vec2\fP size)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_menu_begin_image_text (struct \fBnk_context\fP *, const char *, int, \fBnk_flags\fP align, struct \fBnk_image\fP, struct \fBnk_vec2\fP size)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_menu_begin_label (struct \fBnk_context\fP *, const char *, \fBnk_flags\fP align, struct \fBnk_vec2\fP size)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_menu_begin_symbol (struct \fBnk_context\fP *, const char *, enum nk_symbol_type, struct \fBnk_vec2\fP size)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_menu_begin_symbol_label (struct \fBnk_context\fP *, const char *, \fBnk_flags\fP align, enum nk_symbol_type, struct \fBnk_vec2\fP size)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_menu_begin_symbol_text (struct \fBnk_context\fP *, const char *, int, \fBnk_flags\fP align, enum nk_symbol_type, struct \fBnk_vec2\fP size)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_menu_begin_text (struct \fBnk_context\fP *, const char * title, int title_len, \fBnk_flags\fP align, struct \fBnk_vec2\fP size)"

.SS "\fBNK_API\fP void nk_menu_close (struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP void nk_menu_end (struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_menu_item_image_label (struct \fBnk_context\fP *, struct \fBnk_image\fP, const char *, \fBnk_flags\fP alignment)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_menu_item_image_text (struct \fBnk_context\fP *, struct \fBnk_image\fP, const char *, int len, \fBnk_flags\fP alignment)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_menu_item_label (struct \fBnk_context\fP *, const char *, \fBnk_flags\fP alignment)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_menu_item_symbol_label (struct \fBnk_context\fP *, enum nk_symbol_type, const char *, \fBnk_flags\fP alignment)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_menu_item_symbol_text (struct \fBnk_context\fP *, enum nk_symbol_type, const char *, int, \fBnk_flags\fP alignment)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_menu_item_text (struct \fBnk_context\fP *, const char *, int, \fBnk_flags\fP align)"

.SS "\fBNK_API\fP void nk_menubar_begin (struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP void nk_menubar_end (struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP \fBnk_hash\fP nk_murmur_hash (const void * key, int len, \fBnk_hash\fP seed)"

.SS "\fBNK_API\fP struct \fBnk_nine_slice\fP nk_nine_slice_handle (\fBnk_handle\fP, \fBnk_ushort\fP l, \fBnk_ushort\fP t, \fBnk_ushort\fP r, \fBnk_ushort\fP b)"

.SS "\fBNK_API\fP struct \fBnk_nine_slice\fP nk_nine_slice_id (int, \fBnk_ushort\fP l, \fBnk_ushort\fP t, \fBnk_ushort\fP r, \fBnk_ushort\fP b)"

.SS "\fBNK_API\fP int nk_nine_slice_is_sub9slice (const struct \fBnk_nine_slice\fP * img)"

.SS "\fBNK_API\fP struct \fBnk_nine_slice\fP nk_nine_slice_ptr (void *, \fBnk_ushort\fP l, \fBnk_ushort\fP t, \fBnk_ushort\fP r, \fBnk_ushort\fP b)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_option_label (struct \fBnk_context\fP *, const char *, \fBnk_bool\fP active)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_option_text (struct \fBnk_context\fP *, const char *, int, \fBnk_bool\fP active)"

.SS "\fBNK_API\fP void nk_plot (struct \fBnk_context\fP *, enum nk_chart_type, const float * values, int count, int offset)"

.SS "\fBNK_API\fP void nk_plot_function (struct \fBnk_context\fP *, enum nk_chart_type, void * userdata, float(*)(void *user, int index) value_getter, int count, int offset)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_popup_begin (struct \fBnk_context\fP *, enum nk_popup_type, const char *, \fBnk_flags\fP, struct \fBnk_rect\fP bounds)"

.SS "\fBNK_API\fP void nk_popup_close (struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP void nk_popup_end (struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP void nk_popup_get_scroll (struct \fBnk_context\fP *, \fBnk_uint\fP * offset_x, \fBnk_uint\fP * offset_y)"

.SS "\fBNK_API\fP void nk_popup_set_scroll (struct \fBnk_context\fP *, \fBnk_uint\fP offset_x, \fBnk_uint\fP offset_y)"

.SS "\fBNK_API\fP \fBnk_size\fP nk_prog (struct \fBnk_context\fP *, \fBnk_size\fP cur, \fBnk_size\fP max, \fBnk_bool\fP modifyable)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_progress (struct \fBnk_context\fP *, \fBnk_size\fP * cur, \fBnk_size\fP max, \fBnk_bool\fP modifyable)"

.SS "\fBNK_API\fP void nk_property_double (struct \fBnk_context\fP *, const char * name, double min, double * val, double max, double step, float inc_per_pixel)"

.SS "\fBNK_API\fP void nk_property_float (struct \fBnk_context\fP *, const char * name, float min, float * val, float max, float step, float inc_per_pixel)"

.SS "\fBNK_API\fP void nk_property_int (struct \fBnk_context\fP *, const char * name, int min, int * val, int max, int step, float inc_per_pixel)"

.SS "\fBNK_API\fP double nk_propertyd (struct \fBnk_context\fP *, const char * name, double min, double val, double max, double step, float inc_per_pixel)"

.SS "\fBNK_API\fP float nk_propertyf (struct \fBnk_context\fP *, const char * name, float min, float val, float max, float step, float inc_per_pixel)"

.SS "\fBNK_API\fP int nk_propertyi (struct \fBnk_context\fP *, const char * name, int min, int val, int max, int step, float inc_per_pixel)"

.SS "\fBNK_API\fP void nk_push_custom (struct \fBnk_command_buffer\fP *, struct \fBnk_rect\fP, \fBnk_command_custom_callback\fP, \fBnk_handle\fP usr)"

.SS "\fBNK_API\fP void nk_push_scissor (struct \fBnk_command_buffer\fP *, struct \fBnk_rect\fP)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_radio_label (struct \fBnk_context\fP *, const char *, \fBnk_bool\fP * active)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_radio_text (struct \fBnk_context\fP *, const char *, int, \fBnk_bool\fP * active)"

.SS "\fBNK_API\fP struct \fBnk_rect\fP \fBnk_rect\fP (float x, float y, float w, float h)"

.SS "\fBNK_API\fP struct \fBnk_vec2\fP nk_rect_pos (struct \fBnk_rect\fP)"

.SS "\fBNK_API\fP struct \fBnk_vec2\fP nk_rect_size (struct \fBnk_rect\fP)"

.SS "\fBNK_API\fP struct \fBnk_rect\fP nk_recta (struct \fBnk_vec2\fP pos, struct \fBnk_vec2\fP size)"

.SS "\fBNK_API\fP struct \fBnk_rect\fP \fBnk_recti\fP (int x, int y, int w, int h)"

.SS "\fBNK_API\fP struct \fBnk_rect\fP nk_rectiv (const int * xywh)"

.SS "\fBNK_API\fP struct \fBnk_rect\fP nk_rectv (const float * xywh)"

.SS "\fBNK_API\fP struct \fBnk_color\fP nk_rgb (int r, int g, int b)"

.SS "\fBNK_API\fP struct \fBnk_color\fP nk_rgb_bv (const \fBnk_byte\fP * rgb)"

.SS "\fBNK_API\fP struct \fBnk_color\fP nk_rgb_cf (struct \fBnk_colorf\fP c)"

.SS "\fBNK_API\fP struct \fBnk_color\fP nk_rgb_f (float r, float g, float b)"

.SS "\fBNK_API\fP struct \fBnk_color\fP nk_rgb_fv (const float * rgb)"

.SS "\fBNK_API\fP struct \fBnk_color\fP nk_rgb_hex (const char * rgb)"

.SS "\fBNK_API\fP struct \fBnk_color\fP nk_rgb_iv (const int * rgb)"

.SS "\fBNK_API\fP struct \fBnk_color\fP nk_rgba (int r, int g, int b, int a)"

.SS "\fBNK_API\fP struct \fBnk_color\fP nk_rgba_bv (const \fBnk_byte\fP * rgba)"

.SS "\fBNK_API\fP struct \fBnk_color\fP nk_rgba_cf (struct \fBnk_colorf\fP c)"

.SS "\fBNK_API\fP struct \fBnk_color\fP nk_rgba_f (float r, float g, float b, float a)"

.SS "\fBNK_API\fP struct \fBnk_color\fP nk_rgba_fv (const float * rgba)"

.SS "\fBNK_API\fP struct \fBnk_color\fP nk_rgba_hex (const char * rgb)"

.SS "\fBNK_API\fP struct \fBnk_color\fP nk_rgba_iv (const int * rgba)"

.SS "\fBNK_API\fP struct \fBnk_color\fP nk_rgba_u32 (\fBnk_uint\fP)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_select_image_label (struct \fBnk_context\fP *, struct \fBnk_image\fP, const char *, \fBnk_flags\fP align, \fBnk_bool\fP value)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_select_image_text (struct \fBnk_context\fP *, struct \fBnk_image\fP, const char *, int, \fBnk_flags\fP align, \fBnk_bool\fP value)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_select_label (struct \fBnk_context\fP *, const char *, \fBnk_flags\fP align, \fBnk_bool\fP value)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_select_symbol_label (struct \fBnk_context\fP *, enum nk_symbol_type, const char *, \fBnk_flags\fP align, \fBnk_bool\fP value)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_select_symbol_text (struct \fBnk_context\fP *, enum nk_symbol_type, const char *, int, \fBnk_flags\fP align, \fBnk_bool\fP value)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_select_text (struct \fBnk_context\fP *, const char *, int, \fBnk_flags\fP align, \fBnk_bool\fP value)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_selectable_image_label (struct \fBnk_context\fP *, struct \fBnk_image\fP, const char *, \fBnk_flags\fP align, \fBnk_bool\fP * value)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_selectable_image_text (struct \fBnk_context\fP *, struct \fBnk_image\fP, const char *, int, \fBnk_flags\fP align, \fBnk_bool\fP * value)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_selectable_label (struct \fBnk_context\fP *, const char *, \fBnk_flags\fP align, \fBnk_bool\fP * value)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_selectable_symbol_label (struct \fBnk_context\fP *, enum nk_symbol_type, const char *, \fBnk_flags\fP align, \fBnk_bool\fP * value)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_selectable_symbol_text (struct \fBnk_context\fP *, enum nk_symbol_type, const char *, int, \fBnk_flags\fP align, \fBnk_bool\fP * value)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_selectable_text (struct \fBnk_context\fP *, const char *, int, \fBnk_flags\fP align, \fBnk_bool\fP * value)"

.SS "\fBNK_API\fP float nk_slide_float (struct \fBnk_context\fP *, float min, float val, float max, float step)"

.SS "\fBNK_API\fP int nk_slide_int (struct \fBnk_context\fP *, int min, int val, int max, int step)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_slider_float (struct \fBnk_context\fP *, float min, float * val, float max, float step)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_slider_int (struct \fBnk_context\fP *, int min, int * val, int max, int step)"

.SS "\fBNK_API\fP void nk_spacer (struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP void nk_spacing (struct \fBnk_context\fP *, int cols)"

.SS "NK_STATIC_ASSERT (sizeof(\fBnk_bool\fP) >= 2)"

.SS "NK_STATIC_ASSERT (sizeof(\fBnk_byte\fP) = \fC=1\fP)"

.SS "NK_STATIC_ASSERT (sizeof(\fBnk_flags\fP) >= 4)"

.SS "NK_STATIC_ASSERT (sizeof(\fBnk_int\fP) = \fC=4\fP)"

.SS "NK_STATIC_ASSERT (sizeof(\fBnk_ptr\fP) >=sizeof(void *))"

.SS "NK_STATIC_ASSERT (sizeof(\fBnk_short\fP) = \fC=2\fP)"

.SS "NK_STATIC_ASSERT (sizeof(\fBnk_size\fP) >=sizeof(void *))"

.SS "NK_STATIC_ASSERT (sizeof(\fBnk_uint\fP) = \fC=4\fP)"

.SS "NK_STATIC_ASSERT (sizeof(\fBnk_ushort\fP) = \fC=2\fP)"

.SS "\fBNK_API\fP int nk_str_append_str_char (struct \fBnk_str\fP *, const char *)"

.SS "\fBNK_API\fP int nk_str_append_str_runes (struct \fBnk_str\fP *, const \fBnk_rune\fP *)"

.SS "\fBNK_API\fP int nk_str_append_str_utf8 (struct \fBnk_str\fP *, const char *)"

.SS "\fBNK_API\fP int nk_str_append_text_char (struct \fBnk_str\fP *, const char *, int)"

.SS "\fBNK_API\fP int nk_str_append_text_runes (struct \fBnk_str\fP *, const \fBnk_rune\fP *, int)"

.SS "\fBNK_API\fP int nk_str_append_text_utf8 (struct \fBnk_str\fP *, const char *, int)"

.SS "\fBNK_API\fP char * nk_str_at_char (struct \fBnk_str\fP *, int pos)"

.SS "\fBNK_API\fP const char * nk_str_at_char_const (const struct \fBnk_str\fP *, int pos)"

.SS "\fBNK_API\fP const char * nk_str_at_const (const struct \fBnk_str\fP *, int pos, \fBnk_rune\fP * unicode, int * len)"

.SS "\fBNK_API\fP char * nk_str_at_rune (struct \fBnk_str\fP *, int pos, \fBnk_rune\fP * unicode, int * len)"

.SS "\fBNK_API\fP void nk_str_clear (struct \fBnk_str\fP *)"

.SS "\fBNK_API\fP void nk_str_delete_chars (struct \fBnk_str\fP *, int pos, int len)"

.SS "\fBNK_API\fP void nk_str_delete_runes (struct \fBnk_str\fP *, int pos, int len)"

.SS "\fBNK_API\fP void nk_str_free (struct \fBnk_str\fP *)"

.SS "\fBNK_API\fP char * nk_str_get (struct \fBnk_str\fP *)"

.SS "\fBNK_API\fP const char * nk_str_get_const (const struct \fBnk_str\fP *)"

.SS "\fBNK_API\fP void nk_str_init (struct \fBnk_str\fP *, const struct \fBnk_allocator\fP *, \fBnk_size\fP size)"

.SS "\fBNK_API\fP void nk_str_init_fixed (struct \fBnk_str\fP *, void * memory, \fBnk_size\fP size)"

.SS "\fBNK_API\fP int nk_str_insert_at_char (struct \fBnk_str\fP *, int pos, const char *, int)"

.SS "\fBNK_API\fP int nk_str_insert_at_rune (struct \fBnk_str\fP *, int pos, const char *, int)"

.SS "\fBNK_API\fP int nk_str_insert_str_char (struct \fBnk_str\fP *, int pos, const char *)"

.SS "\fBNK_API\fP int nk_str_insert_str_runes (struct \fBnk_str\fP *, int pos, const \fBnk_rune\fP *)"

.SS "\fBNK_API\fP int nk_str_insert_str_utf8 (struct \fBnk_str\fP *, int pos, const char *)"

.SS "\fBNK_API\fP int nk_str_insert_text_char (struct \fBnk_str\fP *, int pos, const char *, int)"

.SS "\fBNK_API\fP int nk_str_insert_text_runes (struct \fBnk_str\fP *, int pos, const \fBnk_rune\fP *, int)"

.SS "\fBNK_API\fP int nk_str_insert_text_utf8 (struct \fBnk_str\fP *, int pos, const char *, int)"

.SS "\fBNK_API\fP int nk_str_len (struct \fBnk_str\fP *)"

.SS "\fBNK_API\fP int nk_str_len_char (struct \fBnk_str\fP *)"

.SS "\fBNK_API\fP void nk_str_remove_chars (struct \fBnk_str\fP *, int len)"

.SS "\fBNK_API\fP void nk_str_remove_runes (struct \fBnk_str\fP * str, int len)"

.SS "\fBNK_API\fP \fBnk_rune\fP nk_str_rune_at (const struct \fBnk_str\fP *, int pos)"

.SS "\fBNK_API\fP int nk_strfilter (const char * text, const char * regexp)"

.SS "\fBNK_API\fP int nk_stricmp (const char * s1, const char * s2)"

.SS "\fBNK_API\fP int nk_stricmpn (const char * s1, const char * s2, int n)"

.SS "\fBNK_API\fP int nk_strlen (const char * str)"

.SS "\fBNK_API\fP int nk_strmatch_fuzzy_string (char const * str, char const * pattern, int * out_score)"

.SS "\fBNK_API\fP int nk_strmatch_fuzzy_text (const char * txt, int txt_len, const char * pattern, int * out_score)"

.SS "\fBNK_API\fP void nk_stroke_arc (struct \fBnk_command_buffer\fP *, float cx, float cy, float radius, float a_min, float a_max, float line_thickness, struct \fBnk_color\fP)"

.SS "\fBNK_API\fP void nk_stroke_circle (struct \fBnk_command_buffer\fP *, struct \fBnk_rect\fP, float line_thickness, struct \fBnk_color\fP)"

.SS "\fBNK_API\fP void nk_stroke_curve (struct \fBnk_command_buffer\fP *, float, float, float, float, float, float, float, float, float line_thickness, struct \fBnk_color\fP)"

.SS "\fBNK_API\fP void nk_stroke_line (struct \fBnk_command_buffer\fP * b, float x0, float y0, float x1, float y1, float line_thickness, struct \fBnk_color\fP)"

.SS "\fBNK_API\fP void nk_stroke_polygon (struct \fBnk_command_buffer\fP *, float *, int point_count, float line_thickness, struct \fBnk_color\fP)"

.SS "\fBNK_API\fP void nk_stroke_polyline (struct \fBnk_command_buffer\fP *, float * points, int point_count, float line_thickness, struct \fBnk_color\fP col)"

.SS "\fBNK_API\fP void nk_stroke_rect (struct \fBnk_command_buffer\fP *, struct \fBnk_rect\fP, float rounding, float line_thickness, struct \fBnk_color\fP)"

.SS "\fBNK_API\fP void nk_stroke_triangle (struct \fBnk_command_buffer\fP *, float, float, float, float, float, float, float line_thichness, struct \fBnk_color\fP)"

.SS "\fBNK_API\fP double nk_strtod (const char * str, const char ** endptr)"

.SS "\fBNK_API\fP float nk_strtof (const char * str, const char ** endptr)"

.SS "\fBNK_API\fP int nk_strtoi (const char * str, const char ** endptr)"

.SS "\fBNK_API\fP void nk_style_default (struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP void nk_style_from_table (struct \fBnk_context\fP *, const struct \fBnk_color\fP *)"

.SS "\fBNK_API\fP const char * nk_style_get_color_by_name (enum nk_style_colors)"

.SS "\fBNK_API\fP void nk_style_hide_cursor (struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP struct \fBnk_style_item\fP nk_style_item_color (struct \fBnk_color\fP)"

.SS "\fBNK_API\fP struct \fBnk_style_item\fP nk_style_item_hide (void)"

.SS "\fBNK_API\fP struct \fBnk_style_item\fP nk_style_item_image (struct \fBnk_image\fP img)"

.SS "\fBNK_API\fP struct \fBnk_style_item\fP nk_style_item_nine_slice (struct \fBnk_nine_slice\fP slice)"

.SS "\fBNK_API\fP void nk_style_load_all_cursors (struct \fBnk_context\fP *, struct \fBnk_cursor\fP *)"

.SS "\fBNK_API\fP void nk_style_load_cursor (struct \fBnk_context\fP *, enum nk_style_cursor, const struct \fBnk_cursor\fP *)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_style_pop_color (struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_style_pop_flags (struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_style_pop_float (struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_style_pop_font (struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_style_pop_style_item (struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_style_pop_vec2 (struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_style_push_color (struct \fBnk_context\fP *, struct \fBnk_color\fP *, struct \fBnk_color\fP)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_style_push_flags (struct \fBnk_context\fP *, \fBnk_flags\fP *, \fBnk_flags\fP)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_style_push_float (struct \fBnk_context\fP *, float *, float)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_style_push_font (struct \fBnk_context\fP *, const struct \fBnk_user_font\fP *)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_style_push_style_item (struct \fBnk_context\fP *, struct \fBnk_style_item\fP *, struct \fBnk_style_item\fP)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_style_push_vec2 (struct \fBnk_context\fP *, struct \fBnk_vec2\fP *, struct \fBnk_vec2\fP)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_style_set_cursor (struct \fBnk_context\fP *, enum nk_style_cursor)"

.SS "\fBNK_API\fP void nk_style_set_font (struct \fBnk_context\fP *, const struct \fBnk_user_font\fP *)"

.SS "\fBNK_API\fP void nk_style_show_cursor (struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP struct \fBnk_nine_slice\fP nk_sub9slice_handle (\fBnk_handle\fP, \fBnk_ushort\fP w, \fBnk_ushort\fP h, struct \fBnk_rect\fP sub_region, \fBnk_ushort\fP l, \fBnk_ushort\fP t, \fBnk_ushort\fP r, \fBnk_ushort\fP b)"

.SS "\fBNK_API\fP struct \fBnk_nine_slice\fP nk_sub9slice_id (int, \fBnk_ushort\fP w, \fBnk_ushort\fP h, struct \fBnk_rect\fP sub_region, \fBnk_ushort\fP l, \fBnk_ushort\fP t, \fBnk_ushort\fP r, \fBnk_ushort\fP b)"

.SS "\fBNK_API\fP struct \fBnk_nine_slice\fP nk_sub9slice_ptr (void *, \fBnk_ushort\fP w, \fBnk_ushort\fP h, struct \fBnk_rect\fP sub_region, \fBnk_ushort\fP l, \fBnk_ushort\fP t, \fBnk_ushort\fP r, \fBnk_ushort\fP b)"

.SS "\fBNK_API\fP struct \fBnk_image\fP nk_subimage_handle (\fBnk_handle\fP, \fBnk_ushort\fP w, \fBnk_ushort\fP h, struct \fBnk_rect\fP sub_region)"

.SS "\fBNK_API\fP struct \fBnk_image\fP nk_subimage_id (int, \fBnk_ushort\fP w, \fBnk_ushort\fP h, struct \fBnk_rect\fP sub_region)"

.SS "\fBNK_API\fP struct \fBnk_image\fP nk_subimage_ptr (void *, \fBnk_ushort\fP w, \fBnk_ushort\fP h, struct \fBnk_rect\fP sub_region)"

.SS "\fBNK_API\fP void nk_text (struct \fBnk_context\fP *, const char *, int, \fBnk_flags\fP)"

.SS "\fBNK_API\fP void nk_text_colored (struct \fBnk_context\fP *, const char *, int, \fBnk_flags\fP, struct \fBnk_color\fP)"

.SS "\fBNK_API\fP void nk_text_wrap (struct \fBnk_context\fP *, const char *, int)"

.SS "\fBNK_API\fP void nk_text_wrap_colored (struct \fBnk_context\fP *, const char *, int, struct \fBnk_color\fP)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_textedit_cut (struct \fBnk_text_edit\fP *)"

.SS "\fBNK_API\fP void nk_textedit_delete (struct \fBnk_text_edit\fP *, int where, int len)"

.SS "\fBNK_API\fP void nk_textedit_delete_selection (struct \fBnk_text_edit\fP *)"

.SS "\fBNK_API\fP void nk_textedit_free (struct \fBnk_text_edit\fP *)"

.SS "\fBNK_API\fP void nk_textedit_init (struct \fBnk_text_edit\fP *, struct \fBnk_allocator\fP *, \fBnk_size\fP size)"

.SS "\fBNK_API\fP void nk_textedit_init_fixed (struct \fBnk_text_edit\fP *, void * memory, \fBnk_size\fP size)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_textedit_paste (struct \fBnk_text_edit\fP *, char const *, int len)"

.SS "\fBNK_API\fP void nk_textedit_redo (struct \fBnk_text_edit\fP *)"

.SS "\fBNK_API\fP void nk_textedit_select_all (struct \fBnk_text_edit\fP *)"

.SS "\fBNK_API\fP void nk_textedit_text (struct \fBnk_text_edit\fP *, const char *, int total_len)"

.SS "\fBNK_API\fP void nk_textedit_undo (struct \fBnk_text_edit\fP *)"

.SS "\fBNK_API\fP void nk_tooltip (struct \fBnk_context\fP *, const char *)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_tooltip_begin (struct \fBnk_context\fP *, float width)"

.SS "\fBNK_API\fP void nk_tooltip_end (struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_tree_element_image_push_hashed (struct \fBnk_context\fP *, enum nk_tree_type, struct \fBnk_image\fP, const char * title, enum \fBnk_collapse_states\fP initial_state, \fBnk_bool\fP * selected, const char * hash, int len, int seed)"

.SS "\fBNK_API\fP void nk_tree_element_pop (struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_tree_element_push_hashed (struct \fBnk_context\fP *, enum nk_tree_type, const char * title, enum \fBnk_collapse_states\fP initial_state, \fBnk_bool\fP * selected, const char * hash, int len, int seed)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_tree_image_push_hashed (struct \fBnk_context\fP *, enum nk_tree_type, struct \fBnk_image\fP, const char * title, enum \fBnk_collapse_states\fP initial_state, const char * hash, int len, int seed)"

.SS "\fBNK_API\fP void nk_tree_pop (struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_tree_push_hashed (struct \fBnk_context\fP *, enum nk_tree_type, const char * title, enum \fBnk_collapse_states\fP initial_state, const char * hash, int len, int seed)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_tree_state_image_push (struct \fBnk_context\fP *, enum nk_tree_type, struct \fBnk_image\fP, const char * title, enum \fBnk_collapse_states\fP * state)"

.SS "\fBNK_API\fP void nk_tree_state_pop (struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_tree_state_push (struct \fBnk_context\fP *, enum nk_tree_type, const char * title, enum \fBnk_collapse_states\fP * state)"

.SS "\fBNK_API\fP void nk_triangle_from_direction (struct \fBnk_vec2\fP * result, struct \fBnk_rect\fP r, float pad_x, float pad_y, enum nk_heading)"

.SS "\fBNK_API\fP const char * nk_utf_at (const char * buffer, int length, int index, \fBnk_rune\fP * unicode, int * len)"

.SS "\fBNK_API\fP int nk_utf_decode (const char *, \fBnk_rune\fP *, int)"

.SS "\fBNK_API\fP int nk_utf_encode (\fBnk_rune\fP, char *, int)"

.SS "\fBNK_API\fP int nk_utf_len (const char *, int byte_len)"

.SS "\fBNK_API\fP struct \fBnk_vec2\fP \fBnk_vec2\fP (float x, float y)"

.SS "\fBNK_API\fP struct \fBnk_vec2\fP \fBnk_vec2i\fP (int x, int y)"

.SS "\fBNK_API\fP struct \fBnk_vec2\fP nk_vec2iv (const int * xy)"

.SS "\fBNK_API\fP struct \fBnk_vec2\fP nk_vec2v (const float * xy)"

.SS "\fBNK_API\fP enum \fBnk_widget_layout_states\fP nk_widget (struct \fBnk_rect\fP *, const struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP struct \fBnk_rect\fP nk_widget_bounds (struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP enum \fBnk_widget_layout_states\fP nk_widget_fitting (struct \fBnk_rect\fP *, struct \fBnk_context\fP *, struct \fBnk_vec2\fP)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_widget_has_mouse_click_down (struct \fBnk_context\fP *, enum nk_buttons, \fBnk_bool\fP down)"

.SS "\fBNK_API\fP float nk_widget_height (struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_widget_is_hovered (struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_widget_is_mouse_clicked (struct \fBnk_context\fP *, enum nk_buttons)"

.SS "\fBNK_API\fP struct \fBnk_vec2\fP nk_widget_position (struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP struct \fBnk_vec2\fP nk_widget_size (struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP float nk_widget_width (struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP void nk_window_close (struct \fBnk_context\fP * ctx, const char * name)"

.SS "\fBNK_API\fP void nk_window_collapse (struct \fBnk_context\fP *, const char * name, enum \fBnk_collapse_states\fP state)"

.SS "\fBNK_API\fP void nk_window_collapse_if (struct \fBnk_context\fP *, const char * name, enum nk_collapse_states, int cond)"

.SS "\fBNK_API\fP struct \fBnk_window\fP * nk_window_find (struct \fBnk_context\fP * ctx, const char * name)"

.SS "\fBNK_API\fP struct \fBnk_rect\fP nk_window_get_bounds (const struct \fBnk_context\fP * ctx)"

.SS "\fBNK_API\fP struct \fBnk_command_buffer\fP * nk_window_get_canvas (struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP struct \fBnk_rect\fP nk_window_get_content_region (struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP struct \fBnk_vec2\fP nk_window_get_content_region_max (struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP struct \fBnk_vec2\fP nk_window_get_content_region_min (struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP struct \fBnk_vec2\fP nk_window_get_content_region_size (struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP float nk_window_get_height (const struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP struct \fBnk_panel\fP * nk_window_get_panel (struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP struct \fBnk_vec2\fP nk_window_get_position (const struct \fBnk_context\fP * ctx)"

.SS "\fBNK_API\fP void nk_window_get_scroll (struct \fBnk_context\fP *, \fBnk_uint\fP * offset_x, \fBnk_uint\fP * offset_y)"

.SS "\fBNK_API\fP struct \fBnk_vec2\fP nk_window_get_size (const struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP float nk_window_get_width (const struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_window_has_focus (const struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_window_is_active (struct \fBnk_context\fP *, const char *)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_window_is_any_hovered (struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_window_is_closed (struct \fBnk_context\fP *, const char *)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_window_is_collapsed (struct \fBnk_context\fP * ctx, const char * name)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_window_is_hidden (struct \fBnk_context\fP *, const char *)"

.SS "\fBNK_API\fP \fBnk_bool\fP nk_window_is_hovered (struct \fBnk_context\fP *)"

.SS "\fBNK_API\fP void nk_window_set_bounds (struct \fBnk_context\fP *, const char * name, struct \fBnk_rect\fP bounds)"

.SS "\fBNK_API\fP void nk_window_set_focus (struct \fBnk_context\fP *, const char * name)"

.SS "\fBNK_API\fP void nk_window_set_position (struct \fBnk_context\fP *, const char * name, struct \fBnk_vec2\fP pos)"

.SS "\fBNK_API\fP void nk_window_set_scroll (struct \fBnk_context\fP *, \fBnk_uint\fP offset_x, \fBnk_uint\fP offset_y)"

.SS "\fBNK_API\fP void nk_window_set_size (struct \fBnk_context\fP *, const char * name, struct \fBnk_vec2\fP)"

.SS "\fBNK_API\fP void nk_window_show (struct \fBnk_context\fP *, const char * name, enum nk_show_states)"

.SS "\fBNK_API\fP void nk_window_show_if (struct \fBnk_context\fP *, const char * name, enum nk_show_states, int cond)"

.SH "Author"
.PP 
Generated automatically by Doxygen for MotorEngine from the source code\&.
