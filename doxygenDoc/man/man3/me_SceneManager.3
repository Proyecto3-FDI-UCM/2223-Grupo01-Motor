.TH "me::SceneManager" 3 "Mon Apr 3 2023" "Version 0.2.1" "MotorEngine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
me::SceneManager
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <SceneManager\&.h>\fP
.PP
Inherits \fBme::Singleton< SceneManager >\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBSceneManager\fP ()"
.br
.ti -1c
.RI "virtual \fB~SceneManager\fP ()"
.br
.ti -1c
.RI "std::shared_ptr< \fBScene\fP > \fBaddScene\fP (const std::string &name)"
.br
.ti -1c
.RI "void \fBremoveScene\fP (const std::string &name)"
.br
.ti -1c
.RI "std::shared_ptr< \fBScene\fP > \fBgetScene\fP (const std::string &name) const"
.br
.ti -1c
.RI "std::shared_ptr< \fBScene\fP > \fBgetActiveScene\fP () const"
.br
.ti -1c
.RI "void \fBrenameScene\fP (const std::string &oldName, const std::string &newName)"
.br
.ti -1c
.RI "void \fBsetActiveScene\fP (const std::string &name)"
.br
.ti -1c
.RI "void \fBupdate\fP ()"
.br
.ti -1c
.RI "int \fBloadEntities\fP (const std::string &sceneName)"
.br
.in -1c

Public Member Functions inherited from \fBme::Singleton< SceneManager >\fP
.in +1c
.ti -1c
.RI "\fBSingleton\fP (const \fBSingleton\fP< \fBSceneManager\fP > &o)=delete"
.br
.ti -1c
.RI "\fBSingleton\fP< \fBSceneManager\fP > & \fBoperator=\fP (const \fBSingleton\fP< \fBSceneManager\fP > &o)=delete"
.br
.ti -1c
.RI "virtual \fB~Singleton\fP ()"
.br
.in -1c
.SS "Additional Inherited Members"


Static Public Member Functions inherited from \fBme::Singleton< SceneManager >\fP
.in +1c
.ti -1c
.RI "static \fBSceneManager\fP * \fBinit\fP (Targs &&\&.\&.\&.args)"
.br
.ti -1c
.RI "static \fBSceneManager\fP * \fBinstance\fP ()"
.br
.in -1c

Protected Member Functions inherited from \fBme::Singleton< SceneManager >\fP
.in +1c
.ti -1c
.RI "\fBSingleton\fP ()"
.br
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "me::SceneManager::SceneManager ()"
Build the foundation of the \fBSceneManager\fP\&. 
.SS "me::SceneManager::~SceneManager ()\fC [virtual]\fP"
This method is meant to be the definition of the dynamic memory that has to be safely delete\&. 
.SH "Member Function Documentation"
.PP 
.SS "std::shared_ptr< \fBScene\fP > me::SceneManager::addScene (const std::string & name)"
Add a new \fBScene\fP to the \fBSceneManager\fP\&. This assumes that the name is a unique identifier\&. 
.PP
\fBParameters\fP
.RS 4
\fIString\fP name to identify the new scene\&. 
.RE
.PP

.SS "std::shared_ptr< \fBScene\fP > me::SceneManager::getActiveScene () const\fC [inline]\fP"
Get the scene that is actually active from the \fBSceneManager\fP\&. 
.SS "std::shared_ptr< \fBScene\fP > me::SceneManager::getScene (const std::string & name) const"
Get an scene from the \fBSceneManager\fP\&. This assumes that the name is a unique identifier\&. 
.PP
\fBParameters\fP
.RS 4
\fIString\fP name to identify the scene suggested\&. 
.RE
.PP

.SS "int me::SceneManager::loadEntities (const std::string & sceneName)"
Parse entities from \&.lua file to an unordered_map that will be passed to the current \fBScene\fP to create the entities\&. sceneName has to be the name of the file with \&.lua INCLUDED\&. Example: sceneName => scene\&.lua
.PP
\fBReturns\fP
.RS 4
Error Value, 0 if loadEntities worked correctly or 1 if some error appeared during this function 
.RE
.PP

.SS "void me::SceneManager::removeScene (const std::string & name)"
Remove an scene from the \fBSceneManager\fP\&. This assumes that the name is a unique identifier\&. 
.PP
\fBParameters\fP
.RS 4
\fIString\fP name to identify the scene to be remove\&. 
.RE
.PP

.SS "void me::SceneManager::renameScene (const std::string & oldName, const std::string & newName)"
Rename an scene name to the new one\&. 
.PP
\fBParameters\fP
.RS 4
\fIString\fP oldName to be change\&. 
.br
\fIString\fP newName to be set\&. 
.RE
.PP

.SS "void me::SceneManager::setActiveScene (const std::string & name)"
Set the active scene from the \fBSceneManager\fP\&. This assumes that the name is a unique identifier\&. 
.PP
\fBParameters\fP
.RS 4
\fIString\fP name to identify the scene suggested\&. 
.RE
.PP

.SS "void me::SceneManager::update ()"
Main loop of this manager, if there is an active scene this will call the scene loop mehtods by the order of: processNewEntities, update, lateUpdate and refresh\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for MotorEngine from the source code\&.
