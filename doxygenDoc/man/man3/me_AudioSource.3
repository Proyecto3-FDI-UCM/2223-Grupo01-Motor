.TH "me::AudioSource" 3 "Mon Apr 3 2023" "Version 0.2.1" "MotorEngine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
me::AudioSource
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <AudioSource\&.h>\fP
.PP
Inherits \fBme::Component\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBAudioSource\fP ()"
.br
.ti -1c
.RI "\fB~AudioSource\fP ()"
.br
.ti -1c
.RI "void \fBstart\fP ()"
.br
.ti -1c
.RI "void \fBupdate\fP ()"
.br
.ti -1c
.RI "void \fBplay\fP ()"
.br
.ti -1c
.RI "void \fBstop\fP ()"
.br
.ti -1c
.RI "void \fBpause\fP ()"
.br
.ti -1c
.RI "void \fBresume\fP ()"
.br
.ti -1c
.RI "bool \fBisPlaying\fP ()"
.br
.ti -1c
.RI "void \fBsetVolume\fP (float value)"
.br
.ti -1c
.RI "void \fBsetSource\fP (std::string source)"
.br
.ti -1c
.RI "void \fBsetLoop\fP (bool loop)"
.br
.ti -1c
.RI "void \fBsetIs3D\fP (bool is3D)"
.br
.ti -1c
.RI "void \fBsetPlayOnStart\fP (bool playOnStart)"
.br
.ti -1c
.RI "float \fBgetVolume\fP ()"
.br
.in -1c

Public Member Functions inherited from \fBme::Component\fP
.in +1c
.ti -1c
.RI "\fBComponent\fP ()"
.br
.ti -1c
.RI "virtual \fB~Component\fP ()"
.br
.ti -1c
.RI "void \fBsetEntity\fP (\fBEntity\fP *e)"
.br
.ti -1c
.RI "\fBEntity\fP * \fBgetEntity\fP ()"
.br
.ti -1c
.RI "virtual void \fBstart\fP ()"
.br
.ti -1c
.RI "virtual void \fBupdate\fP ()"
.br
.ti -1c
.RI "virtual void \fBlateUpdate\fP ()"
.br
.ti -1c
.RI "virtual void \fBOnCollisionEnter\fP (\fBEntity\fP *other)"
.br
.ti -1c
.RI "virtual void \fBOnCollisionStay\fP (\fBEntity\fP *other)"
.br
.ti -1c
.RI "virtual void \fBOnCollisionExit\fP (\fBEntity\fP *other)"
.br
.in -1c
.SS "Additional Inherited Members"


Public Attributes inherited from \fBme::Component\fP
.in +1c
.ti -1c
.RI "bool \fBenabled\fP = true"
.br
.in -1c

Protected Attributes inherited from \fBme::Component\fP
.in +1c
.ti -1c
.RI "\fBEntity\fP * \fBmEntity\fP"
.br
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "me::AudioSource::AudioSource ()"

.SS "me::AudioSource::~AudioSource ()"

.SH "Member Function Documentation"
.PP 
.SS "float me::AudioSource::getVolume ()\fC [inline]\fP"
Get the volume of the audio\&. 
.PP
\fBReturns\fP
.RS 4
The current volume value\&. 
.RE
.PP

.SS "bool me::AudioSource::isPlaying ()"
Check if the audio is currently playing\&. 
.PP
\fBReturns\fP
.RS 4
True if the audio is playing, false otherwise\&. 
.RE
.PP

.SS "void me::AudioSource::pause ()"
Pause the audio\&. 
.SS "void me::AudioSource::play ()"
Play the audio\&. 
.SS "void me::AudioSource::resume ()"
Resume playing the audio after it has been paused\&. 
.SS "void me::AudioSource::setIs3D (bool is3D)\fC [inline]\fP"
Set if the audio will be a 3D audio 
.SS "void me::AudioSource::setLoop (bool loop)\fC [inline]\fP"
Set if the audio will play in a loop 
.SS "void me::AudioSource::setPlayOnStart (bool playOnStart)\fC [inline]\fP"
Set if the adio will play at the start 
.SS "void me::AudioSource::setSource (std::string source)\fC [inline]\fP"
Set the source of the audio 
.PP
\fBParameters\fP
.RS 4
\fIsource\fP The audio file to play\&. 
.RE
.PP

.SS "void me::AudioSource::setVolume (float value)\fC [inline]\fP"
Set the volume of the audio\&. 
.PP
\fBParameters\fP
.RS 4
\fIvalue\fP The new volume value\&. 
.RE
.PP

.SS "void me::AudioSource::start ()\fC [virtual]\fP"
This method is only ever called once\&. This must be called at the instantiation of the script\&. 
.PP
Reimplemented from \fBme::Component\fP\&.
.SS "void me::AudioSource::stop ()"
Stop the audio\&. 
.SS "void me::AudioSource::update ()\fC [virtual]\fP"
This method is meant to be the definition of those updates that has to be processed at the begining of the game cycle\&.
.PP
Almost all the logic updates\&. 
.PP
Reimplemented from \fBme::Component\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for MotorEngine from the source code\&.
